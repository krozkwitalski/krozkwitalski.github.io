{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,S,E,C,E,O,G,E,U,C,E,O,C,C,C,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,Q,S,C,C,C,E,E,E,O,C,e,I,G,E,E,O,C,U,I,G,E,E,O,C,oB,I,G,E,E,O,C,U,I,G,E,E,O,C,iB,I,G,E,E,O,C,S,I,G,E,E,O,C,Y,I,G,I,E,E,SCGO,IAAM,EAAe,CAC1B,IAAK,mBACL,OAAQ,iBACR,KAAM,eACN,GAAI,oBACJ,GAAI,gBACJ,MAAO,kBACT,EAEa,EAAmB,CAC9B,eAAgB,CACd,IAAK,KACL,GAAI,GACJ,GAAI,KACJ,OAAQ,KACR,KAAM,GACR,EACA,iBAAkB,CAChB,IAAK,MACL,GAAI,MACJ,GAAI,MACJ,OAAQ,MACR,KAAM,GACR,EACA,eAAgB,CACd,IAAK,GACL,GAAI,GACJ,GAAI,EACJ,OAAQ,EACR,KAAM,CACR,EACA,uBAAwB,CACtB,IAAK,KACL,GAAI,GACJ,GAAI,KACJ,OAAQ,IACR,KAAM,GACR,EACA,eAAgB,CACd,IAAK,KACL,GAAI,KACJ,GAAI,IACJ,OAAQ,KACR,KAAM,GACR,EACA,mBAAoB,CAClB,IAAK,KACL,GAAI,KACJ,GAAI,IACJ,OAAQ,IACR,KAAM,GACR,EACA,2CAA2C;AAC3C,eAAe;AACf,cAAc;AACd,cAAc;AACd,kBAAkB;AAClB,eAAe;AACf,KAAK;AACL,kBAAmB,CACjB,IAAK,GACL,GAAI,GACJ,GAAI,EACJ,OAAQ,EACR,KAAM,CACR,EACA,eAAgB,CACd,IAAK,GACL,GAAI,KACJ,GAAI,KACJ,OAAQ,GACR,KAAM,GACR,EACA,gBAAiB,CACf,IAA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Y,EADd,GAGI,EAAe,QAAA,EACjB,EAAY,EADd,GAGI,EAAe,YAAA,EACjB,EAAY,MADd,GAII,EAAe,WAAA,EACjB,EAAgB,EADlB,GAGI,EAAe,WAAA,EACjB,EAAgB,EADlB,GAGI,EAAe,eAAA,EACjB,EAAgB,MADlB,EAGF,CAAE,4BAA4B;AAE9B,IAAM,EAA0B,CAAC,EACjC,AAAA,CAAA,EAAA,EAAA,kBAAiB,AAAjB,EAAmB,GAChB,KAAA,CAAM,EAAG,IACT,OAAA,CAAQ,CAAC,CAAA,IAAE,CAAG,CAAA,MAAE,CAAK,CAAE,IACtB,CAAc,CAAC,EAA2B,GAAO,CAAG,KAAK,KAAA,CACvD,EAEJ,GAEF,IAAM,EAA8B,CAAC,EASrC,MARA,AAAA,CAAA,EAAA,EAAA,kBAAiB,AAAjB,EAAmB,GAChB,KAAA,CAAM,EAAG,GACT,OAAA,CAAQ,CAAC,CAAA,IAAE,CAAG,CAAA,MAAE,CAAK,CAAE,IACtB,CAAkB,CAAC,EAA2B,GAAO,CAAG,KAAK,KAAA,CAC3D,EAEJ,GAEK,CACL,uBAAA,EACA,kBAAA,EACA,eAAA,EACA,mBAAA,EACA,UAAA,EACA,gJAAgJ;AAChJ,gBAAiB,CACf,GAAG,CAAe,CAClB,GAAI,AAAa,KAAb,EAAM,EAAA,CAAY,EAAI,EAAgB,EAA1C,CACA,OAAQ,AAAa,KAAb,EAAM,EAAA,CAAY,EAAI,EAAgB,MAA9C,AACF,EACA,iBAAA,EACA,mBAAA,EACA,gBAAA,EACA,YAAA,CACF,CACF,C,G,E,Q,C,Q,S,C,C,C,E,E,E,O,C,gB,I,GC9TO,IAAM,EAAgB,C,G,E,Q,C,Q,S,C,C,C,E,E,E,O,C,U,I,G,I,E,E,S,S,E,C,C,C,E,I,I,E,E,E,E,M,C,I,C,I,E,C,C,E,A,C,E,U,C,E,U,E,C,E,E,Y,C,C,E,U,G,C,E,Q,C,C,C,E,O,c,C,E,A,S,C,E,I,E,A,S,C,C,C,E,G,A,U,O,G,A,O,E,O,E,I,E,C,C,O,W,C,C,G,A,K,I,E,C,I,E,E,I,C,E,G,W,G,A,U,O,E,O,C,O,A,U,+C,C,M,A,C,A,W,E,O,M,E,E,E,E,U,M,A,U,O,E,E,O,E,E,E,G,E,E,C,C,S,E,C,C,C,C,C,E,O,G,E,E,S,C,G,G,E,E,G,O,c,C,E,Y,C,S,C,C,G,C,C,S,E,C,C,C,E,E,S,C,O,M,C,E,S,E,E,S,C,W,C,E,E,E,E,C,S,E,C,C,C,E,M,A,C,E,O,c,C,O,c,C,I,G,S,C,C,C,E,O,E,S,C,E,C,C,E,E,E,CErECoO,IAAAA,EAAG,WAAA,EAAA,WAAA,SAAA,IAAA,CAyB9B,OAhBD,6DAAA;AAT+B,EAAA,SAAA,CAU/BC,KAAAA,CAAA,SAAMC,CAAY,CAAEC,CAA+B,EACjD,8BAAA;AAEA,GAAID,IAAUA,CAAAA,GAAQ,CAAA,EACpB,OAAOA,EAKP,IAAK,IAHCE,EAAU,GAAKF,EACjBlO,EAAI,EAECqO,EAAI,EAAGA,EAAID,EAAQ7J,MAAAA,CAAQ,EAAE8J,EACpCrO,GAAKoO,AAAwB,EAAxBA,EAAQE,UAAAA,CAAWD,GAG1B,OAAOrO,CAEV,EAAA,EAAA,IC1BkByO,EAAY,WAAA,EAAA,SAAA,CAAA,EAG/B,SAAYC,EAAAA,CAAa,CAAEC,CAA8B,EAAA,IAAA,EAGjC,MAFf,AAAP,CAAA,EAAO,EAAA,IAAA,CAAA,IAAA,GAAA,IAAA,AAAA,EAHTE,IAAAA,CAAI,KAAA,EAKF,EAAKX,IAAAA,CAAKQ,EAAOC,GAAK,CACxB,CAP+B,EAAA,EAAA,GAO9B,IAAA,EAAA,EAAA,SAAA,CAIA,OAJA,EAMDI,IAAAA,CAAA,WACE,OAAO,IAAI,CAACF,IAAZ,EACF,EAEA,EACAX,IAAAA,CAAA,SAAKQ,CAAa,CAAEP,CAA+B,EACjD,IAAI,CAACU,IAAAA,CAAOH,CACb,EAAA,EAEDM,KAAAA,CAAA,SAAMC,CAAY,CAAEN,CAA6B,EAC/C,OAAO,IAAIF,EAAY,IAAI,CAACI,IAAAA,CAAMF,EACnC,EAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAAA,IAfD,WACE,MAAO,UACT,CAAC,EAAA,EAAA,CAAA,EAXsCX,GCWzC,EAAe,WAAgC,IAAXmB,EAAO,EAAA,CAAA,KAAA,CAAA,IAAA,CAAA,WACV,EAAA,AAAJA,CAAI,CAAA,EAAA,CAAxBI,EAAI,AAAA,KAAA,IAAA,EAAG,UAAS,EAEvB,OAAQ,OAAOA,GACb,IAAK,SACH,GAAIA,aAAgBvB,EAClB,OAAOuB,EAET,KAEF,KAAK,WACH,OAAO,IAAId,EAAYc,EAEzB,SAGE,OAAO,IAAId,EAAY4I,AAAAA,WAAAA,EAAAA,EAAAA,GAAclI,KAAAA,CAAAA,KAAAA,EAAAA,GAAM,CAG/C,MAAM,AAAI1N,MAAsB8N,gBAAAA,EAAQ,IAC1C,EC/BA,EAAe,SAACG,CAAc,CAAEtF,CAAG,CAAMN,CAAG,EAC1C,OADiC,KAAA,IAAHM,GAAAA,CAAAA,EAAM,CAAA,EAAM,KAAA,IAAHN,GAAAA,CAAAA,EAAM,CAAA,EACtC,WACL,OAAO4F,EAAOX,IAAAA,GAAUjF,CAAAA,EAAMM,CAAAA,EAAOA,CACtC,CACH,ECNM,SAAUugG,EAAgBjhG,CAAW,EACzC,OAAO,IAAIkhG,EAAgBlhG,EAC7B,CAEA,IAAakhG,EAEX,SAAYlhG,CAAW,EAAA,IAAA,EAAA,IAAA,AAAA,CAAA,IAAA,CADf5J,CAAAA,CAAC,KAAA,EAAA,IAKF+P,CAAAA,KAAAA,CAAQ,WACb,GAAI/C,OAAOgD,SAAAA,CAAU,EAAKhQ,CAAAA,EACxB,OAAO,CAET,OAAM,AAAI2B,MAAK,yCAA0C,EAAK3B,CAA9D,CACD,EAAA,IAEMiQ,CAAAA,UAAAA,CAAa,WAClB,GAAI,EAAKjQ,CAAAA,CAAI,EACX,OAAO,CAET,OAAM,AAAI2B,MAAK,uCAAwC,EAAK3B,CAA5D,CACD,EAAA,IAAA,CAEMkQ,QAAAA,CAAW,SAACjQ,CAAS,EAC1B,GAAI,EAAKD,CAAAA,CAAIC,EACX,OAAO,CAET,OAAM,AAAI0B,MAAyC1B,mCAAAA,EAAC,SAAS,EAAKD,CAAlE,CACD,EAAA,IAAA,CAEMmQ,kBAAAA,CAAqB,SAAClQ,CAAS,EACpC,GAAI,EAAKD,CAAAA,EAAKC,EACZ,OAAO,CAET,OAAM,AAAI0B,MAC0C1B,kDAAAA,EAAC,SAAS,EAAKD,CADnE,CAGD,EAAA,IAAA,CAEMoQ,WAAAA,CAAc,SAACnQ,CAAS,EAC7B,GAAI,EAAKD,CAAAA,CAAIC,EACX,OAAO,CAET,OAAM,AAAI0B,MAA4C1B,sCAAAA,EAAC,SAAS,EAAKD,CAArE,CACD,EAtCC,IAAI,CAACA,CAAAA,CAAI4J,CACX,ECLF,EAAe,SAACgG,CAAc,CAAEtF,CAAG,CAAMN,CAAG,EAS1C,OATiC,KAAA,IAAHM,GAAAA,CAAAA,EAAM,CAAA,EAAM,KAAA,IAAHN,GAAAA,CAAAA,EAAM,CAAA,EACjC6C,KAAAA,IAAR7C,IACFA,EAAMM,AAAQuC,KAAAA,IAARvC,EAAoB,EAAIA,EAC9BA,EAAM,GAGRugG,EAAgBvgG,GAAKyF,KAArB86F,GACAA,EAAgB7gG,GAAK+F,KAArB86F,GAEO,WACL,OAAOhkG,KAAKyJ,KAAAA,CAAMV,EAAOX,IAAAA,GAAUjF,CAAAA,EAAMM,EAAM,CAAA,EAAKA,EACrD,CACH,ECbA,EAAe,SAACsF,CAAc,EAC5B,OAAO,WACL,OAAOA,EAAOX,IAAAA,IAAU,EACzB,CACH,EEJA,EAAe,SAACW,CAAc,CAAEa,CAAE,CAAMC,CAAK,EAAX,KAAA,IAAFD,GAAAA,CAAAA,EAAK,CAAA,EAAQ,KAAA,IAALC,GAAAA,CAAAA,EAAQ,CAAA,EAC9C,IAAMzG,EAAS2F,EAAO3F,MAAAA,CAAOwG,EAAIC,GACjC,OAAO,WACL,OAAO7J,KAAK8J,GAAAA,CAAI1G,IACjB,CACH,EGJA,EAAe,SAAC2F,CAAc,CAAE/B,CAAC,EAAA,KAAA,IAADA,GAAAA,CAAAA,EAAI,EAAO,EACzCg9F,EAAgBh9F,GAAGuC,WAAAA,CAAY,GAAGF,QAAAA,CAAS,GAC3C,IAAMW,EAAU,EAAMhK,KAAKrB,GAAAA,CAAI,EAAMqI,GAErC,OAAO,WACL,OAAOhH,KAAKyJ,KAAAA,CAAM,EAAIzJ,KAAKrB,GAAAA,CAAIoK,EAAOX,IAAAA,IAAU4B,EACjD,CACH,ECPMk6F,EAAoB,CACxB,EAAK,EAAK,kBAAqB,kBAAmB,mBAClD,kBAAoB,kBAAoB,kBACxC,kBAAoB,mBACrB,CAQD,EAAe,SAACn7F,CAAc,CAAEoB,CAAM,EAGpC,GAHoC,KAAA,IAANA,GAAAA,CAAAA,EAAS,CAAA,EACvC65F,EAAgB75F,GAAQf,UAAxB46F,GAEI75F,EAAS,GAAI,CACf,mBAAA;AACA,IAAMC,EAAUpK,KAAK8J,GAAAA,CAAI,CAACK,GAE1B,OAAO,WAKL,IAJA,IAAInD,EAAIoD,EACJ9I,EAAI,EACJ+I,EAAItB,EAAOX,IAAf,GAEOiC,EAAIrD,GACTqD,GAAQrD,EACRA,EAAKmD,EAASnD,EAAK,EAAE1F,EAGvB,OAAOA,CACR,CACF,CACC,oBAAA;AACA,IAAMgJ,EAAMtK,KAAKC,IAAAA,CAAKkK,GAChBpJ,EAAI,KAAQ,KAAOuJ,EACnBzQ,EAAI,MAAS,OAAUkH,EACvBwJ,EAAW,OAAS,OAAUxJ,CAAAA,EAAI,GAAA,EAClCyJ,EAAK,MAAS,OAAUzJ,CAAAA,EAAI,CAAA,EAElC,OAAO,WACL,OAAa,CACX,IAAIsJ,EAAC,KAAA,EACDjR,EAAI2P,EAAOX,IAAf,GAEA,GAAIhP,GAAK,IAAOoR,EAEd,OAAOxK,KAAKyJ,KAAAA,CACR,AAAA,CAAA,EAAI5P,EAAM,CAAA,GAAMmG,KAAKyK,GAAAA,CAFzBJ,EAAIjR,EAAIoR,EAAK,IAEgBH,EAAMtJ,CAAAA,EAAKsJ,EAAIF,EAAS,KAInD/Q,CAAAA,GAAKoR,EACPH,EAAItB,EAAOX,IAAAA,GAAS,IAGpBiC,EAAKA,AAAAA,CAAAA,AADLA,CAAAA,EAAIjR,EAAIoR,EAAK,GAAbH,EACS,EAAI,IAAO,EAAA,EAAOA,EAC3BjR,EAAI2P,EAAOX,IAAAA,GAASoC,GAGtB,IAAME,EAAK,GAAM1K,KAAKyK,GAAAA,CAAIJ,GAC1B,GAAIK,CAAAA,CAAAA,EAAK,IAAA,IAAStR,CAAAA,EAAIsR,CAAAA,GAItB,IAAMhD,EAAI1H,KAAKyJ,KAAAA,CAAQ,AAAA,CAAA,EAAI5P,EAAK6Q,EAAK3J,CAAAA,EAAKsJ,EAAIF,EAAS,MAGvD,GAFA/Q,EAAKA,EAAImR,EAAa1Q,CAAAA,EAAK6Q,CAAAA,EAAKA,CAAAA,EAAM3J,CAAAA,EAElC2G,GAAK,GAQP,CAAA,GAAI1H,KAAKrB,GAAAA,CAAIvF,EAAIkR,IANf,AAAC5C,CAAAA,EAAI,EAAA,EAAO1H,KAAKrB,GAAAA,CAAIwL,EAASzC,GAC9ByC,EA5DO,kBA8DPzC,EACC,AAAA,CAAA,EAAI,GAAQ,AAAA,CAAA,EAAI,IAAQ,EAAK,CAAA,KAASA,EAAIA,CAAAA,CAAAA,EAAOA,CAAAA,EAAIA,CAAAA,CAAAA,EAAMA,EAG5D,OAAOA,CADT,MAGK,GAAIA,GAAK,EAAG,CACjB,IADiB,EACXkD,EAAIu5F,AAAe,MAAfA,CAAAA,EAxEXD,CAAiB,CAwEOx8F,EAxEJ,AAwEIA,EAAE,EAAI,EAE7B,GAAI1H,KAAKrB,GAAAA,CAAIvF,IAAMsO,EAAI1H,KAAKrB,GAAAA,CAAIwL,GAAUA,EAASS,EACjD,OAAOlD,CAEV,EACF,CACF,CAEL,EGxFA,EAAe,SAACqB,CAAc,CAAE5P,CAAC,EAAA,KAAA,IAADA,GAAAA,CAAAA,EAAI,CAAA,EAClC6qG,EAAgB7qG,GAAG+P,KAAAA,GAAQE,UAA3B46F,GACA,IAAMl5F,EAAY/B,EAAO+B,SAAAA,CAAU3R,GAEnC,OAAO,WACL,OAAO2R,IAAc3R,CACtB,CACH,ECPA,EAAe,SAAC4P,CAAc,CAAEiC,CAAK,EAAA,KAAA,IAALA,GAAAA,CAAAA,EAAQ,CAAA,EACtCg5F,EAAgBh5F,GAAO1B,kBAAAA,CAAmB,GAC1C,IAAMiB,EAAW,EAAMS,EAEvB,OAAO,WACL,OAAO,EAAMhL,KAAKiL,GAAAA,CAAI,EAAMlC,EAAOX,IAAAA,GAAQmC,EAC5C,CACH,ECRqBY,EAAc,WAAA,EAAA,SAAA,CAAA,EAAA,SAAA,IAAA,OAAA,EAAA,KAAA,CAAA,IAAA,CAAA,YAAA,IAAA,AAAA,CAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,SAAA,CAGhC,OAHgC,EAKjC/C,IAAAA,CAAA,WACE,OAAOpI,KAAK+I,MAAZ,EACF,EAEA,EACAxB,IAAAA,CAAA,SAAKD,CAAc,CAAEE,CAA8B,EACjD,sBAAA;AACD,EAAA,EAEDa,KAAAA,CAAA,WACE,OAAO,IAAI8C,CACZ,EAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAAA,IAfD,WACE,MAAO,SACT,CAAC,EAAA,EAAA,CAAA,EAHwC9D,GCmb3C,EAAe,GAjYI,WAAA,EAAA,CAAA,WAOjB,SAAA,EAAYgE,CAAS,EAAA,IAAA,EAAA,IAAA,AAAA,CAAA,IAAA,CANXnD,IAAAA,CAAI,KAAA,EAAA,IAAA,CACJoD,MAAAA,CAAM,KAAA,EAAA,IACNC,CAAAA,MAAAA,CAEN,CAAA,EAAE,IA2FNnD,CAAAA,IAAAA,CAAO,WACL,OAAO,EAAKF,IAAAA,CAAKE,IAAjB,EACD,EAAA,IAAA,CAAA,KAAA,CAYO,SAAC3E,CAAY,CAAEN,CAAY,EACjC,OAAO,EAAKqI,OAAAA,CAAQ/H,EAAKN,IAC1B,EAAA,IAAA,CAAA,GAAA,CAYK,SAACM,CAAY,CAAEN,CAAY,EAC/B,OAAO,EAAKsI,UAAAA,CAAWhI,EAAKN,IAC7B,EAAA,IAAA,CAcDuI,OAAAA,CAAU,SAACjI,CAAY,CAAEN,CAAY,EACnC,OAAO,EAAKsI,UAAAA,CAAWhI,EAAKN,IAC7B,EAAA,IAWDwI,CAAAA,IAAAA,CAAO,WACL,OAAO,EAAKC,cAAZ,IACD,EAAA,IAAA,CAAA,OAAA,CASS,WACR,OAAO,EAAKA,cAAZ,IACD,EAAA,IAAA,CAsCDJ,OAAAA,CAAU,SAAC/H,CAAY,CAAEN,CAAY,EACnC,OAAO,EAAK0I,QAAAA,CAAiB,UAAWL,EAAS/H,EAAKN,EACvD,EAAA,IAAA,CASDsI,UAAAA,CAAa,SAAChI,CAAY,CAAEN,CAAY,EACtC,OAAO,EAAK0I,QAAAA,CAAiB,aAAcJ,EAAYhI,EAAKN,EAC7D,EAAA,IAUDyI,CAAAA,cAAAA,CAAiB,WACf,OAAO,EAAKC,QAAAA,CAAkB,iBAAkBD,EACjD,EAAA,IAAA,CAaDxI,MAAAA,CAAS,SAACwG,CAAW,CAAEC,CAAc,MXpSPD,EAAQC,EWqSpC,OXrS8B,KAAA,KAAFD,EWqSRA,IXrSQA,CAAAA,EAAK,CAAA,EAAQ,KAAA,KAALC,EWqSZA,IXrSYA,CAAAA,EAAQ,CAAA,EACvC,WACL,IAAIvI,EAAWwK,EAAWC,EAE1B,GAGEA,EAAIzK,AAFJA,CAAAA,EAAIyH,AAAgB,EAAhBA,AWgSQ,EXhSDX,IAAAA,GAAa,CAAA,EAEhB9G,EAAIwK,AADZA,CAAAA,EAAI/C,AAAgB,EAAhBA,AW+RQ,EX/RDX,IAAAA,GAAa,CAAA,EACR0D,QACT,CAACC,GAAKA,EAAI,EAAC,AAEpB,OAAOnC,EAAKC,EAAQiC,EAAI9L,KAAKC,IAAAA,CAAM,GAAKD,KAAKrB,GAAAA,CAAIoN,GAAMA,EACxD,CW2RA,EAAA,IAAA,CASDC,SAAAA,CAAY,SAACpC,CAAW,CAAEC,CAAc,EACtC,OAAOmC,EAAU,EAAMpC,EAAIC,EAC5B,EAAA,IAAA,CAYDoC,SAAAA,CAAY,SAACjF,CAAU,MT5TOA,ES6T5B,OT7T6B,KAAA,KAADA,ES6TLA,IT7TKA,CAAAA,EAAI,EAAO,EACzCg9F,EAAgBh9F,GAAGsC,kBAAAA,CAAmB,GAAGD,QAAAA,CAAS,GAE3C,WACL,OAAOrJ,KAAKyJ,KAAAA,CAAMV,ASyTD,ETzTQX,IAAAA,GAASpB,EACnC,CSyTA,EAAA,IAAA,CASDkF,QAAAA,CAAW,SAAC/S,CAAU,CAAE6N,CAAU,MRvUJ7N,EAAO6N,EQwUnC,ORxU6B,KAAA,KAAD7N,EQwUNA,IRxUMA,CAAAA,EAAI,CAAA,EAAI,KAAA,KAAD6N,EQwUVA,IRxUUA,CAAAA,EAAI,EAAN,EACnCg9F,EAAgB7qG,GAAG+P,KAAAA,GAAQE,UAA3B46F,GACAA,EAAgBh9F,GAAGsC,kBAAAA,CAAmB,GAAGD,QAAAA,CAAS,GAE3C,WAIL,IAHA,IAAI5I,EAAI,EACJa,EAAI,EAEDb,IAAMtH,GACP4P,AQ+TU,ER/THX,IAAAA,GAASpB,GAClB1F,IAGJ,OAAOA,CACR,CQ2TA,EAAA,IAAA,CAQD6K,SAAAA,CAAY,SAACnF,CAAU,EACrB,OAAOmF,EAAU,EAAMnF,EACxB,EAAA,IAAA,CAYDoF,OAAAA,CAAU,SAACjC,CAAe,EACxB,OAAOiC,EAAQ,EAAMjC,EACtB,EAAA,IAAA,CAQDkC,WAAAA,CAAc,SAAClC,CAAe,MLzWAA,EK0W5B,OL1WkC,KAAA,KAANA,EK0WHA,IL1WGA,CAAAA,EAAS,CAAA,EACvC65F,EAAgB75F,GAAQf,UAAxB46F,GAEO,WACL,MAAO,CAAChkG,KAAKrB,GAAAA,CAAI,EAAIoK,AKsWF,ELtWSX,IAAAA,IAAU+B,CACvC,CKsWA,EAAA,IAAA,CAYDW,SAAAA,CAAY,SAAC3R,CAAU,MJvXOA,EIwX5B,OJxX6B,KAAA,KAADA,EIwXLA,IJxXKA,CAAAA,EAAI,CAAA,EAClC6qG,EAAgB7qG,GAAG+P,KAAAA,GAAQI,kBAAAA,CAAmB,GAEvC,WAEL,IAAK,IADDgD,EAAM,EACD7L,EAAI,EAAGA,EAAItH,EAAG,EAAEsH,EACvB6L,GAAOvD,AIkXQ,EJlXDX,IADhB,GAIA,OAAOkE,CACR,CI+WA,EAAA,IAAA,CAQDC,KAAAA,CAAQ,SAACpT,CAAU,EACjB,OAAOoT,EAAM,EAAMpT,EACpB,EAAA,IAAA,CAQDqT,MAAAA,CAAS,SAACxB,CAAc,EACtB,OAAOwB,EAAO,EAAMxB,EACrB,EApVKK,GAAOA,aAAehE,EACxB,IAAI,CAACoF,GAAAA,CAAIpB,GAET,IAAI,CAACoB,GAAAA,CAAI,IAAItB,GAEf,IAAI,CAACI,MAAAA,CAAS,CAAA,CAChB,CAEA;;GAEG,EAFH,IAAA,EAAA,EAAA,SAEG,CAGF,OAED;;;;;;;;;GASG,EATH,EAUAlD,KAAAA,CAAA,WAAqB,IAATG,EAAS,EAAA,CAAA,KAAA,CAAA,IAAA,CAAA,sBAEN4C,EADT5C,EAAK5K,MAAAA,CACWymG,EAAc77F,KAAAA,CAAAA,KAAAA,EAAAA,GAEd,IAAI,CAAC6C,GAAAA,CAAIhD,KAA3B,GAEJ,CAEA;;;;;;;;;;;;;;;;;GAiBG,GAjBH,EAkBAoE,GAAAA,CAAA,WACE,IAAI,CAACvE,IAAAA,CAAOm8F,EAAmB,KAAA,CAAA,KAAA,EAAA,EAAA,CAAA,KAAA,CAAA,IAAA,CAAA,WACjC,CAEA;;GAEG,GAFH,EAGA33F,KAAAA,CAAA,WACE,GAAI,IAAI,CAACpB,MAAAA,CACP,MAAM,AAAIxQ,MAAM,8BAGlB,CAAA,IAAI,CAACwQ,MAAAA,CAAStL,KAAK+I,MAAnB,CACA/I,KAAK+I,MAAAA,CAAS,IAAI,CAACyC,OAAnBxL,EACF,CAEA;;GAEG,GAFH,EAGA2M,OAAAA,CAAA,WACM,IAAI,CAACrB,MAAAA,GACPtL,KAAK+I,MAAAA,CAAS,IAAI,CAACuC,MAAnBtL,CACA,OAAO,IAAI,CAACsL,MAAZ,CAEJ,CAMA;;;;;;GAMG,GAyEH;;;;;;;GAOG,EAPH,EAQAsB,MAAAA,CAAA,SAAUC,CAAe,EACvB,GAAI,CAACC,MAAMC,OAAAA,CAAQF,GACjB,MAAM,AAAI/R,MAC4C,oDAAA,OAAO+R,GAI/D,IAAMjP,EAASiP,AAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAOjP,MAAtB,QAEA,AAAIA,EAAS,EAEJiP,CAAK,CADE,IAAI,CAACpB,UAAAA,CAAW,EAAG7N,EAAS,KACvB,CAEnB,KAAA,CAEJ,CAMA;;;;;;GAMG,GAmJH,6EAAA;AACA,WAAA;AACA,6EAAA;AAEA;;;;;;;;;;;;;GAaG,EAbH,EAcAiO,QAAAA,CAAA,SAAYmB,CAAa,CAAEC,CAAoB,EAAgB,IAAXzE,EAAW,EAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,GACvD5D,EAAS4D,GAAAA,EAAK0E,IAAAA,CAAK,KACrBtL,EAAQ,IAAI,CAAC2J,MAAM,CAACyB,EAAM,CAU9B,MARIpL,CAAAA,AAAUoE,KAAAA,IAAVpE,GAAuBA,EAAMgD,GAAAA,GAAQA,CAAAA,IACvChD,EAAQ,CACNgD,IAAAA,EACAuI,aAAcF,EAAO,KAAA,CAAA,KAAA,EAAA,CAAA,IAAI,CAAA,CAAA,MAAA,CAAKzE,GAC/B,EACD,IAAI,CAAC+C,MAAM,CAACyB,EAAM,CAAGpL,GAGhBA,EAAMuL,YAAb,AACD,EAAA,EAAA,EAAA,CAAA,CAAA,IAAA,MAAA,IA1WD,WACE,OAAO,IAAI,CAACjF,IAAZ,AACF,CAAC,EAAA,EAAA,EAAA,GAAA,C,G,E,Q,C,Q,S,C,C,C,ECzEH,wDAAwD;AACxD,EAAE;AACF,SAAS;AACT,EAAE;AACF,0CAA0C;AAC1C,8CAA8C;AAC9C,+DAA+D;AAC/D,iEAAiE;AAEjE,mEAAmE;AACnE,iBAAiB;AACjB,uCAAuC;A,I,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,QAyCvC,CAAA,EAAG,IAAA,CAAO,EACV,EAAG,MAAA,CAAS,EACZ,EAAG,MAAA,CAAS,EACZ,EAAG,SAAA,CAAY,EACf,EAAG,OAAA,CAAU,EACb,EAAG,MAAA,CAAS,EAEZ,EAAA,OAAA,CAAiB,C,G,E,Q,C,Q,S,C,C,C,GChChB,AA3BD,sEAAsE;AACtE,iDAAiD;AACjD,0EAA0E;AAC1E,uCAAuC;AAEvC,4DAA4D;AAC5D,EAAE;AACF,+EAA+E;AAC/E,gFAAgF;AAChF,+EAA+E;AAC/E,4EAA4E;AAC5E,wEAAwE;AACxE,2DAA2D;AAC3D,EAAE;AACF,6EAA6E;AAC7E,sDAAsD;AACtD,EAAE;AACF,6EAA6E;AAC7E,2EAA2E;AAC3E,8EAA8E;AAC9E,yEAAyE;AACzE,gFAAgF;AAChF,4EAA4E;AAC5E,gBAAgB;AAIf,SAAS,CAAM,CAAE,CAAM,CAAE,CAAM,EAEhC,SAAS,EAAK,CAAI,EAChB,IAgDI,EAhDA,EAAK,IAAI,CAAE,GAgDX,EAAI,WAEG,SAAS,CAAI,EACtB,EAAO,OAAO,GACd,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAA,CAAQ,IAAK,CAEpC,IAAI,EAAI,mBADR,CAAA,GAAK,EAAK,UAAA,CAAW,EAArB,EAEA,EAAI,IAAM,EACV,GAAK,EACL,GAAK,EACL,EAAI,IAAM,EACV,GAAK,EACL,GAAK,AAAI,WAAJ,CACP,CACA,MAAQ,AAAA,CAAA,IAAM,CAAA,EAAK,qBAAwB,SAAQ;AACrD,EA7DA,CAAA,EAAG,IAAA,CAAO,WACR,IAAI,EAAI,QAAU,EAAG,EAAA,CAAK,AAAO,sBAAP,EAAG,CAAA,AAA4B,SAAQ;AAGjE,OAFA,EAAG,EAAA,CAAK,EAAG,EAAX,CACA,EAAG,EAAA,CAAK,EAAG,EAAX,CACO,EAAG,EAAA,CAAK,EAAK,CAAA,EAAG,CAAA,CAAI,AAAI,EAAJ,CAAI,CACjC,EAEA,2CAA2C;AAC3C,EAAG,CAAA,CAAI,EACP,EAAG,EAAA,CAAK,EAAK,KACb,EAAG,EAAA,CAAK,EAAK,KACb,EAAG,EAAA,CAAK,EAAK,KACb,EAAG,EAAA,EAAM,EAAK,GACV,EAAG,EAAA,CAAK,GAAK,CAAA,EAAG,EAAA,EAAM,CAAA,EAC1B,EAAG,EAAA,EAAM,EAAK,GACV,EAAG,EAAA,CAAK,GAAK,CAAA,EAAG,EAAA,EAAM,CAAA,EAC1B,EAAG,EAAA,EAAM,EAAK,GACV,EAAG,EAAA,CAAK,GAAK,CAAA,EAAG,EAAA,EAAM,CAAA,CAE5B,CAEA,SAAS,EAAK,CAAC,CAAE,CAAC,EAKhB,OAJA,EAAE,CAAA,CAAI,EAAE,CAAR,CACA,EAAE,EAAA,CAAK,EAAE,EAAT,CACA,EAAE,EAAA,CAAK,EAAE,EAAT,CACA,EAAE,EAAA,CAAK,EAAE,EAAT,CACO,CACT,CAEA,SAAS,EAAK,CAAI,CAAE,CAAI,EACtB,IAAI,EAAK,IAAI,EAAK,GACd,EAAQ,GAAQ,EAAK,KAAA,CACrB,EAAO,EAAG,IAFd,CAYA,OATA,EAAK,KAAA,CAAQ,WAAa,OAAO,AAAa,WAAb,EAAI,IAAA,GAAwB,CAAG,EAChE,EAAK,MAAA,CAAS,WACZ,OAAO,IAAS,AAAC,CAAA,AAAS,QAAT,IAAoB,CAAA,EAAK,qBAAwB,SAAQ;AAC5E,EACA,EAAK,KAAA,CAAQ,EACT,IACmB,UAAjB,OAAO,GAAoB,EAAK,EAAO,GAC3C,EAAK,KAAA,CAAQ,WAAa,OAAO,EAAK,EAAI,CAAC,EAAI,GAE1C,CACT,CAwBI,GAAU,EAAO,OAAA,CACnB,EAAO,OAAA,CAAU,EACR,GAAU,EAAO,GAAA,CAC1B,EAAO,WAAa,OAAO,CAAM,GAEjC,IAAI,CAAC,IAAA,CAAO,CAGd,EACE,EAC+B,EAC9B,AAAkB,YAAlB,OAAO,QAAyB,MAAS,6BAA6B;C,G,E,Q,C,Q,S,C,C,C,GC3GxE,AAHD,+DAA+D;AAC/D,gEAAgE;AAE/D,SAAS,CAAM,CAAE,CAAM,CAAE,CAAM,EAEhC,SAAS,EAAO,CAAI,EAClB,IAAI,EAAK,IAAI,CAAE,EAAU,EAEzB,CAAA,EAAG,CAAA,CAAI,EACP,EAAG,CAAA,CAAI,EACP,EAAG,CAAA,CAAI,EACP,EAAG,CAAA,CAAI,EAEP,6BAA6B;AAC7B,EAAG,IAAA,CAAO,WACR,IAAI,EAAI,EAAG,CAAA,CAAK,EAAG,CAAA,EAAK,GAIxB,OAHA,EAAG,CAAA,CAAI,EAAG,CAAV,CACA,EAAG,CAAA,CAAI,EAAG,CAAV,CACA,EAAG,CAAA,CAAI,EAAG,CAAV,CACO,EAAG,CAAA,EAAM,EAAG,CAAA,GAAM,GAAM,EAAK,IAAM,CAC5C,EAEI,IAAU,CAAA,AAAO,EAAP,CAAO,EAEnB,EAAG,CAAA,CAAI,EAGP,GAAW,EAGb,kEAAkE;AAClE,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,MAAA,CAAS,GAAI,IACvC,EAAG,CAAA,EAAK,AAAwB,EAAxB,EAAQ,UAAA,CAAW,GAC3B,EAAG,IAAH,EAEJ,CAEA,SAAS,EAAK,CAAC,CAAE,CAAC,EAKhB,OAJA,EAAE,CAAA,CAAI,EAAE,CAAR,CACA,EAAE,CAAA,CAAI,EAAE,CAAR,CACA,EAAE,CAAA,CAAI,EAAE,CAAR,CACA,EAAE,CAAA,CAAI,EAAE,CAAR,CACO,CACT,CAEA,SAAS,EAAK,CAAI,CAAE,CAAI,EACtB,IAAI,EAAK,IAAI,EAAO,GAChB,EAAQ,GAAQ,EAAK,KAAA,CACrB,EAAO,WAAa,MAAQ,AAAA,CAAA,EAAG,IAAA,KAAW,CAAA,EAAK,UAAa,EAehE,OAdA,EAAK,MAAA,CAAS,WACZ,GACE,IAAI,EAAM,EAAG,IAAA,KAAW,GACpB,EAAO,AAAA,CAAA,EAAG,IAAA,KAAW,CAAA,EAAK,WAC1B,EAAU,AAAA,CAAA,EAAM,CAAA,EAAQ,cACrB,AAAW,IAAX,EAAc,AACvB,OAAO,CACT,EACA,EAAK,KAAA,CAAQ,EAAG,IAAhB,CACA,EAAK,KAAA,CAAQ,EACT,IACmB,UAAjB,OAAO,GAAoB,EAAK,EAAO,GAC3C,EAAK,KAAA,CAAQ,WAAa,OAAO,EAAK,EAAI,CAAC,EAAI,GAE1C,CACT,CAEI,GAAU,EAAO,OAAA,CACnB,EAAO,OAAA,CAAU,EACR,GAAU,EAAO,GAAA,CAC1B,EAAO,WAAa,OAAO,CAAM,GAEjC,IAAI,CAAC,MAAA,CAAS,CAGhB,EACE,EAC+B,EAC9B,AAAkB,YAAlB,OAAO,QAAyB,MAAS,6BAA6B;C,G,E,Q,C,Q,S,C,C,C,GC1ExE,AAHD,+DAA+D;AAC/D,gEAAgE;AAE/D,SAAS,CAAM,CAAE,CAAM,CAAE,CAAM,EAEhC,SAAS,EAAO,CAAI,EAClB,IAAI,EAAK,IAAI,CAAE,EAAU,EAEzB,8BAA6B;AAC7B,EAAG,IAAA,CAAO,WACR,IAAI,EAAK,EAAG,CAAA,CAAK,EAAG,CAAA,GAAM,EAE1B,OADA,EAAG,CAAA,CAAI,EAAG,CAAV,CAAa,EAAG,CAAA,CAAI,EAAG,CAAV,CAAa,EAAG,CAAA,CAAI,EAAG,CAAV,CAAa,EAAG,CAAA,CAAI,EAAG,CAAV,CAChC,AAAC,CAAA,EAAG,CAAA,CAAK,EAAG,CAAA,CAAI,OAAS,CAAA,EAC5B,CAAA,EAAG,CAAA,CAAI,EAAI,CAAA,CAAK,EAAG,CAAA,EAAK,EAAO,CAAA,EAAK,GAAK,CAAA,CAAC,EAAM,CACtD,EAEA,EAAG,CAAA,CAAI,EACP,EAAG,CAAA,CAAI,EACP,EAAG,CAAA,CAAI,EACP,EAAG,CAAA,CAAI,EACP,EAAG,CAAA,CAAI,EAEH,IAAU,CAAA,AAAO,EAAP,CAAO,EAEnB,EAAG,CAAA,CAAI,EAGP,GAAW,EAGb,kEAAkE;AAClE,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,MAAA,CAAS,GAAI,IACvC,EAAG,CAAA,EAAK,AAAwB,EAAxB,EAAQ,UAAA,CAAW,GACvB,GAAK,EAAQ,MAAA,EACf,CAAA,EAAG,CAAA,CAAI,EAAG,CAAA,EAAK,GAAK,EAAG,CAAA,GAAM,CAAA,EAE/B,EAAG,IAAH,EAEJ,CAEA,SAAS,EAAK,CAAC,CAAE,CAAC,EAOhB,OANA,EAAE,CAAA,CAAI,EAAE,CAAR,CACA,EAAE,CAAA,CAAI,EAAE,CAAR,CACA,EAAE,CAAA,CAAI,EAAE,CAAR,CACA,EAAE,CAAA,CAAI,EAAE,CAAR,CACA,EAAE,CAAA,CAAI,EAAE,CAAR,CACA,EAAE,CAAA,CAAI,EAAE,CAAR,CACO,CACT,CAEA,SAAS,EAAK,CAAI,CAAE,CAAI,EACtB,IAAI,EAAK,IAAI,EAAO,GAChB,EAAQ,GAAQ,EAAK,KAAA,CACrB,EAAO,WAAa,MAAQ,AAAA,CAAA,EAAG,IAAA,KAAW,CAAA,EAAK,UAAa,EAehE,OAdA,EAAK,MAAA,CAAS,WACZ,GACE,IAAI,EAAM,EAAG,IAAA,KAAW,GACpB,EAAO,AAAA,CAAA,EAAG,IAAA,KAAW,CAAA,EAAK,WAC1B,EAAU,AAAA,CAAA,EAAM,CAAA,EAAQ,cACrB,AAAW,IAAX,EAAc,AACvB,OAAO,CACT,EACA,EAAK,KAAA,CAAQ,EAAG,IAAhB,CACA,EAAK,KAAA,CAAQ,EACT,IACmB,UAAjB,OAAO,GAAoB,EAAK,EAAO,GAC3C,EAAK,KAAA,CAAQ,WAAa,OAAO,EAAK,EAAI,CAAC,EAAI,GAE1C,CACT,CAEI,GAAU,EAAO,OAAA,CACnB,EAAO,OAAA,CAAU,EACR,GAAU,EAAO,GAAA,CAC1B,EAAO,WAAa,OAAO,CAAM,GAEjC,IAAI,CAAC,MAAA,CAAS,CAGhB,EACE,EAC+B,EAC9B,AAAkB,YAAlB,OAAO,QAAyB,MAAS,6BAA6B;C,G,E,Q,C,Q,S,C,C,C,GC7ExE,AALD,6DAA6D;AAC7D,yCAAyC;AACzC,8CAA8C;AAC9C,0EAA0E;AAEzE,SAAS,CAAM,CAAE,CAAM,CAAE,CAAM,EAEhC,SAAS,EAAO,CAAI,EAClB,IAAI,EAAK,IAAI,AAEb,8BAA6B;AAC7B,EAAG,IAAA,CAAO,WACR,wBAAwB;AACxB,IAAwB,EAAG,EAAvB,EAAI,EAAG,CAAA,CAAG,EAAI,EAAG,CAAA,CAQrB,OAPA,EAAI,CAAC,CAAC,EAAE,CAAE,GAAM,IAAM,EAGF,EAHU,EAAK,GAAK,GACf,CAAA,AAAzB,CAAA,EAAI,CAAC,CAAE,EAAI,EAAK,EAAE,AAAF,EAAc,IAAM,EAAhB,EACK,CAAA,AAAzB,CAAA,EAAI,CAAC,CAAE,EAAI,EAAK,EAAE,AAAF,EAAc,IAAM,CAAA,EACX,CAAA,AAAzB,CAAA,EAAI,CAAC,CAAE,EAAI,EAAK,EAAE,AAAF,EAAc,GAAK,CAAA,EACnC,EAAI,CAAC,CAAE,EAAI,EAAK,EAAE,CAAE,GAAS,GAAK,GAAK,GAAK,EAAK,GAAK,EACtD,CAAC,CAAC,EAAE,CAAG,EACP,EAAG,CAAA,CAAK,EAAI,EAAK,EACV,CACT,EA8BA,AA5BA,SAAc,CAAE,CAAE,CAAI,EACpB,IAAI,EAAM,EAAI,EAAE,CAEhB,GAAI,IAAU,CAAA,AAAO,EAAP,CAAO,EAEf,CAAC,CAAC,EAAE,CAAG,OAIX,IAAK,EAAI,EAFT,6BAA6B;AAC7B,EAAO,GAAK,EACA,EAAI,EAAK,MAAA,CAAQ,EAAE,EAC7B,CAAC,CAAC,AAAI,EAAJ,EAAM,CAAG,CAAE,CAAC,AAAI,EAAJ,EAAM,EAAI,GACnB,EAAK,UAAA,CAAW,GAAK,CAAC,CAAC,EAAK,EAAK,EAAE,EAAI,GAGhD,gDAAgD;AAChD,KAAO,EAAE,MAAA,CAAS,GAAG,EAAE,IAAA,CAAK,GAC5B,IAAK,EAAI,EAAG,EAAI,GAAK,AAAS,IAAT,CAAC,CAAC,EAAE,CAAQ,EAAE,GAMnC,iCAAiC;AACjC,IANI,AAAK,GAAL,EAAY,CAAC,CAAC,EAAE,CAAG,GAAa,CAAC,CAAC,EAAE,CAExC,EAAG,CAAA,CAAI,EACP,EAAG,CAAA,CAAI,EAGF,EAAI,IAAK,EAAI,EAAG,EAAE,EACrB,EAAG,IADL,EAGF,EAEK,EAAI,EACX,CAEA,SAAS,EAAK,CAAC,CAAE,CAAC,EAGhB,OAFA,EAAE,CAAA,CAAI,EAAE,CAAA,CAAE,KAAV,GACA,EAAE,CAAA,CAAI,EAAE,CAAR,CACO,CACT,CAEA,SAAS,EAAK,CAAI,CAAE,CAAI,EACV,MAAR,GAAc,CAAA,EAAO,CAAE,IAAI,IAA/B,EACA,IAAI,EAAK,IAAI,EAAO,GAChB,EAAQ,GAAQ,EAAK,KAAA,CACrB,EAAO,WAAa,MAAQ,AAAA,CAAA,EAAG,IAAA,KAAW,CAAA,EAAK,UAAa,EAehE,OAdA,EAAK,MAAA,CAAS,WACZ,GACE,IAAI,EAAM,EAAG,IAAA,KAAW,GACpB,EAAO,AAAA,CAAA,EAAG,IAAA,KAAW,CAAA,EAAK,WAC1B,EAAU,AAAA,CAAA,EAAM,CAAA,EAAQ,cACrB,AAAW,IAAX,EAAc,AACvB,OAAO,CACT,EACA,EAAK,KAAA,CAAQ,EAAG,IAAhB,CACA,EAAK,KAAA,CAAQ,EACT,IACE,EAAM,CAAA,EAAG,EAAK,EAAO,GACzB,EAAK,KAAA,CAAQ,WAAa,OAAO,EAAK,EAAI,CAAC,EAAI,GAE1C,CACT,CAEI,GAAU,EAAO,OAAA,CACnB,EAAO,OAAA,CAAU,EACR,GAAU,EAAO,GAAA,CAC1B,EAAO,WAAa,OAAO,CAAM,GAEjC,IAAI,CAAC,SAAA,CAAY,CAGnB,EACE,EAC+B,EAC9B,AAAkB,YAAlB,OAAO,QAAyB,MAAS,6BAA6B;C,G,E,Q,C,Q,S,C,C,C,GCrExE,AAzBD,2EAA2E;AAC3E,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,sEAAsE;AACtE,4EAA4E;AAC5E,yEAAyE;AACzE,4EAA4E;AAC5E,uCAAuC;AACvC,EAAE;AACF,SAAS;AACT,EAAE;AACF,oCAAoC;AACpC,4EAA4E;AAC5E,wEAAwE;AACxE,wEAAwE;AACxE,EAAE;AACF,qEAAqE;AACrE,mEAAmE;AACnE,kEAAkE;AAClE,wEAAwE;AACxE,EAAE;AACF,8DAA8D;AAC9D,uCAAuC;AAEtC,SAAS,CAAM,CAAE,CAAM,CAAE,CAAM,EAEhC,SAAS,EAAO,CAAI,EAClB,IAAI,EAAK,IAAI,AAEb,8BAA6B;AAC7B,EAAG,IAAA,CAAO,WACR,IACwB,EAAG,EADvB,EAAI,EAAG,CAAA,CACP,EAAI,EAAG,CAAA,CAAG,EAAI,EAAG,CAAA,CAarB,6BAA6B;AAC7B,OAbA,yBAAyB;AACzB,EAAG,CAAA,CAAI,EAAI,EAAK,WAAc,EAC9B,wBAAwB;AACxB,EAAI,CAAC,CAAE,EAAI,GAAM,IAAI,CACrB,EAAI,CAAC,CAAC,EAAK,EAAK,EAAK,IAAK,CAC1B,GAAK,GAAK,GACV,GAAK,GAAK,GACV,GAAK,IAAM,GACX,GAAK,IAAM,GACX,oCAAoC;AACpC,EAAI,CAAC,CAAC,EAAE,CAAG,EAAI,EACf,EAAG,CAAA,CAAI,EAEC,EAAK,CAAA,EAAK,IAAM,EAAA,EAAQ,EAClC,EAqDA,AAnDA,SAAc,CAAE,CAAE,CAAI,EACpB,IAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAI,EAAE,CAAE,EAAQ,IAWnC,4CAA4C;AAC5C,IAAK,AAXD,IAAU,CAAA,AAAO,EAAP,CAAO,GACnB,4DAA4D;AAC5D,EAAI,EACJ,EAAO,OAEP,+DAA+D;AAC/D,GAAc,OACd,EAAI,EACJ,EAAQ,KAAK,GAAA,CAAI,EAAO,EAAK,MAA7B,GAGG,EAAI,EAAG,EAAI,IAAK,EAAI,EAAO,EAAE,EAE5B,GAAM,CAAA,GAAK,EAAK,UAAA,CAAY,AAAA,CAAA,EAAI,EAAA,EAAM,EAAK,MAA/C,CAAA,EAEU,IAAN,GAAS,CAAA,EAAI,CAAA,EACjB,GAAK,GAAK,GACV,GAAK,IAAM,GACX,GAAK,GAAK,EACV,GAAK,IAAM,GACP,GAAK,IACP,EAAI,EAAK,WAAc,EAEvB,EAAK,GADL,CAAA,EAAK,CAAC,CAAC,AAAI,IAAJ,EAAQ,EAAK,EAAI,CAAA,EACT,EAAI,EAAI,GAW3B,IAPI,GAAK,KACP,CAAA,CAAC,CAAC,AAA6B,IAA5B,CAAA,GAAQ,EAAK,MAAA,EAAU,CAAA,EAAS,CAAG,EADxC,EAGA,wEAAwE;AACxE,uEAAuE;AACvE,uEAAuE;AACvE,EAAI,IACC,EAAI,IAAS,EAAI,EAAG,EAAE,EACzB,EAAI,CAAC,CAAE,EAAI,GAAM,IAAI,CACrB,EAAI,CAAC,CAAC,EAAK,EAAK,EAAK,IAAK,CAC1B,GAAK,GAAK,GACV,GAAK,GAAK,GACV,GAAK,IAAM,GACX,GAAK,IAAM,GACX,CAAC,CAAC,EAAE,CAAG,EAAI,CAEb,2EAA0E;AAC1E,EAAG,CAAA,CAAI,EACP,EAAG,CAAA,CAAI,EACP,EAAG,CAAA,CAAI,CACT,EAEK,EAAI,EACX,CAEA,SAAS,EAAK,CAAC,CAAE,CAAC,EAIhB,OAHA,EAAE,CAAA,CAAI,EAAE,CAAR,CACA,EAAE,CAAA,CAAI,EAAE,CAAR,CACA,EAAE,CAAA,CAAI,EAAE,CAAA,CAAE,KAAV,GACO,CACT,CAEA,SAAS,EAAK,CAAI,CAAE,CAAI,EACV,MAAR,GAAc,CAAA,EAAO,CAAE,IAAI,IAA/B,EACA,IAAI,EAAK,IAAI,EAAO,GAChB,EAAQ,GAAQ,EAAK,KAAA,CACrB,EAAO,WAAa,MAAQ,AAAA,CAAA,EAAG,IAAA,KAAW,CAAA,EAAK,UAAa,EAehE,OAdA,EAAK,MAAA,CAAS,WACZ,GACE,IAAI,EAAM,EAAG,IAAA,KAAW,GACpB,EAAO,AAAA,CAAA,EAAG,IAAA,KAAW,CAAA,EAAK,WAC1B,EAAU,AAAA,CAAA,EAAM,CAAA,EAAQ,cACrB,AAAW,IAAX,EAAc,AACvB,OAAO,CACT,EACA,EAAK,KAAA,CAAQ,EAAG,IAAhB,CACA,EAAK,KAAA,CAAQ,EACT,IACE,EAAM,CAAA,EAAG,EAAK,EAAO,GACzB,EAAK,KAAA,CAAQ,WAAa,OAAO,EAAK,EAAI,CAAC,EAAI,GAE1C,CACT,CAEI,GAAU,EAAO,OAAA,CACnB,EAAO,OAAA,CAAU,EACR,GAAU,EAAO,GAAA,CAC1B,EAAO,WAAa,OAAO,CAAM,GAEjC,IAAI,CAAC,OAAA,CAAU,CAGjB,EACE,EAC+B,EAC9B,AAAkB,YAAlB,OAAO,QAAyB,MAAS,6BAA6B;C,G,E,Q,C,Q,S,C,C,C,GC5IxE,AAJD,gEAAgE;AAChE,kCAAkC;AAClC,yDAAyD;AAExD,SAAS,CAAM,CAAE,CAAM,CAAE,CAAM,EAEhC,SAAS,EAAO,CAAI,EAClB,IAAI,EAAK,IAAI,CAAE,EAAU,EAEzB,8BAA6B;AAC7B,EAAG,IAAA,CAAO,WACR,IAAI,EAAI,EAAG,CAAA,CAAG,EAAI,EAAG,CAAA,CAAG,EAAI,EAAG,CAAA,CAAG,EAAI,EAAG,CAAzC,CAQA,OAPA,EAAI,GAAM,GAAO,IAAM,EAAK,EAC5B,EAAK,EAAI,EAAK,EACd,EAAI,GAAM,GAAO,IAAM,EAAK,EAC5B,EAAK,EAAI,EAAK,EACd,EAAG,CAAA,CAAI,EAAK,GAAK,GAAO,IAAM,GAAM,EACpC,EAAG,CAAA,CAAI,EAAI,EAAK,EAAK,EACrB,EAAG,CAAA,CAAI,GAAM,GAAO,IAAM,GAAM,EACzB,EAAG,CAAA,CAAI,EAAK,EAAK,CAC1B,EAEA;;;;;;;;;;;;;;EAcA,EAEA,EAAG,CAAA,CAAI,EACP,EAAG,CAAA,CAAI,EACP,EAAG,CAAA,CAAI,YACP,EAAG,CAAA,CAAI,WAEH,IAAS,KAAK,KAAA,CAAM,IACtB,gBAAgB;AAChB,EAAG,CAAA,CAAK,EAAO,WAAe,EAC9B,EAAG,CAAA,CAAI,AAAO,EAAP,GAGP,GAAW,EAGb,kEAAkE;AAClE,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,MAAA,CAAS,GAAI,IACvC,EAAG,CAAA,EAAK,AAAwB,EAAxB,EAAQ,UAAA,CAAW,GAC3B,EAAG,IAAH,EAEJ,CAEA,SAAS,EAAK,CAAC,CAAE,CAAC,EAKhB,OAJA,EAAE,CAAA,CAAI,EAAE,CAAR,CACA,EAAE,CAAA,CAAI,EAAE,CAAR,CACA,EAAE,CAAA,CAAI,EAAE,CAAR,CACA,EAAE,CAAA,CAAI,EAAE,CAAR,CACO,CACT,CAEA,SAAS,EAAK,CAAI,CAAE,CAAI,EACtB,IAAI,EAAK,IAAI,EAAO,GAChB,EAAQ,GAAQ,EAAK,KAAA,CACrB,EAAO,WAAa,MAAQ,AAAA,CAAA,EAAG,IAAA,KAAW,CAAA,EAAK,UAAa,EAehE,OAdA,EAAK,MAAA,CAAS,WACZ,GACE,IAAI,EAAM,EAAG,IAAA,KAAW,GACpB,EAAO,AAAA,CAAA,EAAG,IAAA,KAAW,CAAA,EAAK,WAC1B,EAAU,AAAA,CAAA,EAAM,CAAA,EAAQ,cACrB,AAAW,IAAX,EAAc,AACvB,OAAO,CACT,EACA,EAAK,KAAA,CAAQ,EAAG,IAAhB,CACA,EAAK,KAAA,CAAQ,EACT,IACmB,UAAjB,OAAO,GAAoB,EAAK,EAAO,GAC3C,EAAK,KAAA,CAAQ,WAAa,OAAO,EAAK,EAAI,CAAC,EAAI,GAE1C,CACT,CAEI,GAAU,EAAO,OAAA,CACnB,EAAO,OAAA,CAAU,EACR,GAAU,EAAO,GAAA,CAC1B,EAAO,WAAa,OAAO,CAAM,GAEjC,IAAI,CAAC,MAAA,CAAS,CAGhB,EACE,EAC+B,EAC9B,AAAkB,YAAlB,OAAO,QAAyB,MAAS,6BAA6B;C,G,E,Q,C,Q,S,C,C,C,GC3ExE,AAxBD;;;;;;;;;;;;;;;;;;;;;;AAsBA,EAEC,SAAU,CAAM,CAAE,CAAI,CAAE,CAAI,EAC7B,EAAE;AACF,0DAA0D;AAC1D,EAAE;AAEF,IAQI,EALA,EAAU,SACV,EAAa,EAAK,GAAA,CAJV,IACC,GAIT,EAAe,EAAK,GAAA,CAAI,EAHf,IAIT,EAAW,AAAe,EAAf,CAES,qDAAoD;AAE5E,EAAE;AACF,eAAe;AACf,mDAAmD;AACnD,EAAE;AACF,SAAS,EAAW,CAAI,CAAE,CAAO,CAAE,CAAQ,EACzC,IAAI,EAAM,EAAE,CAIR,EAAY,EAAO,AA+GzB,EAAE;AACF,YAAY;AACZ,uDAAuD;AACvD,EAAE;AACF,SAAS,EAAQ,CAAG,CAAE,CAAK,EACzB,IAAqC,EAAjC,EAAS,EAAE,CAAE,EAAO,OAAO,EAC/B,GAAI,GAAS,AAAO,UAAP,EACX,IAAK,KAAQ,EACX,GAAI,CAAE,EAAO,IAAA,CAAK,EAAQ,CAAG,CAAC,EAAK,CAAE,EAAQ,GAAK,CAAE,MAAO,EAAG,CAAC,CAGnE,OAAQ,EAAO,MAAA,CAAS,EAAS,AAAO,UAAP,EAAkB,EAAM,EAAM,MACjE,EA1HI,AAJF,CAAA,EAAW,AAAW,CAAA,GAAX,EAAmB,CAAE,QAAS,CAAA,CAAK,EAAK,GAAW,CAAC,CAAA,EAIrD,OAAA,CAAU,CAAC,EAAM,EAAS,GAAM,CACvC,AAAQ,MAAR,EAAgB,AAyIrB,EAAE;AACF,aAAa;AACb,yEAAyE;AACzE,uBAAuB;AACvB,EAAE;AACF,WACE,GAAI,CACF,IAAI,EAQJ,OAPI,GAAe,CAAA,EAAM,EAAW,WAAU,AAAV,EAElC,EAAM,EAxKA,MA0KN,EAAM,IAAI,WA1KJ,KA2KL,AAAA,CAAA,EAAO,MAAA,EAAU,EAAO,QAAO,AAAP,EAAU,eAAA,CAAgB,IAE9C,EAAS,EAClB,CAAE,MAAO,EAAG,CACV,IAAI,EAAU,EAAO,SAAA,CACjB,EAAU,GAAW,EAAQ,OADjC,CAEA,MAAO,CAAC,CAAC,IAAI,KAAM,EAAQ,EAAS,EAAO,MAAP,CAAe,EAAS,GAAM,AACpE,CACF,IA9JkC,EAAM,GAAI,GAGtC,EAAO,IAAI,EAAK,GAIhB,EAAO,WAIT,IAHA,IAAI,EAAI,EAAK,CAAA,CA5BJ,GA6BL,EAAI,EACJ,EAAI,EACD,EAAI,GACT,EAAK,AAAA,CAAA,EAAI,CAAA,EAjCH,IAkCN,GAlCM,IAmCN,EAAI,EAAK,CAAA,CAAE,GAEb,KAAO,GAAK,GACV,GAAK,EACL,GAAK,EACL,KAAO,EAET,MAAQ,AAAA,CAAA,EAAI,CAAA,EAAK,CAAmB,kCAAiC;AACvE,EASA,2EAA2E;AAC3E,OARA,EAAK,KAAA,CAAQ,WAAa,OAAO,AAAY,EAAZ,EAAK,CAAA,CAAE,EAAQ,EAChD,EAAK,KAAA,CAAQ,WAAa,OAAO,EAAK,CAAA,CAAE,GAAK,UAAa,EAC1D,EAAK,MAAA,CAAS,EAEd,+CAA+C;AAC/C,EAAO,EAAS,EAAK,CAAA,EAAI,GAGlB,AAAC,CAAA,EAAQ,IAAA,EAAQ,GACpB,SAAS,CAAI,CAAE,CAAI,CAAE,CAAY,CAAE,CAAK,SAQtC,4DAA4D;AAC5D,uEAAuE;AACvE,CATI,IAEE,EAAM,CAAA,EAAK,EAAK,EAAO,GAC3B,iEAAiE;AACjE,EAAK,KAAA,CAAQ,WAAa,OAAO,EAAK,EAAM,CAAC,EAAI,GAK/C,IAAgB,CAAI,CAAC,EAAQ,CAAG,EAAa,GAIrC,EACd,CAAA,EACJ,EACA,EACA,WAAY,EAAU,EAAQ,MAAA,CAAU,IAAI,EAAI,EAChD,EAAQ,KAJJ,CAKN,CAEA,EAAE;AACF,OAAO;AACP,EAAE;AACF,sEAAsE;AACtE,wEAAwE;AACxE,EAAE;AACF,uEAAuE;AACvE,sEAAsE;AACtE,iDAAiD;AACjD,EAAE;AACF,SAAS,EAAK,CAAG,EACf,IAAI,EAAG,EAAS,EAAI,MAAA,CAChB,EAAK,IAAI,CAAE,EAAI,EAAG,EAAI,EAAG,CAAA,CAAI,EAAG,CAAA,CAAI,EAAG,EAAI,EAAG,CAAA,CAAI,EAAE,CAKxD,wDAAwD;AACxD,IAHK,GAAU,CAAA,EAAM,CAAC,IAAS,AAAA,EAGxB,EA9FG,KA+FR,CAAC,CAAC,EAAE,CAAG,IAET,IAAK,EAAI,EAAG,EAjGF,IAiGa,IACrB,CAAC,CAAC,EAAE,CAAG,CAAC,CAAC,EAAI,AA3FN,IA2Fc,EAAI,CAAG,CAAC,EAAI,EAAO,CAAI,CAAA,EAAI,CAAC,CAAC,EAAC,AAAD,EAAK,CACvD,CAAC,CAAC,EAAE,CAAG,EAIR,AADD,iEAAiE;AAChE,CAAA,EAAG,CAAA,CAAI,SAAS,CAAK,EAIpB,IAHA,wEAAwE;AACxE,IAAI,EAAG,EAAI,EACP,EAAI,EAAG,CAAA,CAAG,EAAI,EAAG,CAAA,CAAG,EAAI,EAAG,CAD/B,CAEO,KACL,EAAI,CAAC,CAAC,EAAI,AArGL,IAqGa,EAAI,EAAG,CACzB,EAAI,AA7GE,IA6GF,EAAY,CAAC,CAAC,AAtGb,IAsGsB,AAAA,CAAA,CAAC,CAAC,EAAE,CAAG,CAAC,CAAC,EAAI,AAtGnC,IAsG2C,EAAI,EAAG,AAAH,EAAQ,CAAA,CAAC,CAAC,EAAE,CAAG,CAAA,EAAI,CAGzE,OADA,EAAG,CAAA,CAAI,EAAG,EAAG,CAAA,CAAI,EACV,CACP,sEAAqE;AACrE,sEAAsE;AACtE,2DAA2D;AAC7D,CAAA,EApHU,IAqHZ,CAEA,EAAE;AACF,SAAS;AACT,2DAA2D;AAC3D,EAAE;AACF,SAAS,EAAK,CAAC,CAAE,CAAC,EAIhB,OAHA,EAAE,CAAA,CAAI,EAAE,CAAR,CACA,EAAE,CAAA,CAAI,EAAE,CAAR,CACA,EAAE,CAAA,CAAI,EAAE,CAAA,CAAE,KAAV,GACO,CACT,CAgBA,EAAE;AACF,WAAW;AACX,mEAAmE;AACnE,wEAAwE;AACxE,EAAE;AACF,SAAS,EAAO,CAAI,CAAE,CAAG,EAEvB,IADA,IAA4B,EAAxB,EAAa,EAAO,GAAW,EAAI,EAChC,EAAI,EAAW,MAAA,EACpB,CAAG,CAAC,AAjJG,IAiJI,EAAE,CACX,AAlJK,IAkJI,AAAA,CAAA,GAAS,AAAgB,GAAhB,CAAG,CAAC,AAlJjB,IAkJwB,EAAE,AAAG,EAAM,EAAW,UAAA,CAAW,KAElE,OAAO,EAAS,EAClB,CAyBA,EAAE;AACF,aAAa;AACb,6CAA6C;AAC7C,EAAE;AACF,SAAS,EAAS,CAAC,EACjB,OAAO,OAAO,YAAA,CAAa,KAAA,CAAM,EAAG,EACtC,CAWA,EAAE;AACF,sEAAsE;AACtE,qBAAqB;AACrB,EAAE;AACF,GAbA,EAAE;AACF,8DAA8D;AAC9D,8DAA8D;AAC9D,6DAA6D;AAC7D,8DAA8D;AAC9D,kBAAkB;AAClB,EAAE;AACF,EAAO,EAAK,MAAA,GAAU,GAMa,EAAA,OAAA,CAAgB,CACjD,EAAA,OAAA,CAAiB,CACjB,8DAA6D;AAC7D,GAAI,CACF,EAAA,EAAA,QACF,CAAE,MAAO,EAAI,CAAC,CAChB,KAAW,AAAmB,YAAnB,OAAQ,QAAyB,OAAO,GAAA,CACjD,OAAO,WAAa,OAAO,CAAY,GAGvC,CAAI,CAAC,OAAS,EAAQ,CAAG,CAI3B,iDAAgD;AAChD,EAEE,kDAAkD;AACjC,aAAhB,OAAO,KAAwB,KAAO,EAAA,OAAA,CACvC,EAAE,CACF,IAAQ,uDAAuD;C,G,E,Q,C,Q,S,C,C,C,E,G,E,Q,C,Q,S,C,C,C,EEzP1D,SAAS,EAAgB,CAAwB,EACtD,IAAM,EAAY,CAAC,EAMnB,OALA,OAAO,IAAA,CAAK,GACT,IAAA,GACA,OAAA,CAAQ,AAAC,IACR,CAAS,CAAC,EAAI,CAAG,CAAK,CAAC,EAAI,AAC7B,GACK,KAAK,SAAA,CAAU,EACxB,CAEO,SAAS,EAAmB,CAA8B,EAE/D,oDAAoD;AACpD,IAAM,EAAgB,OAAO,OAAA,CAAQ,GAErC,uDAAuD;AACvD,OAAO,EAAc,IAAA,CAAK,CAAC,EAAG,IAAM,CAAC,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,EAAE,GAAA,CAAI,CAAC,CAAC,EAAK,EAAM,GACzD,CAAA,CAAE,IAAA,EAAK,MAAA,CAAK,CAAA,EAEvB,C,E,E,O,C,kB,I,G,E,E,O,C,qB,I,E,G,E,Q,C,Q,S,C,C,C,E,E,E,O,C,U,I,ECrBA,WAAU;AACV,yHAAyH;AAEzH,qEAAqE;AAErE,uEAAuE;AACvE,iCAAiC;AACjC,MAAM;AAEN,mBAAmB;AAEZ,IAAM,EAAuC,CAClD,OAAQ,CACN,YACJ,aACA,YACA,aACA,WACA,YACA,WACA,aACA,aACA,aACA,YACA,aACA,YACA,YACA,cACA,WACA,cACA,WACA,WACA,aACA,WACA,cACA,YACA,WACA,WACA,aACA,WACA,YACA,aACA,aACA,UACA,WACA,YACA,YACA,aACA,aACA,WACA,aACA,YACA,aACA,aAAgB,CACd,yHAAyH;AACzH,YAAa,CACX,KAAM,KAAM,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,EAAK,KACrE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,KAAM,KAAM,KAAM,KAAM,IAAK,KACtE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,KAAM,KAAM,KAAM,KACvE,KAAM,KACP,CACD,wHAAwH;AACxH,GAAI,CACF,aACJ,aACA,aACA,aACA,aACA,aACA,aACA,aACA,YACA,aACA,YACA,aACA,aACA,cACA,WACA,aACA,aACA,aACA,YACA,YACA,aACA,aACA,aACA,YACA,YACA,aACA,WACA,aACA,aACA,aACA,WACA,aACA,WACA,aACA,WACA,aACA,aACA,aACA,WACA,aACA,aAAgB,CACd,wHAAwH;AACxH,QAAS,CACP,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAClE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,KAAM,KACvE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAClE,KAAM,KAAM,KAAM,KACnB,CACD,8BAA8B;AAC9B,wHAAwH;AACxH,GAAI,CACF,WACJ,YACA,aACA,YACA,aACA,WACA,WACA,aACA,aACA,aACA,aACA,aACA,aACA,YACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,YACA,YACA,aACA,aACA,WACA,aACA,aACA,WACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,YACA,aACA,aAAgB,CACd,QAAQ;AACR,QAAS,CACP,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC9C,CACD,uHAAuH;AACvH,IAAK,CACH,aACJ,WACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,YACA,aACA,aACA,aACA,aACA,WACA,aACA,aACA,aA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,E,E,O,C,I,I,G,E,E,O,C,K,I,G,E,E,O,C,K,I,G,E,E,O,C,K,I,G,E,E,O,C,I,I,G,E,E,O,C,I,I,G,E,E,O,C,I,I,G,E,E,O,C,K,I,G,E,E,O,C,I,I,G,E,E,O,C,K,I,G,E,E,O,C,K,I,G,E,E,O,C,I,I,G,E,E,O,C,I,I,G,E,E,O,C,K,I,G,E,E,O,C,K,I,G,E,E,O,C,I,I,G,E,E,O,C,I,I,G,E,E,O,C,K,I,G,E,E,O,C,I,I,G,E,E,O,C,K,I,G,E,E,O,C,K,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,K,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,K,I,I,E,E,O,C,I,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,I,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,I,I,I,E,E,O,C,K,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,K,I,I,E,E,O,C,K,Ic2FN;;;;;;;CAQO,EAAA,SAAS+1G,EAId3rE,CAA0B,CAC1B1c,CAAkB,CAClB4vD,CAA8B,CAC9B/5B,CAAuC,EAEvC,IAAMx1B,EAA4B,CAChCW,WAAY,CAAA,EACZqyB,OAAQ3W,EACRmzC,SAAU7vD,EACV8vD,UAAWF,EACXh3C,OAAQ,IAAImb,IACZ1C,aAAcA,GAAa3U,EAAOmZ,GAClC5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ACD8nE,QAAAA,IACSD,QAAQC,OAAAA,CAAQn0C,GAGzB;;KAEC,EACDnrC,IAAAA,CAAI2L,EAAQ6L,EAAMrP,KAChBgjC,CAAK,CAAC3zB,EAAK,CAAGrP,EACd,OAAOwD,CAAM,CAAC6L,EAAK,CACZ,CAAA,EAEX,EACF,G,E,E,O,C,K,I,I,E,E,O,C,I,I,I,E,E,O,C,K,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,K,I,I,E,E,O,C,I,I,I,E,E,O,C,I,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,I,E,E,O,C,K,I,G;;;;;C,E,I,E,E,QdlMA;;C,E;;CAUO,EAAA,SAAS4nG,IACd,QAAA,EAAA,CAGF;;CAEC,EACM,IAAMxH,GACP72G,EAAK,EACF,IAAMA,IAGf;;;;CAIC,EACM,SAASqsG,EAAcjlG,CAAc,EAC1C,OAAOA,MAAAA,CACT,CAEA;;;;CAIC,EACM,SAASmL,EAAqBnL,CAAc,EACjD,GAAIkL,MAAMC,OAAAA,EAAWD,MAAMC,OAAAA,CAAQnL,GACjC,MAAO,CAAA,EAET,IAAM0S,EAAOhb,OAAOkN,SAAAA,CAAUtE,QAAAA,CAAStH,IAAAA,CAAKgH,SACxC0S,AAAqB,YAArBA,EAAKjT,KAAAA,CAAM,EAAG,IAAoBiT,AAAmB,WAAnBA,EAAKjT,KAAAA,CAAM,GAInD,CAEA;;;;CAIC,EACM,SAASwjG,EAASjjG,CAAc,EACrC,OAAOA,AAAU,OAAVA,GAAkBtI,AAA0C,oBAA1CA,OAAOkN,SAAAA,CAAUtE,QAAAA,CAAStH,IAAAA,CAAKgH,EAC1D,CAEA;;;CAIA,EAAA,SAASg6G,EAAeh6G,CAAc,EACpC,MAAQ,AAAA,CAAA,AAAiB,UAAjB,OAAOA,GAAsBA,aAAiBuE,MAAAA,GAAW2/D,SAAS,CAAClkE,EAC7E,CAKA;;;;CAIC,EACM,SAAS+rG,EAAgB/rG,CAAc,CAAEu4E,CAAoB,EAClE,OAAOyhC,EAAeh6G,GAASA,EAAQu4E,CACzC,CAEA;;;;CAIC,EACM,SAASisB,EAAkBxkG,CAAoB,CAAEu4E,CAAe,EACrE,OAAO,AAAiB,KAAA,IAAVv4E,EAAwBu4E,EAAev4E,CACvD,CAEaomG,IAAAA,EAAe,CAACpmG,EAAwBw4E,IACnD,AAAiB,UAAjB,OAAOx4E,GAAsBA,EAAMy4E,QAAAA,CAAS,KAC1C5kE,WAAW7T,GAAS,IAClB,CAACA,EAAQw4E,EAEF6tB,EAAc,CAACrmG,EAAwBw4E,IAClD,AAAiB,UAAjB,OAAOx4E,GAAsBA,EAAMy4E,QAAAA,CAAS,KAC1C5kE,WAAW7T,GAAS,IAAMw4E,EACxB,CAACx4E,CAEP;;;;;;CAOO,EAAA,SAAS+O,EACdkH,CAAiB,CACjBrP,CAAe,CACf8xE,CAAY,EAEZ,GAAIziE,GAAM,AAAmB,YAAnB,OAAOA,EAAGjd,IAAAA,CAClB,OAAOid,EAAGhP,KAAAA,CAAMyxE,EAAS9xE,EAE7B,CAuBO,SAASiiG,EACdlwB,CAAiC,CACjC1iE,CAAoC,CACpCyiE,CAAY,CACZ38D,CAAiB,EAEjB,IAAIld,EAAW6mC,EAAat0B,EAC5B,GAAIjG,EAAQwtE,IAEV,GADAjzC,EAAMizC,EAAS38E,MAAf0pC,CACI3pB,EACF,IAAKld,EAAI6mC,EAAM,EAAG7mC,GAAK,EAAGA,IACxBoX,EAAGjd,IAAAA,CAAK0/E,EAASC,CAAQ,CAAC95E,EAAE,CAAEA,QAGhC,IAAKA,EAAI,EAAGA,EAAI6mC,EAAK7mC,IACnBoX,EAAGjd,IAAAA,CAAK0/E,EAASC,CAAQ,CAAC95E,EAAE,CAAEA,QAG7B,GAAIokG,EAAStqB,GAGlB,IAAK95E,EAAI,EADT6mC,EAAMt0B,AADNA,CAAAA,EAAO1Z,OAAO0Z,IAAAA,CAAKunE,EAAnBvnE,EACWpV,MAAX0pC,CACY7mC,EAAI6mC,EAAK7mC,IACnBoX,EAAGjd,IAAAA,CAAK0/E,EAASC,CAAQ,CAACvnE,CAAI,CAACvS,EAAE,CAAC,CAAEuS,CAAI,CAACvS,EAAE,CAGjD,CAEA;;;;;CAKC,EACM,SAASkxG,EAAe/pE,CAAqB,CAAEiO,CAAqB,EACzE,IAAIp1C,EAAWsd,EAAckf,EAAqBC,EAElD,GAAI,CAAC0K,GAAM,CAACiO,GAAMjO,EAAGhqC,MAAAA,GAAWi4C,EAAGj4C,MAAAA,CACjC,MAAO,CAAA,EAGT,IAAK6C,EAAI,EAAGsd,EAAO6pB,EAAGhqC,MAAAA,CAAQ6C,EAAIsd,EAAM,EAAEtd,EAIxC,GAHAw8B,EAAK2K,CAAE,CAACnnC,EAAE,CACVy8B,EAAK2Y,CAAE,CAACp1C,EAAE,CAENw8B,EAAG3e,YAAAA,GAAiB4e,EAAG5e,YAAAA,EAAgB2e,EAAG/e,KAAAA,GAAUgf,EAAGhf,KAAAA,CACzD,MAAO,CAAA,EAIX,MAAO,CAAA,CACT,CAEA;;;CAGC,EACM,SAAS7V,EAAS6iC,CAAS,EAChC,GAAIn+B,EAAQm+B,GACV,OAAOA,EAAO9sC,GAAAA,CAAIiK,GAGpB,GAAIw8F,EAAS35D,GAAS,CACpB,IAAM9lC,EAAS9L,OAAOsN,MAAAA,CAAO,MACvBoM,EAAO1Z,OAAO0Z,IAAAA,CAAKk4B,GACnBuvC,EAAOznE,EAAKpV,MAAlB,CACI8J,EAAI,EAER,KAAOA,EAAI+yE,EAAM,EAAE/yE,EACjBtC,CAAM,CAAC4N,CAAI,CAACtL,EAAE,CAAC,CAAGW,EAAM6iC,CAAM,CAACl4B,CAAI,CAACtL,EAAE,CAAC,EAGzC,OAAOtC,CACR,CAED,OAAO8lC,CACT,CAEA,SAAS2wE,EAAWj3G,CAAW,EAC7B,OAAO,AAA2D,KAA3D,CAAC,YAAa,YAAa,cAAc,CAACiwB,OAAAA,CAAQjwB,EAC3D,CAEA;;;;CAKO,EAAA,SAASk3G,EAAQl3G,CAAW,CAAEQ,CAAiB,CAAE8lC,CAAiB,CAAE3qC,CAAkB,EAC3F,GAAI,CAACs7G,EAAWj3G,GACd,OAGF,IAAMg2E,EAAOx1E,CAAM,CAACR,EAAI,CAClBi2E,EAAO3vC,CAAM,CAACtmC,EAAI,AAEpBigG,CAAAA,EAASjqB,IAASiqB,EAAShqB,GAE7B2zB,EAAM5zB,EAAMC,EAAMt6E,GAElB6E,CAAM,CAACR,EAAI,CAAGyD,EAAMwyE,EAExB,CA0BO,SAAS2zB,EAASppG,CAAS,CAAE8lC,CAAmB,CAAE3qC,CAAsB,MAUzEu6E,EATJ,IAAMpX,EAAU32D,EAAQm+B,GAAUA,EAAS,CAACA,EAAO,CAC7CntB,EAAO2lD,EAAQ9lE,MAArB,CAEA,GAAI,CAACinG,EAASz/F,GACZ,OAAOA,EAGT7E,EAAUA,GAAW,CAAA,EACrB,IAAMw6E,EAASx6E,EAAQw6E,MAAAA,EAAU+gC,EAGjC,IAAK,IAAIr7G,EAAI,EAAGA,EAAIsd,EAAM,EAAEtd,EAAG,CAE7B,GAAI,CAACokG,EADL/pB,EAAUpX,CAAO,CAACjjE,EAAE,EAElB,SAGF,IAAMuS,EAAO1Z,OAAO0Z,IAAAA,CAAK8nE,GACzB,IAAK,IAAIpzE,EAAI,EAAG+yE,EAAOznE,EAAKpV,MAAAA,CAAQ8J,EAAI+yE,EAAM,EAAE/yE,EAC9CqzE,EAAO/nE,CAAI,CAACtL,EAAE,CAAEtC,EAAQ01E,EAASv6E,EAErC,CAEA,OAAO6E,CACT,CAgBO,SAASuqG,EAAWvqG,CAAS,CAAE8lC,CAAmB,E,mE;AAEvD,OAAOsjE,EAASppG,EAAQ8lC,EAAQ,CAAC6vC,OAAQghC,CAAS,EACpD,CAEA;;;CAIO,EAAA,SAASA,EAAUn3G,CAAW,CAAEQ,CAAiB,CAAE8lC,CAAiB,EACzE,GAAI,CAAC2wE,EAAWj3G,GACd,OAGF,IAAMg2E,EAAOx1E,CAAM,CAACR,EAAI,CAClBi2E,EAAO3vC,CAAM,CAACtmC,EAAI,AAEpBigG,CAAAA,EAASjqB,IAASiqB,EAAShqB,GAC7B80B,EAAQ/0B,EAAMC,GACJvhF,OAAOkN,SAAAA,CAAUy0E,cAAAA,CAAergF,IAAAA,CAAKwK,EAAQR,IACvDQ,CAAAA,CAAM,CAACR,EAAI,CAAGyD,EAAMwyE,EADf,CAGT,CAYA,kCAAA;AACA,IAAMohC,EAAe,C,8E;AAEnB,GAAI7iH,AAAAA,GAAKA,E,oB;AAETkI,EAAGyF,AAAAA,GAAKA,EAAEzF,CAAVA,CACAwK,EAAG/E,AAAAA,GAAKA,EAAE+E,CAAVA,AACF,EAoCO,SAASy6F,EAAiBx1F,CAAc,CAAEnM,CAAW,EAC1D,IAAMw4C,EAAW6+D,CAAY,CAACr3G,EAAI,EAAKq3G,CAAAA,CAAY,CAACr3G,EAAI,CAAGu3G,AAhB7D,SAAyBv3G,CAAW,EAClC,IAAMoO,EAAOkpG,AApBf;;CAEC,EACM,SAAmBt3G,CAAW,EACnC,IAAMwyC,EAAQxyC,EAAI2R,KAAAA,CAAM,KAClBvD,EAAiB,EAAE,CACrBqoE,EAAM,GACV,IAAK,IAAMC,KAAQlkC,EAEbikC,AADJA,CAAAA,GAAOC,CAAPD,EACQhB,QAAAA,CAAS,MACfgB,EAAMA,EAAIh6E,KAAAA,CAAM,EAAG,IAAM,KAEzB2R,EAAKtS,IAAAA,CAAK26E,GACVA,EAAM,IAGV,OAAOroE,CACT,EAGyBpO,GACvB,OAAOmM,AAAAA,IACL,IAAK,IAAMrJ,KAAKsL,EAAM,CACpB,GAAItL,AAAM,KAANA,EAGF,MAEFqJ,EAAMA,GAAOA,CAAG,CAACrJ,EAAE,AACrB,CACA,OAAOqJ,CACT,CACF,EAG6EnM,EAAAA,EAC3E,OAAOw4C,EAASrsC,EAClB,CAEA;;CAEC,EACM,SAAS49F,EAAYjrG,CAAW,EACrC,OAAOA,EAAI6Z,MAAAA,CAAO,GAAGg+D,WAAAA,GAAgB73E,EAAIrC,KAAAA,CAAM,EACjD,CAGamlG,IAAAA,EAAU,AAAC5kG,GAAmB,AAAiB,KAAA,IAAVA,EAErC0uG,EAAa,AAAC1uG,GAAqD,AAAiB,YAAjB,OAAOA,EAG1E6vG,EAAY,CAAI53G,EAAWkH,KACtC,GAAIlH,EAAEoc,IAAAA,GAASlV,EAAEkV,IAAAA,CACf,MAAO,CAAA,EAGT,IAAK,IAAMoC,KAAQxe,EACjB,GAAI,CAACkH,EAAEsY,GAAAA,CAAIhB,GACT,MAAO,CAAA,EAIX,MAAO,CAAA,CACT,CAEA;;;CAGC,EACM,SAASu5F,EAAc14G,CAAa,EACzC,MAAOA,AAAW,YAAXA,EAAEob,IAAAA,EAAsBpb,AAAW,UAAXA,EAAEob,IAAAA,EAAoBpb,AAAW,gBAAXA,EAAEob,IAAAA,AACzD,CC5ZA;;;CAGC,EAEM,IAAMq0C,EAAK3oD,KAAK2oD,EAFtB,CAGYi/C,EAAM,EAAIj/C,EACVyzD,EAAQxU,EAAMj/C,EACd0zD,EAAWl2G,OAAOkgB,iBAAlBg2F,CACAC,EAAc3zD,EAAK,IACnBm/C,EAAUn/C,EAAK,EACf4zD,EAAa5zD,EAAK,EAClB6zD,EAAgB7zD,AAAK,EAALA,EAAS,EAEzBkzB,EAAQ77E,KAAK67E,KAAbA,CACAC,EAAO97E,KAAK87E,IAAZA,CAEN,SAASw9B,EAAah4G,CAAS,CAAEwK,CAAS,CAAEiwE,CAAe,EAChE,OAAO/7E,KAAKyK,GAAAA,CAAInJ,EAAIwK,GAAKiwE,CAC3B,CAEA;;CAEC,EACM,SAASq9B,EAAQpzF,CAAa,EACnC,IAAMg2D,EAAeh8E,KAAK0B,KAAAA,CAAMskB,GAChCA,EAAQszF,EAAatzF,EAAOg2D,EAAch2D,EAAQ,KAAQg2D,EAAeh2D,EACzE,IAAMi2D,EAAYj8E,KAAKiL,GAAAA,CAAI,GAAIjL,KAAKyJ,KAAAA,CAAMoyE,EAAM71D,KAC1Ck2D,EAAWl2D,EAAQi2D,EAEzB,MAAOE,AADcD,CAAAA,GAAY,EAAI,EAAIA,GAAY,EAAI,EAAIA,GAAY,EAAI,EAAI,EAAjF,EACsBD,CACxB,CAEA;;;CAGC,EACM,SAAS2wB,EAAWhrG,CAAa,MAGlCnB,EAFJ,IAAMqP,EAAmB,EAAE,CACrB7P,EAAOD,KAAKC,IAAAA,CAAK2B,GAGvB,IAAKnB,EAAI,EAAGA,EAAIR,EAAMQ,IAChBmB,EAAQnB,GAAM,IAChBqP,EAAOpP,IAAAA,CAAKD,GACZqP,EAAOpP,IAAAA,CAAKkB,EAAQnB,IAQxB,OALIR,IAAUA,CAAAA,AAAO,EAAPA,CAAO,GACnB6P,EAAOpP,IAAAA,CAAKT,GAGd6P,EAAOhP,IAAAA,CAAK,CAACjH,EAAGkH,IAAMlH,EAAIkH,GAAG6X,GAA7B9I,GACOA,CACT,CAEO,SAASu4F,EAASlvG,CAAU,EACjC,MAAO,CAACg4B,MAAM1b,WAAWtc,KAAiB2sE,SAAS3sE,EACrD,CAEO,SAASkgH,EAAY/3G,CAAS,CAAEy6E,CAAe,EACpD,IAAMK,EAAUp8E,KAAK0B,KAAAA,CAAMJ,GAC3B,OAAO,EAAYy6E,GAAYz6E,GAAQ86E,EAAUL,GAAYz6E,CAC/D,CAEA;;CAGO,EAAA,SAASo4G,EACd7sG,CAA+B,CAC/BzH,CAAoC,CACpC4xC,CAAgB,EAEhB,IAAIv2C,EAAWsd,EAAcnc,EAE7B,IAAKnB,EAAI,EAAGsd,EAAOlR,EAAMjP,MAAAA,CAAQ6C,EAAIsd,EAAMtd,IAEpC0wB,MADLvvB,EAAQiL,CAAK,CAACpM,EAAE,CAACu2C,EAAS,IAExB5xC,EAAO3B,GAAAA,CAAMzD,KAAKyD,GAAAA,CAAI2B,EAAO3B,GAAAA,CAAK7B,GAClCwD,EAAOjC,GAAAA,CAAMnD,KAAKmD,GAAAA,CAAIiC,EAAOjC,GAAAA,CAAKvB,GAGxC,CAEO,SAASmmG,EAAU1rB,CAAe,EACvC,OAAOA,EAAW1zB,CAAAA,EAAK,GAAA,CACzB,CAEO,SAASmlD,EAAUxxB,CAAe,EACvC,OAAOA,EAAW,CAAA,IAAM3zB,CAAAA,CAC1B,CAEA;;;;;;CAMC,EACM,SAAS4wD,EAAej4G,CAAS,EACtC,GAAI,CAACm7G,EAAen7G,GAClB,OAEF,IAAIpI,EAAI,EACJ8N,EAAI,EACR,KAAOhH,KAAK0B,KAAAA,CAAMJ,EAAIpI,GAAKA,IAAMoI,GAC/BpI,GAAK,GACL8N,IAEF,OAAOA,CACT,CAEA,oEAAA;AACO,SAASkiG,EACd3sB,CAAkB,CAClBC,CAAiB,EAEjB,IAAMC,EAAsBD,EAAWl7E,CAAAA,CAAIi7E,EAAYj7E,CAAvD,CACMo7E,EAAsBF,EAAW1wE,CAAAA,CAAIywE,EAAYzwE,CAAvD,CACM6wE,EAA2B38E,KAAKC,IAAAA,CAAKw8E,EAAsBA,EAAsBC,EAAsBA,GAEzG9sD,EAAQ5vB,KAAK48E,KAAAA,CAAMF,EAAqBD,GAM5C,OAJI7sD,EAAS,IAAO+4B,GAClB/4B,CAAAA,GAASg4E,CAAAA,EAGJ,CACLh4E,MAAAA,EACAsM,SAAUygD,CACZ,CACF,CAEO,SAASi7B,EAAsBj8E,CAAU,CAAEC,CAAU,EAC1D,OAAO57B,KAAKC,IAAAA,CAAKD,KAAKiL,GAAAA,CAAI2wB,EAAIt6B,CAAAA,CAAIq6B,EAAIr6B,CAAAA,CAAG,GAAKtB,KAAKiL,GAAAA,CAAI2wB,EAAI9vB,CAAAA,CAAI6vB,EAAI7vB,CAAAA,CAAG,GACxE,CAEA;;;CAGC,EACM,SAAS4wG,EAAW7iH,CAAS,CAAEkH,CAAS,EAC7C,MAAQlH,AAAAA,CAAAA,EAAIkH,EAAIq7G,CAAAA,EAASxU,EAAMj/C,CACjC,CAEA;;;CAGC,EACM,SAAS4sD,GAAgB17G,CAAS,EACvC,MAAQA,AAAAA,CAAAA,EAAI+tG,EAAMA,CAAAA,EAAOA,CAC3B,CAEA;;CAGO,EAAA,SAASC,GAAcj4E,CAAa,CAAE5X,CAAa,CAAE4F,CAAW,CAAEk/D,CAA+B,EACtG,IAAMjjF,EAAI07G,GAAgB3lF,GACpBv2B,EAAIk8G,GAAgBv9F,GACpB9e,EAAIq8G,GAAgB33F,GACpBm/D,EAAew4B,GAAgBl8G,EAAIQ,GACnCmjF,EAAau4B,GAAgBr8G,EAAIW,GACjCojF,EAAes4B,GAAgB17G,EAAIR,GACnC6jF,EAAaq4B,GAAgB17G,EAAIX,GACvC,OAAOW,IAAMR,GAAKQ,IAAMX,GAAM4jF,GAAyBzjF,IAAMH,GACvD6jF,EAAeC,GAAcC,EAAeC,CACpD,CAEA;;;;;;CAOO,EAAA,SAAS2wB,GAAYjsG,CAAa,CAAE6B,CAAW,CAAEN,CAAW,EACjE,OAAOnD,KAAKmD,GAAAA,CAAIM,EAAKzD,KAAKyD,GAAAA,CAAIN,EAAKvB,GACrC,CAEA;;;CAGC,EACM,SAASosG,GAAYpsG,CAAa,EACvC,OAAOisG,GAAYjsG,EAAO,OAAQ,MACpC,CAEA;;;;;;CAOO,EAAA,SAASywG,GAAWzwG,CAAa,CAAEoW,CAAa,CAAE4F,CAAW,CAAEm+D,EAAU,IAAI,EAClF,OAAOn6E,GAAS5B,KAAKyD,GAAAA,CAAIuU,EAAO4F,GAAOm+D,GAAWn6E,GAAS5B,KAAKmD,GAAAA,CAAI6U,EAAO4F,GAAOm+D,CACpF,CCpLO,SAASy/B,GACdxqC,CAAgB,CAChBpvE,CAAa,CACbu7E,CAAgC,MAK5BC,EAHJD,EAAMA,GAAQ,CAAA,AAACj/D,GAAU8yD,CAAK,CAAC9yD,EAAM,CAAGtc,CAAAA,EACxC,IAAI04B,EAAK02C,EAAMpzE,MAAAA,CAAS,EACpBy8B,EAAK,EAGT,KAAOC,EAAKD,EAAK,GAEX8iD,EADJC,EAAO/iD,EAAKC,GAAO,GAEjBD,EAAK+iD,EAEL9iD,EAAK8iD,EAIT,MAAO,CAAC/iD,GAAAA,EAAIC,GAAAA,CAAE,CAChB,CAEA;;;;;;;CAOC,EACM,IAAMquE,GAAe,CAC1B33B,EACApsE,EACAhD,EACA8yB,IAEA8mF,GAAQxqC,EAAOpvE,EAAO8yB,EAClBxW,AAAAA,IACA,IAAMm/D,EAAKrM,CAAK,CAAC9yD,EAAM,CAACtZ,EAAI,CAC5B,OAAOy4E,EAAKz7E,GAASy7E,IAAOz7E,GAASovE,CAAK,CAAC9yD,EAAQ,EAAE,CAACtZ,EAAI,GAAKhD,CAE/Dsc,EAAAA,AAAAA,GAAS8yD,CAAK,CAAC9yD,EAAM,CAACtZ,EAAI,CAAGhD,GAStB8mG,GAAgB,CAC3B13B,EACApsE,EACAhD,IAEA45G,GAAQxqC,EAAOpvE,EAAOsc,AAAAA,GAAS8yD,CAAK,CAAC9yD,EAAM,CAACtZ,EAAI,EAAIhD,EAEtD;;;;;;CAOO,EAAA,SAAS+5G,GAAen+G,CAAgB,CAAEiG,CAAW,CAAEN,CAAW,EACvE,IAAI6U,EAAQ,EACR4F,EAAMpgB,EAAOI,MAAjB,CAEA,KAAOoa,EAAQ4F,GAAOpgB,CAAM,CAACwa,EAAM,CAAGvU,GACpCuU,IAEF,KAAO4F,EAAM5F,GAASxa,CAAM,CAACogB,EAAM,EAAE,CAAGza,GACtCya,IAGF,OAAO5F,EAAQ,GAAK4F,EAAMpgB,EAAOI,MAAAA,CAC7BJ,EAAO6D,KAAAA,CAAM2W,EAAO4F,GACpBpgB,CACN,CAEA,IAAMm/G,GAAc,CAAC,OAAQ,MAAO,QAAS,SAAU,UAAU,CAgB1D,SAASrW,GAAkBz5F,CAAK,CAAEy0B,CAAQ,EAC/C,GAAIz0B,EAAM0wE,QAAAA,CAAU,CAClB1wE,EAAM0wE,QAAAA,CAAS7lE,SAAAA,CAAUhX,IAAAA,CAAK4gC,GAC9B,MACD,CAEDhoC,OAAOC,cAAAA,CAAesT,EAAO,WAAY,CACvClT,aAAc,CAAA,EACdD,WAAY,CAAA,EACZkI,MAAO,CACL8V,UAAW,CAAC4pB,EAAS,AACvB,CACF,GAEAq7E,GAAYz/G,OAAAA,CAAQ,AAAC0H,IACnB,IAAMmX,EAAS,UAAY4yF,EAAY/pG,GACjC2uB,EAAO1mB,CAAK,CAACjI,EAAI,CAEvBtL,OAAOC,cAAAA,CAAesT,EAAOjI,EAAK,CAChCjL,aAAc,CAAA,EACdD,WAAY,CAAA,EACZkI,MAAM,GAAG4G,CAAI,EACX,IAAMvC,EAAMstB,EAAK1qB,KAAAA,CAAM,IAAI,CAAEL,GAQ7B,OANAqE,EAAM0wE,QAAAA,CAAS7lE,SAAAA,CAAUxa,OAAAA,CAAQ,AAACsgF,IACF,YAA1B,OAAOA,CAAM,CAACzhE,EAAO,EACvByhE,CAAM,CAACzhE,EAAO,IAAIvT,EAEtB,GAEOvC,CACT,CACF,EACF,EACF,CAQO,SAASogG,GAAoBx5F,CAAK,CAAEy0B,CAAQ,EACjD,IAAMm8C,EAAO5wE,EAAM0wE,QAAnB,CACA,GAAI,CAACE,EACH,OAGF,IAAM/lE,EAAY+lE,EAAK/lE,SAAvB,CACMwG,EAAQxG,EAAUmd,OAAAA,CAAQyM,EAClB,CAAA,KAAVpjB,GACFxG,EAAUgT,MAAAA,CAAOxM,EAAO,GAGtBxG,EAAU9Z,MAAAA,CAAS,IAIvB++G,GAAYz/G,OAAAA,CAAQ,AAAC0H,IACnB,OAAOiI,CAAK,CAACjI,EAAI,AACnB,GAEA,OAAOiI,EAAM0wE,QAAb,CACF,CAEA;;CAEC,EACM,SAASmpB,GAAgBnuF,CAAU,EACxC,IAAM9e,EAAM,IAAIwiD,IAAO1jC,UAEvB,AAAI9e,EAAIwc,IAAAA,GAASsC,EAAM3a,MAAAA,CACd2a,EAGFzL,MAAMgN,IAAAA,CAAKrgB,EACpB,CCtLA;;AAEA,EACa8qG,IAAAA,GACX,AAAI,AAAkB,aAAlB,OAAOpqG,OACF,SAASwW,CAAQ,EACtB,OAAOA,GACT,EAEKxW,OAAOujF,qBAAd,AAGF;;;CAGC,EACM,SAASsuB,GACdn0F,CAA4B,CAC5ByiE,CAAY,EAEZ,IAAIqD,EAAY,EAAE,CACdC,EAAU,CAAA,EAEd,OAAO,SAAS,GAAGp1E,CAAW,E,8B;AAE5Bm1E,EAAYn1E,EACPo1E,IACHA,EAAU,CAAA,EACV2mB,GAAiB3pG,IAAAA,CAAKT,OAAQ,KAC5ByjF,EAAU,CAAA,EACV/lE,EAAGhP,KAAAA,CAAMyxE,EAASqD,EACpB,GAEJ,CACF,CAEA;;CAEC,EACM,SAAS2zB,GAAmCz5F,CAA4B,CAAEiD,CAAa,EAC5F,IAAI+iE,EACJ,OAAO,SAAS,GAAGr1E,CAAW,EAO5B,OANIsS,GACFgjE,aAAaD,GACbA,EAAUE,WAAWlmE,EAAIiD,EAAOtS,IAEhCqP,EAAGhP,KAAAA,CAAM,IAAI,CAAEL,GAEVsS,CACT,CACF,CAEA;;;CAGC,EACM,IAAMyyF,GAAqB,AAACzmE,GAAsCA,AAAU,UAAVA,EAAoB,OAASA,AAAU,QAAVA,EAAkB,QAAU,SAMrH2mE,GAAiB,CAAC3mE,EAAmC9uB,EAAe4F,IAAgBkpB,AAAU,UAAVA,EAAoB9uB,EAAQ8uB,AAAU,QAAVA,EAAkBlpB,EAAO5F,AAAAA,CAAAA,EAAQ4F,CAAAA,EAAO,EAMxJy5F,GAAS,CAACvwE,EAAoCvf,EAAcF,EAAe+uC,IAE/EtvB,IADOsvB,CAAAA,EAAM,OAAS,OAA7B,EACyB/uC,EAAQyf,AAAU,WAAVA,EAAqB,AAACvf,CAAAA,EAAOF,CAAAA,EAAS,EAAIE,CAG7E;;;CAIO,EAAA,SAAS4gF,GAAiCxpF,CAAmC,CAAEsY,CAAsB,CAAEW,CAA2B,EACvI,IAAMgqC,EAAa3qC,EAAOr5B,MAA1B,CAEIoa,EAAQ,EACRvF,EAAQmvD,EAEZ,GAAIjjD,EAAKuG,OAAAA,CAAS,CAChB,GAAM,CAAA,OAAC5F,CAAAA,CAAAA,QAAQiB,CAAAA,CAAQ,CAAG5B,EACpBzJ,EAAOoK,EAAOpK,IAApB,CACM,CAAA,IAACzR,CAAG,CAAA,IAAEN,CAAG,CAAA,WAAEujB,CAAU,CAAA,WAAEC,CAAU,CAAC,CAAGrH,EAAOsH,aAAlD,GAEIF,GACF1O,CAAAA,EAAQ61F,GAAY7tG,KAAKyD,GAAAA,CAEvBklG,GAAapoF,EAASrL,EAAMzR,GAAK42B,EAAAA,CAEjCzC,EAAqBgqC,EAAa+mC,GAAa1xE,EAAQ/hB,EAAMoK,EAAO2V,gBAAAA,CAAiBxxB,IAAM42B,EAAAA,EAC7F,EAAGunC,EAAa,EANlB,EASEnvD,EADEkU,EACMknF,GAAY7tG,KAAKmD,GAAAA,CAEvBwlG,GAAapoF,EAASjB,EAAOpK,IAAAA,CAAM/R,EAAK,CAAA,GAAMm3B,EAAAA,CAAK,EAEnD1C,EAAqB,EAAI+wE,GAAa1xE,EAAQ/hB,EAAMoK,EAAO2V,gBAAAA,CAAiB9xB,GAAM,CAAA,GAAMm3B,EAAAA,CAAK,GAC/FtiB,EAAO4pD,GAAc5pD,EAEb4pD,EAAa5pD,CAExB,CAED,MAAO,CAACA,MAAAA,EAAOvF,MAAAA,CAAK,CACtB,CAEA;;;;;CAKC,EACM,SAAS21F,GAAoBzpF,CAAI,EACtC,GAAM,CAAA,OAAC4E,CAAM,CAAA,OAAEE,CAAAA,CAAAA,aAAQu6D,CAAAA,CAAa,CAAGr/D,EACjCs/D,EAAY,CAChBC,KAAM36D,EAAO9f,GAAby6E,CACAC,KAAM56D,EAAOpgB,GAAbg7E,CACAC,KAAM36D,EAAOhgB,GAAb26E,CACAC,KAAM56D,EAAOtgB,GAAbk7E,AACF,EACA,GAAI,CAACL,EAEH,OADAr/D,EAAKq/D,YAAAA,CAAeC,EACb,CAAA,EAET,IAAMrgD,EAAUogD,EAAaE,IAAAA,GAAS36D,EAAO9f,GAAAA,EAC1Cu6E,EAAaG,IAAAA,GAAS56D,EAAOpgB,GAAAA,EAC7B66E,EAAaI,IAAAA,GAAS36D,EAAOhgB,GAAAA,EAC7Bu6E,EAAaK,IAAAA,GAAS56D,EAAOtgB,GAHhC,CAMA,OADA7J,OAAOyjB,MAAAA,CAAOihE,EAAcC,GACrBrgD,CACT,CC/IA,IAAMo/E,GAAS,AAACvuG,GAAcA,AAAM,IAANA,GAAWA,AAAM,IAANA,EACnCwuG,GAAY,CAACxuG,EAAWpV,EAAW2N,IAAc,CAAEhH,CAAAA,KAAKiL,GAAAA,CAAI,EAAG,GAAMwD,CAAAA,GAAK,CAAA,GAAMzO,KAAKwvB,GAAAA,CAAK/gB,AAAAA,CAAAA,EAAIpV,CAAAA,EAAKuuG,EAAM5gG,EAAAA,EACzGk2G,GAAa,CAACzuG,EAAWpV,EAAW2N,IAAchH,KAAKiL,GAAAA,CAAI,EAAG,IAAMwD,GAAKzO,KAAKwvB,GAAAA,CAAK/gB,AAAAA,CAAAA,EAAIpV,CAAAA,EAAKuuG,EAAM5gG,GAAK,EAOvG29F,GAAU,CACd/pF,OAAQ,AAACnM,GAAcA,EAEvBgwE,WAAY,AAAChwE,GAAcA,EAAIA,EAE/BiwE,YAAa,AAACjwE,GAAc,CAACA,EAAKA,CAAAA,EAAI,CAAA,EAEtCkwE,cAAe,AAAClwE,GAAgBA,AAAAA,CAAAA,GAAK,EAAA,EAAO,EACxC,GAAMA,EAAIA,EACV,IAAS,CAAA,EAAEA,EAAMA,CAAAA,EAAI,CAAA,EAAK,CAAA,EAE9BmwE,YAAa,AAACnwE,GAAcA,EAAIA,EAAIA,EAEpCowE,aAAc,AAACpwE,GAAeA,AAAAA,CAAAA,GAAK,CAAA,EAAKA,EAAIA,EAAI,EAEhDqwE,eAAgB,AAACrwE,GAAgBA,AAAAA,CAAAA,GAAK,EAAA,EAAO,EACzC,GAAMA,EAAIA,EAAIA,EACd,GAAQA,CAAAA,AAAAA,CAAAA,GAAK,CAAA,EAAKA,EAAIA,EAAI,CAAA,EAE9BswE,YAAa,AAACtwE,GAAcA,EAAIA,EAAIA,EAAIA,EAExCuwE,aAAc,AAACvwE,GAAc,CAAE,CAAA,AAACA,CAAAA,GAAK,CAAA,EAAKA,EAAIA,EAAIA,EAAI,CAAA,EAEtDwwE,eAAgB,AAACxwE,GAAe,AAACA,CAAAA,GAAK,EAAA,EAAO,EACzC,GAAMA,EAAIA,EAAIA,EAAIA,EAClB,IAASA,CAAAA,AAAAA,CAAAA,GAAK,CAAA,EAAKA,EAAIA,EAAIA,EAAI,CAAA,EAEnCywE,YAAa,AAACzwE,GAAcA,EAAIA,EAAIA,EAAIA,EAAIA,EAE5C0wE,aAAc,AAAC1wE,GAAeA,AAAAA,CAAAA,GAAK,CAAA,EAAKA,EAAIA,EAAIA,EAAIA,EAAI,EAExD2wE,eAAgB,AAAC3wE,GAAe,AAACA,CAAAA,GAAK,EAAA,EAAO,EACzC,GAAMA,EAAIA,EAAIA,EAAIA,EAAIA,EACtB,GAAQA,CAAAA,AAAAA,CAAAA,GAAK,CAAA,EAAKA,EAAIA,EAAIA,EAAIA,EAAI,CAAA,EAEtC4wE,WAAY,AAAC5wE,GAAc,CAACzO,KAAKsvB,GAAAA,CAAI7gB,EAAIq5F,GAAW,EAEpDxoB,YAAa,AAAC7wE,GAAczO,KAAKwvB,GAAAA,CAAI/gB,EAAIq5F,GAEzCvoB,cAAe,AAAC9wE,GAAc,IAAQzO,CAAAA,KAAKsvB,GAAAA,CAAIq5B,EAAKl6C,GAAK,CAAA,EAEzD+wE,WAAY,AAAC/wE,GAAc,AAAO,IAAP,EAAY,EAAIzO,KAAKiL,GAAAA,CAAI,EAAG,GAAMwD,CAAAA,EAAI,CAAA,GAEjEgxE,YAAa,AAAChxE,GAAc,AAAO,IAAP,EAAY,EAAI,CAACzO,KAAKiL,GAAAA,CAAI,EAAG,IAAMwD,GAAK,EAEpEixE,cAAe,AAACjxE,GAAcuuG,GAAOvuG,GAAKA,EAAIA,EAAI,GAC9C,GAAMzO,KAAKiL,GAAAA,CAAI,EAAG,GAAMwD,CAAAA,AAAI,EAAJA,EAAQ,CAAA,GAChC,GAAO,CAAA,CAACzO,KAAKiL,GAAAA,CAAI,EAAG,IAAOwD,CAAAA,AAAI,EAAJA,EAAQ,CAAA,GAAM,CAAA,EAE7CkxE,WAAY,AAAClxE,GAAc,GAAM,EAAKA,EAAI,CAAEzO,CAAAA,KAAKC,IAAAA,CAAK,EAAIwO,EAAIA,GAAK,CAAA,EAEnEmxE,YAAa,AAACnxE,GAAczO,KAAKC,IAAAA,CAAK,EAAI,AAACwO,CAAAA,GAAK,CAAA,EAAKA,GAErDoxE,cAAe,AAACpxE,GAAc,AAAEA,CAAAA,GAAK,EAAA,EAAO,EACxC,IAAQzO,CAAAA,KAAKC,IAAAA,CAAK,EAAIwO,EAAIA,GAAK,CAAA,EAC/B,GAAOzO,CAAAA,KAAKC,IAAAA,CAAK,EAAKwO,AAAAA,CAAAA,GAAK,CAAA,EAAKA,GAAK,CAAA,EAEzCqxE,cAAe,AAACrxE,GAAcuuG,GAAOvuG,GAAKA,EAAIwuG,GAAUxuG,EAAG,KAAO,IAElEsxE,eAAgB,AAACtxE,GAAcuuG,GAAOvuG,GAAKA,EAAIyuG,GAAWzuG,EAAG,KAAO,IAEpEuxE,iBAAAA,AAAiBvxE,GAGRuuG,GAAOvuG,GAAKA,EACjBA,EAAI,GACA,GAAMwuG,GAAUxuG,AAAI,EAAJA,EAJZ,MACA,KAIJ,GAAM,GAAMyuG,GAAWzuG,AAAI,EAAJA,EAAQ,EAL3B,MACA,KAOZwxE,WAAAA,AAAWxxE,GAEFA,EAAIA,EAAMpV,CAAAA,AAAAA,QAASoV,EADhB,OACoBpV,EAGhC6mF,YAAAA,AAAYzxE,GAEFA,AAAAA,CAAAA,GAAK,CAAA,EAAKA,EAAK,CAAA,AAACpV,QAASoV,EADvB,OAC2BpV,EAAK,EAG5C8mF,cAAc1xE,CAAS,EACrB,IAAIpV,EAAI,cACR,AAAI,AAACoV,CAAAA,GAAK,EAAA,EAAO,EACR,GAAOA,CAAAA,EAAIA,EAAK,CAAA,AAAEpV,CAAAA,AAAAA,CAAAA,GAAM,KAAA,EAAU,CAAA,EAAKoV,EAAIpV,CAAAA,CAAAA,EAE7C,GAAO,CAAA,AAACoV,CAAAA,GAAK,CAAA,EAAKA,EAAM,CAAA,AAAA,CAAA,AAACpV,CAAAA,GAAM,KAAA,EAAU,CAAA,EAAKoV,EAAIpV,CAAAA,EAAK,CAAA,CAChE,EAEA+mF,aAAc,AAAC3xE,GAAc,EAAIk2F,GAAQtkB,aAAAA,CAAc,EAAI5xE,GAE3D4xE,cAAAA,AAAc5xE,GAGZ,AAAIA,EAAK,mBACAogB,AAHC,OAGGpgB,EAAIA,EAEbA,EAAK,kBACAogB,AANC,OAMIpgB,CAAAA,GAAM,iBAAMjN,EAAMiN,EAAI,IAEhCA,EAAK,kBACAogB,AATC,OASIpgB,CAAAA,GAAM,iBAAOjN,EAAMiN,EAAI,MAE9BogB,AAXG,OAWEpgB,CAAAA,GAAM,iBAAQjN,EAAMiN,EAAI,QAGtC6xE,gBAAiB,AAAC7xE,GAAeA,EAAI,GACjCk2F,AAA8B,GAA9BA,GAAQvkB,YAAAA,CAAa3xE,AAAI,EAAJA,GACrBk2F,AAAmC,GAAnCA,GAAQtkB,aAAAA,CAAc5xE,AAAI,EAAJA,EAAQ,GAAW,EAC/C,ECrHO,SAAS0uG,GAAoBv7G,CAAc,EAChD,GAAIA,GAAS,AAAiB,UAAjB,OAAOA,EAAoB,CACtC,IAAM0S,EAAO1S,EAAMM,QAAnB,GACA,MAAOoS,AAAS,2BAATA,GAAqCA,AAAS,4BAATA,CAC7C,CAED,MAAO,CAAA,CACT,CAWO,SAASiB,GAAM3T,CAAK,EACzB,OAAOu7G,GAAoBv7G,GAASA,EAAQ,IAAI4+E,EAAAA,KAAAA,CAAM5+E,EACxD,CAKO,SAASw7G,GAAcx7G,CAAK,EACjC,OAAOu7G,GAAoBv7G,GACvBA,EACA,GAAI4+E,CAAAA,EAAAA,EAAAA,KAAAA,AAAAA,EAAM5+E,GAAO8+E,QAAAA,CAAS,IAAKhrE,MAAAA,CAAO,IAAK2E,SAF/C,EAGF,CC/BA,IAAMgS,GAAU,CAAC,IAAK,IAAK,cAAe,SAAU,UAAU,CACxDi2D,GAAS,CAAC,QAAS,cAAe,kBAAkB,CEApDi7B,GAAY,IAAIpmG,IAaf,SAAS+wF,GAAanlG,CAAW,CAAEquB,CAAc,CAAE7wB,CAAkC,EAC1F,MAAOi9G,AAZT,CAAA,SAAyBpsF,CAAc,CAAE7wB,CAAkC,EACzEA,EAAUA,GAAW,CAAA,EACrB,IAAMioB,EAAW4I,EAASvsB,KAAKoO,SAAAA,CAAU1S,GACrC2vE,EAAYqtC,GAAU/jH,GAAAA,CAAIgvB,GAK9B,OAJK0nD,IACHA,EAAY,IAAI6Q,KAAKC,YAAAA,CAAa5vD,EAAQ7wB,GAC1Cg9G,GAAU9jH,GAAAA,CAAI+uB,EAAU0nD,IAEnBA,CACT,CAAA,EAGyB9+C,EAAQ7wB,GAASm5B,MAAAA,CAAO32B,EACjD,CCRA,IAAMilE,GAAa,CAOjBxqE,OAAAA,AAAOoE,GACEmL,EAAQnL,GAAkCA,EAAS,GAAKA,EAWjEqmE,QAAQL,CAAS,CAAE1pD,CAAK,CAAE/I,CAAK,MAMzB+rE,EALJ,GAAItZ,AAAc,IAAdA,EACF,MAAO,IAGT,IAAMx2C,EAAS,IAAI,CAAC7Z,KAAAA,CAAMhX,OAAAA,CAAQ6wB,MAAlC,CAEI+vD,EAAQvZ,EAEZ,GAAIzyD,EAAMvX,MAAAA,CAAS,EAAG,KAmDpBujF,EAjDA,IAAMC,EAAUphF,KAAKmD,GAAAA,CAAInD,KAAKyK,GAAAA,CAAI0K,CAAK,CAAC,EAAE,CAACvT,KAAAA,EAAQ5B,KAAKyK,GAAAA,CAAI0K,CAAK,CAACA,EAAMvX,MAAAA,CAAS,EAAE,CAACgE,KAApF,GACIw/E,CAAAA,EAAU,MAAQA,EAAU,IAAA,GAC9BF,CAAAA,EAAW,YADb,EAmDAlhF,KAAKyK,GAAAA,CAHL02E,EAAQhsE,AA5C0BA,EA4CpBvX,MAAAA,CAAS,EAAIuX,AA5COA,CA4CF,CAAC,EAAE,CAACvT,KAAAA,CAAQuT,AA5CVA,CA4Ce,CAAC,EAAE,CAACvT,KAAAA,CAAQuT,AA5C3BA,CA4CgC,CAAC,EAAE,CAACvT,KAAAA,CAAQuT,AA5C5CA,CA4CiD,CAAC,EAAE,CAACvT,KAA3F,GAGuB,GAAKgmE,AA/CDA,IA+Ce5nE,KAAKyJ,KAAAA,CA/CpBm+D,IAiDzBuZ,CAAAA,EAAQvZ,AAjDiBA,EAiDL5nE,KAAKyJ,KAAAA,CAjDAm+D,EA+C3B,EA/CIuZ,EAmDGA,CAlDJ,CAED,IAAME,EAAWxF,EAAM77E,KAAKyK,GAAAA,CAAI02E,IAO1BG,EAAanwD,MAAMkwD,GAAY,EAAIrhF,KAAKmD,GAAAA,CAAInD,KAAKyD,GAAAA,CAAI,GAAKzD,KAAKyJ,KAAAA,CAAM43E,GAAW,IAAK,GAErF9gF,EAAU,CAAC2gF,SAAAA,EAAUK,sBAAuBD,EAAYE,sBAAuBF,CAAU,EAG/F,OAFAhoF,OAAOyjB,MAAAA,CAAOxc,EAAS,IAAI,CAACA,OAAAA,CAAQ4U,KAAAA,CAAMukB,MAA1CpgC,EAEO4uG,GAAatgC,EAAWx2C,EAAQ7wB,EACzC,EAWAooE,YAAYf,CAAS,CAAE1pD,CAAK,CAAE/I,CAAK,EACjC,GAAIyyD,AAAc,IAAdA,EACF,MAAO,IAET,IAAMnsD,EAAStG,CAAK,CAAC+I,EAAM,CAAC8qD,WAAAA,EAAgBpB,EAAa5nE,KAAKiL,GAAAA,CAAI,GAAIjL,KAAKyJ,KAAAA,CAAMoyE,EAAMjU,WACvF,AAAI,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAG,CAACxyD,QAAAA,CAASqG,IAAWyC,EAAQ,GAAM/I,EAAMvX,MAAAA,CACxDoqE,GAAWC,OAAAA,CAAQrtE,IAAAA,CAAK,IAAI,CAAEgtE,EAAW1pD,EAAO/I,GAElD,EACT,CAEF,EAoBA,IAAA,GAAe,CAAC6yD,WAAAA,EAAU,EE/Fbh7C,IAAAA,GAAY1zB,OAAOsN,MAAAA,CAAO,MAC1B+lB,GAAcrzB,OAAOsN,MAAAA,CAAO,MAOzC,SAAS+2G,GAAS56E,CAAI,CAAEn+B,CAAG,EACzB,GAAI,CAACA,EACH,OAAOm+B,EAET,IAAM/vB,EAAOpO,EAAI2R,KAAAA,CAAM,KACvB,IAAK,IAAI9V,EAAI,EAAGtH,EAAI6Z,EAAKpV,MAAAA,CAAQ6C,EAAItH,EAAG,EAAEsH,EAAG,CAC3C,IAAMiH,EAAIsL,CAAI,CAACvS,EAAE,CACjBsiC,EAAOA,CAAI,CAACr7B,EAAE,EAAKq7B,CAAAA,CAAI,CAACr7B,EAAE,CAAGpO,OAAOsN,MAAAA,CAAO,KAAA,CAC7C,CACA,OAAOm8B,CACT,CAEA,SAAStpC,GAAIkoF,CAAI,CAAEtrC,CAAK,CAAE74C,CAAM,QAC9B,AAAI,AAAiB,UAAjB,OAAO64C,EACFm4D,EAAMmP,GAASh8B,EAAMtrC,GAAQ74C,GAE/BgxG,EAAMmP,GAASh8B,EAAM,IAAKtrC,EACnC,CAqIA,IAAA,GAAe,aAAA,EAAgB,IA/HxB,MACLxvC,YAAY0yC,CAAY,CAAEqoC,CAAS,CAAE,CACnC,IAAI,CAACtlE,SAAAA,CAAYtW,KAAAA,EACjB,IAAI,CAAC0O,eAAAA,CAAkB,kBACvB,IAAI,CAAC6Y,WAAAA,CAAc,kBACnB,IAAI,CAAChY,KAAAA,CAAQ,OACb,IAAI,CAACf,QAAAA,CAAW,CAAA,EAChB,IAAI,CAACuvB,gBAAAA,CAAmB,AAAC7b,GAAYA,EAAQ3Q,KAAAA,CAAMklC,QAAAA,CAASjb,mBAA5D,GACA,IAAI,CAAC/Z,QAAAA,CAAW,CAAA,EAChB,IAAI,CAAC27B,MAAAA,CAAS,CACZ,YACA,WACA,QACA,aACA,YACD,CACD,IAAI,CAACptC,IAAAA,CAAO,CACV6rE,OAAQ,qDACR5rE,KAAM,GACNmX,MAAO,SACP0a,WAAY,IACZpW,OAAQ,IACV,EACA,IAAI,CAACo0B,KAAAA,CAAQ,CAAA,EACb,IAAI,CAACg8B,oBAAAA,CAAuB,CAACzgE,EAAK9gB,IAAY68G,GAAc78G,EAAQmU,eAApE,EACA,IAAI,CAACqtE,gBAAAA,CAAmB,CAAC1gE,EAAK9gB,IAAY68G,GAAc78G,EAAQgtB,WAAhE,EACA,IAAI,CAACy0D,UAAAA,CAAa,CAAC3gE,EAAK9gB,IAAY68G,GAAc78G,EAAQgV,KAA1D,EACA,IAAI,CAACV,SAAAA,CAAY,IACjB,IAAI,CAACqkB,WAAAA,CAAc,CACjBza,KAAM,UACN0b,UAAW,CAAA,EACXc,iBAAkB,CAAA,CACpB,EACA,IAAI,CAACulB,mBAAAA,CAAsB,CAAA,EAC3B,IAAI,CAACgG,OAAAA,CAAU,KACf,IAAI,CAAC54B,OAAAA,CAAU,KACf,IAAI,CAAC5I,OAAAA,CAAU,CAAA,EACf,IAAI,CAAClT,OAAAA,CAAU,CAAA,EACf,IAAI,CAAC2uC,UAAAA,CAAa,CAAA,EAClB,IAAI,CAAChjC,KAAAA,CAAQzX,KAAAA,EACb,IAAI,CAAC8O,MAAAA,CAAS,CAAA,EACd,IAAI,CAAC0iB,QAAAA,CAAW,CAAA,EAChB,IAAI,CAAC5P,uBAAAA,CAA0B,CAAA,EAE/B,IAAI,CAAC4vB,QAAAA,CAAS+B,GACd,IAAI,CAAC1wC,KAAAA,CAAM+4E,EACb,CAMAnoF,IAAI48C,CAAK,CAAE74C,CAAM,CAAE,CACjB,OAAO/D,GAAI,IAAI,CAAE48C,EAAO74C,EAC1B,CAKAhE,IAAI68C,CAAK,CAAE,CACT,OAAOsnE,GAAS,IAAI,CAAEtnE,EACxB,CAMAmB,SAASnB,CAAK,CAAE74C,CAAM,CAAE,CACtB,OAAO/D,GAAIkzB,GAAa0pB,EAAO74C,EACjC,CAEA+7B,SAAS8c,CAAK,CAAE74C,CAAM,CAAE,CACtB,OAAO/D,GAAIuzB,GAAWqpB,EAAO74C,EAC/B,CAmBA+5C,MAAMlB,CAAK,CAAExpB,CAAI,CAAEyqB,CAAW,CAAED,CAAU,CAAE,CAC1C,IAAM4qC,EAAc07B,GAAS,IAAI,CAAEtnE,GAC7B6rC,EAAoBy7B,GAAS,IAAI,CAAErmE,GACnC6qC,EAAc,IAAMt1D,EAE1BvzB,OAAO8oF,gBAAAA,CAAiBH,EAAa,CAEnC,CAACE,EAAAA,CAAc,CACbvgF,MAAOqgF,CAAW,CAACp1D,EAAK,CACxBtnB,SAAU,CAAA,CACZ,EAEA,CAACsnB,EAAAA,CAAO,CACNnzB,WAAY,CAAA,EACZF,MACE,IAAMugD,EAAQ,IAAI,CAACooC,EAAY,CACzB/8E,EAAS88E,CAAiB,CAAC7qC,EAAW,QAC5C,AAAIwtD,EAAS9qD,GACJzgD,OAAOyjB,MAAAA,CAAO,CAAA,EAAI3X,EAAQ20C,GAE5BqsD,EAAersD,EAAO30C,EAC/B,EACA3L,IAAImI,CAAK,EACP,IAAI,CAACugF,EAAY,CAAGvgF,CACtB,CACF,CACF,EACF,CAEAiH,MAAMw5E,CAAQ,CAAE,CACdA,EAASnlF,OAAAA,CAAQ,AAAC2L,GAAUA,EAAM,IAAI,EACxC,CACF,EAG4C,CAC1C+jB,YAAa,AAACC,GAAS,CAACA,EAAKE,UAAAA,CAAW,MACxCD,WAAY,AAACD,GAASA,AAAS,WAATA,EACtBi5B,MAAO,CACLof,UAAW,aACb,EACAhsC,YAAa,CACXtM,YAAa,CAAA,EACbE,WAAY,CAAA,CACd,CACF,EAAG,CL3KI,SAAiC7L,CAAQ,EAC9CA,EAASxnB,GAAAA,CAAI,YAAa,CACxBqhB,MAAO9U,KAAAA,EACP4R,SAAU,IACV+C,OAAQ,eACR9C,GAAI7R,KAAAA,EACJ8T,KAAM9T,KAAAA,EACNgV,KAAMhV,KAAAA,EACN+T,GAAI/T,KAAAA,EACJsO,KAAMtO,KAAAA,CACR,GAEAib,EAASu2B,QAAAA,CAAS,YAAa,CAC7B0tB,UAAW,CAAA,EACXp4C,WAAY,CAAA,EACZF,YAAa,AAACC,GAASA,AAAS,eAATA,GAAyBA,AAAS,eAATA,GAAyBA,AAAS,OAATA,CAC3E,GAEA5L,EAASxnB,GAAAA,CAAI,aAAc,CACzB6oF,OAAQ,CACNhuE,KAAM,QACNoI,WAAY4lE,EACd,EACAj2D,QAAS,CACP/X,KAAM,SACNoI,WAAY2P,EACd,CACF,GAEApL,EAASu2B,QAAAA,CAAS,aAAc,CAC9B0tB,UAAW,WACb,GAEAjkD,EAASxnB,GAAAA,CAAI,cAAe,CAC1B6hB,OAAQ,CACNgB,UAAW,CACT1E,SAAU,GACZ,CACF,EACAosB,OAAQ,CACN1nB,UAAW,CACT1E,SAAU,CACZ,CACF,EACA8sC,KAAM,CACJznC,WAAY,CACVqlE,OAAQ,CACNxoE,KAAM,aACR,EACAuoC,QAAS,CACP/tC,KAAM,UACNsD,SAAU,CACZ,CACF,CACF,EACA6sC,KAAM,CACJxnC,WAAY,CACVqlE,OAAQ,CACNvoE,GAAI,aACN,EACAsoC,QAAS,CACP/tC,KAAM,UACNqG,OAAQ,SACR9C,GAAIze,AAAAA,GAAKA,AAAI,EAAJA,CACX,CACF,CACF,CACF,EACF,ECvEO,SAA8B6nB,CAAQ,EAC3CA,EAASxnB,GAAAA,CAAI,SAAU,CACrBopD,YAAa,CAAA,EACb9jB,QAAS,CACPnvB,IAAK,EACLyX,MAAO,EACPC,OAAQ,EACRC,KAAM,CACR,CACF,EACF,EGRO,SAA4BtG,CAAQ,EACzCA,EAASxnB,GAAAA,CAAI,QAAS,CACpBqc,QAAS,CAAA,EACTyb,OAAQ,CAAA,EACR5T,QAAS,CAAA,EACTkU,YAAa,CAAA,EASbo7B,OAAQ,QAER9lC,KAAM,CAAA,EAMN6iB,MAAO,EAGPlY,KAAM,CACJhc,QAAS,CAAA,EACT2X,UAAW,EACXunB,gBAAiB,CAAA,EACjBxN,UAAW,CAAA,EACXC,WAAY,EACZ2F,UAAW,CAAChsB,EAAM7gB,IAAYA,EAAQktB,SAAtC2f,CACAgF,UAAW,CAAChxB,EAAM7gB,IAAYA,EAAQgV,KAAtC68B,CACA7gB,OAAQ,CAAA,CACV,EAEAgH,OAAQ,CACNziB,QAAS,CAAA,EACTm8B,KAAM,EAAE,CACRE,WAAY,EACZ3/B,MAAO,CACT,EAGAqD,MAAO,CAELC,QAAS,CAAA,EAGTC,KAAM,GAGNgpB,QAAS,CACPnvB,IAAK,EACL0X,OAAQ,CACV,CACF,EAGAnS,MAAO,CACLo4B,YAAa,EACbC,YAAa,GACbgB,OAAQ,CAAA,EACRiF,gBAAiB,EACjBF,gBAAiB,GACjBxU,QAAS,EACTjpB,QAAS,CAAA,EACTm1B,SAAU,CAAA,EACVwF,gBAAiB,EACjB2C,YAAa,EAEbziC,SAAUgpG,GAAM3xC,UAAAA,CAAWxqE,MAA3BmT,CACA++D,MAAO,CAAA,EACP/jC,MAAO,CAAA,EACP7E,MAAO,SACP+L,WAAY,OAEZc,kBAAmB,CAAA,EACnBG,cAAe,4BACfD,gBAAiB,CACnB,CACF,GAEA5yB,EAASs2B,KAAAA,CAAM,cAAe,QAAS,GAAI,SAC3Ct2B,EAASs2B,KAAAA,CAAM,aAAc,QAAS,GAAI,eAC1Ct2B,EAASs2B,KAAAA,CAAM,eAAgB,QAAS,GAAI,eAC5Ct2B,EAASs2B,KAAAA,CAAM,cAAe,QAAS,GAAI,SAE3Ct2B,EAASu2B,QAAAA,CAAS,QAAS,CACzB0tB,UAAW,CAAA,EACXt4C,YAAa,AAACC,GAAS,CAACA,EAAKE,UAAAA,CAAW,WAAa,CAACF,EAAKE,UAAAA,CAAW,UAAYF,AAAS,aAATA,GAAuBA,AAAS,WAATA,EACzGC,WAAY,AAACD,GAASA,AAAS,eAATA,GAAyBA,AAAS,mBAATA,GAA6BA,AAAS,SAATA,CAC9E,GAEA5L,EAASu2B,QAAAA,CAAS,SAAU,CAC1B0tB,UAAW,OACb,GAEAjkD,EAASu2B,QAAAA,CAAS,cAAe,CAC/B5qB,YAAa,AAACC,GAASA,AAAS,oBAATA,GAA8BA,AAAS,aAATA,EACrDC,WAAY,AAACD,GAASA,AAAS,oBAATA,CACxB,EACF,ECsEsE,CC3ItE;;CAEC,EACM,SAASkhF,GACd1sF,CAA6B,CAC7B9S,CAA4B,CAC5BshC,CAAY,CACZ0yC,CAAe,CACf3yC,CAAc,EAEd,IAAI6nB,EAAYlpD,CAAI,CAACqhC,EAAO,CAQ5B,OAPK6nB,IACHA,EAAYlpD,CAAI,CAACqhC,EAAO,CAAGvuB,EAAIm0C,WAAAA,CAAY5lB,GAAQp9B,KAAnDilD,CACA5nB,EAAGnvC,IAAAA,CAAKkvC,IAEN6nB,EAAY8qB,GACdA,CAAAA,EAAU9qB,CADZ,EAGO8qB,CACT,CAKA;;CAEC,EAAA,sCAAA;AAEM,SAAS23B,GACd74F,CAA6B,CAC7BrL,CAAY,CACZwsE,CAAqB,CACrBj6D,CAAiF,MAiB7E9nB,EAAWuP,EAAWk/B,EAAcuzC,EAAwBC,EAdhE,IAAIn0E,EAAOga,AADXA,CAAAA,EAAQA,GAAS,CAAA,CAAA,EACAha,IAAAA,CAAOga,EAAMha,IAAAA,EAAQ,CAAA,EAClCshC,EAAKtnB,EAAMo6D,cAAAA,CAAiBp6D,EAAMo6D,cAAAA,EAAkB,EAAE,AAEtDp6D,CAAAA,EAAMvS,IAAAA,GAASA,IACjBzH,EAAOga,EAAMha,IAAAA,CAAO,CAAA,EACpBshC,EAAKtnB,EAAMo6D,cAAAA,CAAiB,EAAE,CAC9Bp6D,EAAMvS,IAAAA,CAAOA,GAGfqL,EAAI6yB,IAAJ7yB,GAEAA,EAAIrL,IAAAA,CAAOA,EACX,IAAIusE,EAAU,EACRxkE,EAAOykE,EAAc5kF,MAA3B,CAEA,IAAK6C,EAAI,EAAGA,EAAIsd,EAAMtd,I,sD;AAIpB,GAAIgiF,MAHJA,CAAAA,EAAQD,CAAa,CAAC/hF,EAAE,AAAFA,GAGwBsM,EAAQ01E,GAE/C,CAAA,GAAI11E,EAAQ01E,G,+E;AAGjB,IAAKzyE,EAAI,EAAGk/B,EAAOuzC,EAAM7kF,MAAAA,CAAQoS,EAAIk/B,EAAMl/B,I,sD;MACzC0yE,CAAAA,EAAcD,CAAK,CAACzyE,EAAE,AAAFA,GAEsCjD,EAAQ21E,IAChEH,CAAAA,EAAUwrB,GAAa1sF,EAAK9S,EAAMshC,EAAI0yC,EAASG,EADjD,CAGF,MAVAH,EAAUwrB,GAAa1sF,EAAK9S,EAAMshC,EAAI0yC,EAASE,GAcnDphE,EAAI+yB,OAAJ/yB,GAEA,IAAM0uB,EAAQF,EAAGjyC,MAAAA,CAAS,EAC1B,GAAImyC,EAAQyyC,EAAc5kF,MAAAA,CAAQ,CAChC,IAAK6C,EAAI,EAAGA,EAAIsvC,EAAOtvC,IACrB,OAAO8N,CAAI,CAACshC,CAAE,CAACpvC,EAAE,CAAC,CAEpBovC,EAAGnlB,MAAAA,CAAO,EAAGqlB,EACd,CACD,OAAOwyC,CACT,CAEA;;;;;;;CAQO,EAAA,SAAS0rB,GAAY12F,CAAY,CAAE24B,CAAa,CAAE19B,CAAa,EACpE,IAAMuxB,EAAmBxsB,EAAM0sB,uBAA/B,CACM2+C,EAAYpwE,AAAU,IAAVA,EAAcxS,KAAKmD,GAAAA,CAAIqP,EAAQ,EAAG,IAAO,EAC3D,OAAOxS,KAAK0B,KAAAA,CAAOwuC,AAAAA,CAAAA,EAAQ0yC,CAAAA,EAAa7+C,GAAoBA,EAAmB6+C,CACjF,CAEA;;CAEC,EACM,SAAS4uB,GAAYv9F,CAAyB,CAAEoN,CAA8B,EAGnFA,AAFAA,CAAAA,EAAMA,GAAOpN,EAAO8Q,UAAAA,CAAW,KAA/B1D,EAEI6yB,IAAJ7yB,G,uE;A,uB;AAGAA,EAAIwhE,cAAJxhE,GACAA,EAAIyhE,SAAAA,CAAU,EAAG,EAAG7uE,EAAOzB,KAAAA,CAAOyB,EAAO2a,MAAzCvN,EACAA,EAAI+yB,OAAJ/yB,EACF,CASO,SAASmyF,GACdnyF,CAA6B,CAC7B9gB,CAAyB,CACzBe,CAAS,CACTwK,CAAS,E,mE;AAGTqrG,GAAgB91F,EAAK9gB,EAASe,EAAGwK,EAAG,KACtC,CAEA,sCAAA;AACO,SAASqrG,GACd91F,CAA6B,CAC7B9gB,CAAyB,CACzBe,CAAS,CACTwK,CAAS,CACT6D,CAAS,MAEL2E,EAAcyuE,EAAiBC,EAAiB/sE,EAAcylD,EAAsBlpD,EAAeywE,EAAkBC,EACzH,IAAM91D,EAAQ7sB,EAAQ4sB,UAAtB,CACMZ,EAAWhsB,EAAQgsB,QAAzB,CACME,EAASlsB,EAAQksB,MAAvB,CACIg5C,EAAOl5C,AAAAA,CAAAA,GAAY,CAAA,EAAK+vF,EAE5B,GAAIlvF,GAAS,AAAiB,UAAjB,OAAOA,GAEd9Y,CAAAA,AAAS,8BADbA,CAAAA,EAAO8Y,EAAMlrB,QAAboS,EAAAA,GAC4CA,AAAS,+BAATA,CAAS,EAA8B,CACjF+M,EAAI6yB,IAAJ7yB,GACAA,EAAI6sC,SAAAA,CAAU5sD,EAAGwK,GACjBuV,EAAI+qD,MAAAA,CAAO3G,GACXpkD,EAAI8hE,SAAAA,CAAU/1D,EAAO,CAACA,EAAM5a,KAAAA,CAAQ,EAAG,CAAC4a,EAAMwB,MAAAA,CAAS,EAAGxB,EAAM5a,KAAAA,CAAO4a,EAAMwB,MAA7EvN,EACAA,EAAI+yB,OAAJ/yB,GACA,MACD,CAGH,GAAI8P,CAAAA,MAAM1E,KAAWA,CAAAA,GAAU,CAAA,GAM/B,OAFApL,EAAIuzB,SAAJvzB,GAEQ+L,G,0B;AAEN,QACMzd,EACF0R,EAAI+hE,OAAAA,CAAQ9hF,EAAGwK,EAAG6D,EAAI,EAAG8c,EAAQ,EAAG,EAAGm7E,GAEvCvmF,EAAI4P,GAAAA,CAAI3vB,EAAGwK,EAAG2gB,EAAQ,EAAGm7E,GAE3BvmF,EAAI6nC,SAAJ7nC,GACA,KACF,KAAK,WACH7O,EAAQ7C,EAAIA,EAAI,EAAI8c,EACpBpL,EAAIwzB,MAAAA,CAAOvzC,EAAItB,KAAKwvB,GAAAA,CAAIi2C,GAAOjzD,EAAO1G,EAAI9L,KAAKsvB,GAAAA,CAAIm2C,GAAOh5C,GAC1Dg5C,GAAO+2C,EACPn7F,EAAIyzB,MAAAA,CAAOxzC,EAAItB,KAAKwvB,GAAAA,CAAIi2C,GAAOjzD,EAAO1G,EAAI9L,KAAKsvB,GAAAA,CAAIm2C,GAAOh5C,GAC1Dg5C,GAAO+2C,EACPn7F,EAAIyzB,MAAAA,CAAOxzC,EAAItB,KAAKwvB,GAAAA,CAAIi2C,GAAOjzD,EAAO1G,EAAI9L,KAAKsvB,GAAAA,CAAIm2C,GAAOh5C,GAC1DpL,EAAI6nC,SAAJ7nC,GACA,KACF,KAAK,c,wE;A,oE;A,yE;A,oE;A,iE;A,kD;A,kD;AAQHq6C,EAAejvC,AAAS,KAATA,EAEfs2D,EAAU/iF,KAAKsvB,GAAAA,CAAIm2C,EAAM82C,GADzBtmG,CAAAA,EAAOwW,EAASivC,CAAhBzlD,EAEAgtE,EAAWjjF,KAAKsvB,GAAAA,CAAIm2C,EAAM82C,GAAe5sG,CAAAA,EAAIA,EAAI,EAAI+rD,EAAezlD,CAAAA,EACpE+sE,EAAUhjF,KAAKwvB,GAAAA,CAAIi2C,EAAM82C,GAActmG,EACvCitE,EAAWljF,KAAKwvB,GAAAA,CAAIi2C,EAAM82C,GAAe5sG,CAAAA,EAAIA,EAAI,EAAI+rD,EAAezlD,CAAAA,EACpEoL,EAAI4P,GAAAA,CAAI3vB,EAAI2hF,EAAUn3E,EAAIk3E,EAAStnB,EAAc+J,EAAM9c,EAAI8c,EAAMqiC,GACjEzmF,EAAI4P,GAAAA,CAAI3vB,EAAI4hF,EAAUp3E,EAAIi3E,EAASrnB,EAAc+J,EAAMqiC,EAASriC,GAChEpkD,EAAI4P,GAAAA,CAAI3vB,EAAI2hF,EAAUn3E,EAAIk3E,EAAStnB,EAAc+J,EAAKA,EAAMqiC,GAC5DzmF,EAAI4P,GAAAA,CAAI3vB,EAAI4hF,EAAUp3E,EAAIi3E,EAASrnB,EAAc+J,EAAMqiC,EAASriC,EAAM9c,GACtEtnC,EAAI6nC,SAAJ7nC,GACA,KACF,KAAK,OACH,GAAI,CAACkL,EAAU,CACbtW,EAAOjW,KAAKqjF,OAAAA,CAAU52D,EACtBja,EAAQ7C,EAAIA,EAAI,EAAIsG,EACpBoL,EAAI+rC,IAAAA,CAAK9rD,EAAIkR,EAAO1G,EAAImK,EAAM,EAAIzD,EAAO,EAAIyD,GAC7C,KACD,CACDwvD,GAAO82C,CACT,kBAAA,EACA,IAAK,UACHt5B,EAAWjjF,KAAKsvB,GAAAA,CAAIm2C,GAAQ91D,CAAAA,EAAIA,EAAI,EAAI8c,CAAAA,EACxCs2D,EAAU/iF,KAAKsvB,GAAAA,CAAIm2C,GAAOh5C,EAC1Bu2D,EAAUhjF,KAAKwvB,GAAAA,CAAIi2C,GAAOh5C,EAC1By2D,EAAWljF,KAAKwvB,GAAAA,CAAIi2C,GAAQ91D,CAAAA,EAAIA,EAAI,EAAI8c,CAAAA,EACxCpL,EAAIwzB,MAAAA,CAAOvzC,EAAI2hF,EAAUn3E,EAAIk3E,GAC7B3hE,EAAIyzB,MAAAA,CAAOxzC,EAAI4hF,EAAUp3E,EAAIi3E,GAC7B1hE,EAAIyzB,MAAAA,CAAOxzC,EAAI2hF,EAAUn3E,EAAIk3E,GAC7B3hE,EAAIyzB,MAAAA,CAAOxzC,EAAI4hF,EAAUp3E,EAAIi3E,GAC7B1hE,EAAI6nC,SAAJ7nC,GACA,KACF,KAAK,WACHokD,GAAO82C,CACT,kBAAA,EACA,IAAK,QACHt5B,EAAWjjF,KAAKsvB,GAAAA,CAAIm2C,GAAQ91D,CAAAA,EAAIA,EAAI,EAAI8c,CAAAA,EACxCs2D,EAAU/iF,KAAKsvB,GAAAA,CAAIm2C,GAAOh5C,EAC1Bu2D,EAAUhjF,KAAKwvB,GAAAA,CAAIi2C,GAAOh5C,EAC1By2D,EAAWljF,KAAKwvB,GAAAA,CAAIi2C,GAAQ91D,CAAAA,EAAIA,EAAI,EAAI8c,CAAAA,EACxCpL,EAAIwzB,MAAAA,CAAOvzC,EAAI2hF,EAAUn3E,EAAIk3E,GAC7B3hE,EAAIyzB,MAAAA,CAAOxzC,EAAI2hF,EAAUn3E,EAAIk3E,GAC7B3hE,EAAIwzB,MAAAA,CAAOvzC,EAAI4hF,EAAUp3E,EAAIi3E,GAC7B1hE,EAAIyzB,MAAAA,CAAOxzC,EAAI4hF,EAAUp3E,EAAIi3E,GAC7B,KACF,KAAK,OACHE,EAAWjjF,KAAKsvB,GAAAA,CAAIm2C,GAAQ91D,CAAAA,EAAIA,EAAI,EAAI8c,CAAAA,EACxCs2D,EAAU/iF,KAAKsvB,GAAAA,CAAIm2C,GAAOh5C,EAC1Bu2D,EAAUhjF,KAAKwvB,GAAAA,CAAIi2C,GAAOh5C,EAC1By2D,EAAWljF,KAAKwvB,GAAAA,CAAIi2C,GAAQ91D,CAAAA,EAAIA,EAAI,EAAI8c,CAAAA,EACxCpL,EAAIwzB,MAAAA,CAAOvzC,EAAI2hF,EAAUn3E,EAAIk3E,GAC7B3hE,EAAIyzB,MAAAA,CAAOxzC,EAAI2hF,EAAUn3E,EAAIk3E,GAC7B3hE,EAAIwzB,MAAAA,CAAOvzC,EAAI4hF,EAAUp3E,EAAIi3E,GAC7B1hE,EAAIyzB,MAAAA,CAAOxzC,EAAI4hF,EAAUp3E,EAAIi3E,GAC7Btd,GAAO82C,EACPt5B,EAAWjjF,KAAKsvB,GAAAA,CAAIm2C,GAAQ91D,CAAAA,EAAIA,EAAI,EAAI8c,CAAAA,EACxCs2D,EAAU/iF,KAAKsvB,GAAAA,CAAIm2C,GAAOh5C,EAC1Bu2D,EAAUhjF,KAAKwvB,GAAAA,CAAIi2C,GAAOh5C,EAC1By2D,EAAWljF,KAAKwvB,GAAAA,CAAIi2C,GAAQ91D,CAAAA,EAAIA,EAAI,EAAI8c,CAAAA,EACxCpL,EAAIwzB,MAAAA,CAAOvzC,EAAI2hF,EAAUn3E,EAAIk3E,GAC7B3hE,EAAIyzB,MAAAA,CAAOxzC,EAAI2hF,EAAUn3E,EAAIk3E,GAC7B3hE,EAAIwzB,MAAAA,CAAOvzC,EAAI4hF,EAAUp3E,EAAIi3E,GAC7B1hE,EAAIyzB,MAAAA,CAAOxzC,EAAI4hF,EAAUp3E,EAAIi3E,GAC7B,KACF,KAAK,OACHA,EAAUpzE,EAAIA,EAAI,EAAI3P,KAAKsvB,GAAAA,CAAIm2C,GAAOh5C,EACtCu2D,EAAUhjF,KAAKwvB,GAAAA,CAAIi2C,GAAOh5C,EAC1BpL,EAAIwzB,MAAAA,CAAOvzC,EAAIyhF,EAASj3E,EAAIk3E,GAC5B3hE,EAAIyzB,MAAAA,CAAOxzC,EAAIyhF,EAASj3E,EAAIk3E,GAC5B,KACF,KAAK,OACH3hE,EAAIwzB,MAAAA,CAAOvzC,EAAGwK,GACduV,EAAIyzB,MAAAA,CAAOxzC,EAAItB,KAAKsvB,GAAAA,CAAIm2C,GAAQ91D,CAAAA,EAAIA,EAAI,EAAI8c,CAAAA,EAAS3gB,EAAI9L,KAAKwvB,GAAAA,CAAIi2C,GAAOh5C,GACzE,KACF,KAAK,CAAA,EACHpL,EAAI6nC,SAAJ7nC,EAEJ,CAEAA,EAAIiB,IAAJjB,GACI9gB,EAAQmtB,WAAAA,CAAc,GACxBrM,EAAI0zB,MADN,GAGF,CAEA;;;;;;CAOO,EAAA,SAASi0D,GACd9xE,CAAY,CACZxP,CAAU,CACVsW,CAAe,EAIf,OAFAA,EAASA,GAAU,GAEZ,CAACtW,GAASwP,GAASA,EAAM51B,CAAAA,CAAIomB,EAAKH,IAAAA,CAAOyW,GAAU9G,EAAM51B,CAAAA,CAAIomB,EAAKL,KAAAA,CAAQ2W,GACjF9G,EAAMprB,CAAAA,CAAI4b,EAAK9X,GAAAA,CAAMouB,GAAU9G,EAAMprB,CAAAA,CAAI4b,EAAKJ,MAAAA,CAAS0W,CACzD,CAEO,SAASkwE,GAAS7sF,CAA6B,CAAEqG,CAAU,EAChErG,EAAI6yB,IAAJ7yB,GACAA,EAAIuzB,SAAJvzB,GACAA,EAAI+rC,IAAAA,CAAK1lC,EAAKH,IAAAA,CAAMG,EAAK9X,GAAAA,CAAK8X,EAAKL,KAAAA,CAAQK,EAAKH,IAAAA,CAAMG,EAAKJ,MAAAA,CAASI,EAAK9X,GAAzEyR,EACAA,EAAI8F,IAAJ9F,EACF,CAEO,SAAS+sF,GAAW/sF,CAA6B,EACtDA,EAAI+yB,OAAJ/yB,EACF,CAEA;;CAEC,EACM,SAASmxF,GACdnxF,CAA6B,CAC7BooC,CAAe,CACfrkD,CAAa,CACbk+E,CAAc,CACd7kE,CAAa,EAEb,GAAI,CAACgrC,EACH,OAAOpoC,EAAIyzB,MAAAA,CAAO1vC,EAAO9D,CAAAA,CAAG8D,EAAO0G,CADrC,EAGA,GAAI2S,AAAS,WAATA,EAAmB,CACrB,IAAM8kE,EAAW,AAAC95B,CAAAA,EAASnoD,CAAAA,CAAI8D,EAAO9D,CAAAA,AAAAA,EAAK,EAC3C+f,EAAIyzB,MAAAA,CAAOyuC,EAAU95B,EAAS39C,CAA9BuV,EACAA,EAAIyzB,MAAAA,CAAOyuC,EAAUn+E,EAAO0G,CAA5BuV,CACF,KAAW5C,AAAS,UAATA,GAAqB,CAAC,CAAC6kE,EAChCjiE,EAAIyzB,MAAAA,CAAO2U,EAASnoD,CAAAA,CAAG8D,EAAO0G,CADhC,EAGEuV,EAAIyzB,MAAAA,CAAO1vC,EAAO9D,CAAAA,CAAGmoD,EAAS39C,CAA9BuV,EAEFA,EAAIyzB,MAAAA,CAAO1vC,EAAO9D,CAAAA,CAAG8D,EAAO0G,CAA5BuV,CACF,CAEA;;CAGO,EAAA,SAASoxF,GACdpxF,CAA6B,CAC7BooC,CAAqB,CACrBrkD,CAAmB,CACnBk+E,CAAc,EAEd,GAAI,CAAC75B,EACH,OAAOpoC,EAAIyzB,MAAAA,CAAO1vC,EAAO9D,CAAAA,CAAG8D,EAAO0G,CADrC,EAGAuV,EAAImiE,aAAAA,CACFF,EAAO75B,EAASg6B,IAAAA,CAAOh6B,EAASi6B,IAAAA,CAChCJ,EAAO75B,EAASk6B,IAAAA,CAAOl6B,EAASm6B,IAAAA,CAChCN,EAAOl+E,EAAOs+E,IAAAA,CAAOt+E,EAAOq+E,IAAAA,CAC5BH,EAAOl+E,EAAOw+E,IAAAA,CAAOx+E,EAAOu+E,IAAAA,CAC5Bv+E,EAAO9D,CAAAA,CACP8D,EAAO0G,CANTuV,CAOF,CA+DA;;CAEC,EACM,SAAS8sF,GACd9sF,CAA6B,CAC7BtL,CAAuB,CACvBzU,CAAS,CACTwK,CAAS,CACTkK,CAAoB,CACpBhO,EAAuB,CAAA,CAAE,MAIrBvH,EAAWi3B,EAFf,IAAMmQ,EAAQ96B,EAAQgJ,GAAQA,EAAO,CAACA,EAAK,CACrCg/B,EAAS/sC,EAAKwrC,WAAAA,CAAc,GAAKxrC,AAAqB,KAArBA,EAAKsrC,WAAAA,CAO5C,IAJAjyB,EAAI6yB,IAAJ7yB,GACAA,EAAIrL,IAAAA,CAAOA,EAAK45B,MAAhBvuB,CA5EIrZ,AA6EeA,EA7EV+rC,WAAAA,EACP1yB,AA4EYA,EA5ER6sC,SAAAA,CAAUlmD,AA4EGA,EA5EE+rC,WAAW,CAAC,EAAE,CAAE/rC,AA4ElBA,EA5EuB+rC,WAAW,CAAC,EAAE,EAGnD8yD,EAAc7+F,AAyEAA,EAzEKukB,QAAAA,GACtBlL,AAwEYA,EAxER+qD,MAAAA,CAAOpkE,AAwEMA,EAxEDukB,QADlB,EAIIvkB,AAqEeA,EArEVuN,KAAAA,EACP8L,CAAAA,AAoEYA,EApERgM,SAAAA,CAAYrlB,AAoECA,EApEIuN,KADvB,AAAA,EAIIvN,AAiEeA,EAjEV0qC,SAAAA,EACPrxB,CAAAA,AAgEYA,EAhERqxB,SAAAA,CAAY1qC,AAgECA,EAhEI0qC,SADvB,AAAA,EAII1qC,AA6DeA,EA7DVgrC,YAAAA,EACP3xB,CAAAA,AA4DYA,EA5DR2xB,YAAAA,CAAehrC,AA4DFA,EA5DOgrC,YAD1B,AAAA,EA+DKvyC,EAAI,EAAGA,EAAIonC,EAAMjqC,MAAAA,CAAQ,EAAE6C,EAC9Bi3B,EAAOmQ,CAAK,CAACpnC,EAAE,CAEXuH,EAAKmrC,QAAAA,EACP6qE,AA/BN,SAAsB38F,CAA6B,CAAErZ,CAAqB,EACxE,IAAM87E,EAAWziE,EAAIgM,SAArB,AAEAhM,CAAAA,EAAIgM,SAAAA,CAAYrlB,EAAKuN,KAArB8L,CACAA,EAAI8yB,QAAAA,CAASnsC,EAAKuf,IAAAA,CAAMvf,EAAK4H,GAAAA,CAAK5H,EAAKwK,KAAAA,CAAOxK,EAAK4mB,MAAnDvN,EACAA,EAAIgM,SAAAA,CAAYy2D,CAClB,EAyBmBziE,EAAKrZ,EAAKmrC,QADzB,EAII4B,IACE/sC,EAAKsrC,WAAAA,EACPjyB,CAAAA,EAAIiM,WAAAA,CAActlB,EAAKsrC,WADzB,AAAA,EAIKuzD,EAAc7+F,EAAKwrC,WAAAA,GACtBnyB,CAAAA,EAAIoM,SAAAA,CAAYzlB,EAAKwrC,WADvB,AAAA,EAIAnyB,EAAI0iE,UAAAA,CAAWrsD,EAAMp2B,EAAGwK,EAAG9D,EAAKooB,QAAhC/O,GAGFA,EAAIg2C,QAAAA,CAAS3/B,EAAMp2B,EAAGwK,EAAG9D,EAAKooB,QAA9B/O,EACA08F,AA9EJ,SACE18F,CAA6B,CAC7B/f,CAAS,CACTwK,CAAS,CACT4rB,CAAY,CACZ1vB,CAAoB,EAEpB,GAAIA,EAAKsvD,aAAAA,EAAiBtvD,EAAKi8E,SAAAA,CAAW,CACxC;;;;;;KAMC,EACD,IAAMC,EAAU7iE,EAAIm0C,WAAAA,CAAY99B,GAC1BnQ,EAAOjmB,EAAI4iF,EAAQC,qBAAzB,CACM98D,EAAQ/lB,EAAI4iF,EAAQE,sBAA1B,CACMx0E,EAAM9D,EAAIo4E,EAAQG,uBAAxB,CACM/8D,EAASxb,EAAIo4E,EAAQI,wBAA3B,CACMC,EAAcv8E,EAAKsvD,aAAAA,CAAiB1nD,AAAAA,CAAAA,EAAM0X,CAAAA,EAAU,EAAIA,CAE9DjG,CAAAA,EAAIiM,WAAAA,CAAcjM,EAAIgM,SAAtBhM,CACAA,EAAIuzB,SAAJvzB,GACAA,EAAIoM,SAAAA,CAAYzlB,EAAKw8E,eAAAA,EAAmB,EACxCnjE,EAAIwzB,MAAAA,CAAOttB,EAAMg9D,GACjBljE,EAAIyzB,MAAAA,CAAOztB,EAAOk9D,GAClBljE,EAAI0zB,MAAJ1zB,EACD,CACH,EAiDiBA,EAAK/f,EAAGwK,EAAG4rB,EAAM1vB,GAE9B8D,GAAK3F,OAAO6P,EAAK8xB,UAAjBh8B,EAGFuV,EAAI+yB,OAAJ/yB,EACF,CAEA;;;;CAIC,EACM,SAAS8yF,GACd9yF,CAA6B,CAC7B+rC,CAA2C,EAE3C,GAAM,CAAA,EAAC9rD,CAAC,CAAA,EAAEwK,CAAC,CAAA,EAAE6D,CAAC,CAAA,EAAEnB,CAAC,CAAA,OAAEie,CAAM,CAAC,CAAG2gC,E,e;AAG7B/rC,EAAI4P,GAAAA,CAAI3vB,EAAImrB,EAAO4iC,OAAAA,CAASvjD,EAAI2gB,EAAO4iC,OAAAA,CAAS5iC,EAAO4iC,OAAAA,CAAS,IAAM1G,EAAIA,EAAI,CAAA,G,oC;AAG9EtnC,EAAIyzB,MAAAA,CAAOxzC,EAAGwK,EAAI0C,EAAIie,EAAO8iC,UAA7BluC,E,kB;AAGAA,EAAI4P,GAAAA,CAAI3vB,EAAImrB,EAAO8iC,UAAAA,CAAYzjD,EAAI0C,EAAIie,EAAO8iC,UAAAA,CAAY9iC,EAAO8iC,UAAAA,CAAY5G,EAAIm/C,EAAS,CAAA,G,wC;AAG1FzmF,EAAIyzB,MAAAA,CAAOxzC,EAAIqO,EAAI8c,EAAO+iC,WAAAA,CAAa1jD,EAAI0C,G,mB;AAG3C6S,EAAI4P,GAAAA,CAAI3vB,EAAIqO,EAAI8c,EAAO+iC,WAAAA,CAAa1jD,EAAI0C,EAAIie,EAAO+iC,WAAAA,CAAa/iC,EAAO+iC,WAAAA,CAAas4C,EAAS,EAAG,CAAA,G,sC;AAGhGzmF,EAAIyzB,MAAAA,CAAOxzC,EAAIqO,EAAG7D,EAAI2gB,EAAO6iC,QAA7BjuC,E,gB;AAGAA,EAAI4P,GAAAA,CAAI3vB,EAAIqO,EAAI8c,EAAO6iC,QAAAA,CAAUxjD,EAAI2gB,EAAO6iC,QAAAA,CAAU7iC,EAAO6iC,QAAAA,CAAU,EAAG,CAACw4C,EAAS,CAAA,G,kC;AAGpFzmF,EAAIyzB,MAAAA,CAAOxzC,EAAImrB,EAAO4iC,OAAAA,CAASvjD,EACjC,CCpgBA,IAAMmyG,GAAc,uCACdC,GAAa,wEAmCbE,GAAe,AAAChlH,GAAe,CAACA,GAAK,EAQpC,SAAS24G,GAAkBnwG,CAAsC,CAAEyD,CAAwC,EAChH,IAAMkhC,EAAM,CAAA,EACNq+C,EAAWigB,EAASx/F,GACpB2N,EAAO4xE,EAAWtrF,OAAO0Z,IAAAA,CAAK3N,GAASA,EACvCw/E,EAAOggB,EAASjjG,GAClBgjF,EACE3zE,AAAAA,GAAQm1F,EAAexkG,CAAK,CAACqP,EAAK,CAAErP,CAAK,CAACyD,CAAK,CAAC4L,EAAK,CAAC,EACtDA,AAAAA,GAAQrP,CAAK,CAACqP,EAAK,CACrB,IAAMrP,EAEV,IAAK,IAAMqP,KAAQ+B,EACjBuzB,CAAG,CAACt1B,EAAK,CAAGmtG,GAAav5B,EAAK5zE,IAEhC,OAAOs1B,CACT,CAEA;;;;;;;CAOC,EACM,SAASqtE,GAAOhyG,CAA4B,EACjD,OAAOmwG,GAAkBnwG,EAAO,CAACgO,IAAK,IAAKyX,MAAO,IAAKC,OAAQ,IAAKC,KAAM,GAAG,EAC/E,CAEA;;;;;;CAMC,EACM,SAASssF,GAAcjyG,CAA2B,EACvD,OAAOmwG,GAAkBnwG,EAAO,CAAC,UAAW,WAAY,aAAc,cAAc,CACtF,CAEA;;;;;;;CAOC,EACM,SAAS4oG,GAAU5oG,CAAqB,EAC7C,IAAMmP,EAAM6iG,GAAOhyG,GAKnB,OAHAmP,EAAIyB,KAAAA,CAAQzB,EAAIwW,IAAAA,CAAOxW,EAAIsW,KAA3BtW,CACAA,EAAI6d,MAAAA,CAAS7d,EAAInB,GAAAA,CAAMmB,EAAIuW,MAA3BvW,CAEOA,CACT,CAEA;;;;;;CAMC,EAEM,SAASq8F,GAAO7sG,CAA0B,CAAEonC,CAA4B,EAC7EpnC,EAAUA,GAAW,CAAA,EACrBonC,EAAWA,GAAY1mB,GAASjL,IAAhC2xB,CAEA,IAAI1xB,EAAOmwF,EAAe7lG,EAAQ0V,IAAAA,CAAM0xB,EAAS1xB,IAAjD,CAEoB,CAAA,UAAhB,OAAOA,GACTA,CAAAA,EAAO6uE,SAAS7uE,EAAM,GADxB,EAGA,IAAImX,EAAQg5E,EAAe7lG,EAAQ6sB,KAAAA,CAAOua,EAASva,KAAnD,EACIA,GAAS,CAAE,AAAA,CAAA,GAAKA,CAAAA,EAAO23D,KAAAA,CAAMm5B,MAC/Bn8G,QAAQygB,IAAAA,CAAK,kCAAoC4K,EAAQ,KACzDA,EAAQpnB,KAAAA,GAGV,IAAMgQ,EAAO,CACX6rE,OAAQukB,EAAe7lG,EAAQshF,MAAAA,CAAQl6C,EAASk6C,MAAhDA,EACA/5C,WAAYq2E,AA1HhB;;;C,E;;;;;;;CAWC,EACM,SAAsBv8G,CAAsB,CAAEqU,CAAY,EAC/D,IAAMgvE,EAAU,AAAC,CAAA,GAAKrjF,CAAAA,EAAOmjF,KAAAA,CAAMk5B,IACnC,GAAI,CAACh5B,GAAWA,AAAe,WAAfA,CAAO,CAAC,EAAE,CACxB,OAAOhvE,AAAO,IAAPA,EAKT,OAFArU,EAAQ,CAACqjF,CAAO,CAAC,EAAE,CAEXA,CAAO,CAAC,EAAE,EAChB,IAAK,KACH,OAAOrjF,CACT,KAAK,IACHA,GAAS,GAIb,CAEA,OAAOqU,EAAOrU,CAChB,EA2F6BwkG,EAAe7lG,EAAQunC,UAAAA,CAAYH,EAASG,UAAAA,EAAa7xB,GAClFA,KAAAA,EACAmX,MAAAA,EACAsE,OAAQ00E,EAAe7lG,EAAQmxB,MAAAA,CAAQiW,EAASjW,MAAhDA,EACAke,OAAQ,EACV,EAGA,OADA55B,EAAK45B,MAAAA,CDjHL,AAAI,CCiHuB55B,GDjHd6wF,EAAc7wF,ACiHAA,EDjHKC,IAAAA,GAAS4wF,EAAc7wF,ACiH5BA,EDjHiC6rE,MAAAA,EACnD,KAGD7rE,AAAAA,CAAAA,AC6GmBA,ED7GdoX,KAAAA,CAAQpX,AC6GMA,ED7GDoX,KAAAA,CAAQ,IAAM,EAAA,EACrCpX,CAAAA,AC4GwBA,ED5GnB0b,MAAAA,CAAS1b,AC4GUA,ED5GL0b,MAAAA,CAAS,IAAM,EAAA,EACnC1b,AC2GyBA,ED3GpBC,IAAAA,CAAO,MACZD,AC0GyBA,ED1GpB6rE,MAHP,CC8GO7rE,CACT,CAEA;;;;;;;;;;CAWO,EAAA,SAASswE,GAAQpB,CAAsB,CAAEh9D,CAAgB,CAAEhK,CAAc,CAAEinE,CAA6B,EAC7G,IACI1kF,EAAWsd,EAAcnc,EADzBwjF,EAAY,CAAA,EAGhB,IAAK3kF,EAAI,EAAGsd,EAAOmnE,EAAOtnF,MAAAA,CAAQ6C,EAAIsd,EAAM,EAAEtd,EAE5C,GAAImB,AAAUoE,KAAAA,IADdpE,CAAAA,EAAQsjF,CAAM,CAACzkF,EAAE,AAAFA,IAICuF,KAAAA,IAAZkiB,GAAyB,AAAiB,YAAjB,OAAOtmB,IAClCA,EAAQA,EAAMsmB,GACdk9D,EAAY,CAAA,GAEAp/E,KAAAA,IAAVkY,GAAuBnR,EAAQnL,KACjCA,EAAQA,CAAK,CAACsc,EAAQtc,EAAMhE,MAAAA,CAAO,CACnCwnF,EAAY,CAAA,GAEVxjF,AAAUoE,KAAAA,IAAVpE,GAIF,OAHIujF,GAAQ,CAACC,GACXD,CAAAA,EAAKC,SAAAA,CAAY,CAAA,CADnB,EAGOxjF,CAGb,CAEA;;;;;CAMO,EAAA,SAASgsG,GAAUvoB,CAAqC,CAAEr7C,CAAsB,CAAEnY,CAAoB,EAC3G,GAAM,CAAA,IAACpuB,CAAAA,CAAAA,IAAKN,CAAAA,CAAI,CAAGkiF,EACbpkD,EAASgnE,EAAYj+D,EAAQ7mC,AAAAA,CAAAA,EAAMM,CAAAA,EAAO,GAC1C6hF,EAAW,CAAC1jF,EAAewX,IAAgByY,GAAejwB,AAAU,IAAVA,EAAc,EAAIA,EAAQwX,EAC1F,MAAO,CACL3V,IAAK6hF,EAAS7hF,EAAK,CAACzD,KAAKyK,GAAAA,CAAIw2B,IAC7B99B,IAAKmiF,EAASniF,EAAK89B,EACrB,CACF,CAUO,SAAS4kE,GAActgB,CAAqB,CAAEr9D,CAAe,EAClE,OAAO5uB,OAAOyjB,MAAAA,CAAOzjB,OAAOsN,MAAAA,CAAO2+E,GAAgBr9D,EACrD,CC7LA;;;;;;;;;CASC,EACM,SAASsoF,GAId5rF,CAAS,CACT+D,EAAW,CAAC,GAAG,CACf68D,CAAc,CACd79C,CAA4B,CAC5B89C,EAAY,IAAM7gE,CAAM,CAAC,EAAE,EAE3B,IAAM8gE,EAAkBF,GAAc5gE,CACd,MAAA,IAAb+iB,GACTA,CAAAA,EAAW02E,GAAS,YAAaz5F,EADnC,EAGA,IAAM2D,EAA6B,CACjC,CAACziB,OAAO8/E,WAAAA,CAAW,CAAG,SACtB18D,WAAY,CAAA,EACZyvD,QAAS/zD,EACTihE,YAAaH,EACbxgB,UAAWv9B,EACXm+C,WAAYL,EACZlsD,SAAU,AAAC8c,GAAqBm6D,GAAgB,CAACn6D,KAAUzxB,EAAO,CAAE+D,EAAU+8D,EAAiB/9C,EACjG,EACA,OAAO,IAAIuwC,MAAM3vD,EAAO,CACtB;;KAEC,EACD4vD,eAAAA,CAAe/yE,EAAQ6L,KACrB,OAAO7L,CAAM,CAAC6L,EAAK,CACnB,OAAO7L,EAAO2gF,KAAAA,CACd,OAAOnhE,CAAM,CAAC,EAAE,CAAC3T,EAAK,CACf,CAAA,GAGT;;KAEC,EACDzX,IAAAA,CAAI4L,EAAQ6L,IACHqtG,GAAQl5G,EAAQ6L,EACrB,IAAMstG,AAoUd,CAAA,SACEttG,CAAY,CACZ0X,CAAkB,CAClB/D,CAAmB,CACnBggB,CAAoB,EAEpB,IAAIhjC,EACJ,IAAK,IAAMyjD,KAAU18B,EAEnB,GAAI,AAAiB,KAAA,IADrB/mB,CAAAA,EAAQy8G,GAASK,GAAQr5D,EAAQp0C,GAAO2T,EAAxChjB,EAEE,OAAO+8G,GAAiB1tG,EAAMrP,GAC1Bk9G,GAAkBl6F,EAAQggB,EAAO3zB,EAAMrP,GACvCA,CAGV,CAAA,EAnVmCqP,EAAM0X,EAAU/D,EAAQxf,IAGvD;;;KAGC,EACDyzE,yBAAAA,CAAyBzzE,EAAQ6L,IACxB6nE,QAAQD,wBAAAA,CAAyBzzE,EAAOuzE,OAAO,CAAC,EAAE,CAAE1nE,GAG7D;;KAEC,EACDylC,eAAAA,IACSoiC,QAAQpiC,cAAAA,CAAe9xB,CAAM,CAAC,EAAE,EAGzC;;KAEC,EACDvL,IAAAA,CAAIjU,EAAQ6L,IACHutG,GAAqBp5G,GAAQgQ,QAAAA,CAASnE,GAG/C;;KAGA8nE,EAAAA,QAAAA,AAAQ3zE,GACCo5G,GAAqBp5G,GAG9B;;KAEC,EACD3L,IAAI2L,CAAM,CAAE6L,CAAY,CAAErP,CAAK,EAC7B,IAAMukF,EAAU/gF,EAAOghF,QAAAA,EAAahhF,CAAAA,EAAOghF,QAAAA,CAAWX,GAAAA,EAGtD,OAFArgF,CAAM,CAAC6L,EAAK,CAAGk1E,CAAO,CAACl1E,EAAK,CAAGrP,EAC/B,OAAOwD,EAAO2gF,KAAAA,CACP,CAAA,CACT,CACF,EACF,CAyFA;;CAEC,EACM,SAASxsC,GACd3U,CAAoB,CACpB3jB,EAA+B,CAACk5B,WAAY,CAAA,EAAMC,UAAW,CAAA,CAAI,CAAC,EAElE,GAAM,CAAA,YAACxtB,EAAc3L,EAASk5B,UAAAA,CAAAA,WAAYrtB,EAAa7L,EAASm5B,SAAAA,CAAAA,SAAWisC,EAAWplE,EAASo5B,OAAAA,CAAQ,CAAGzV,EAC1G,MAAO,CACLyV,QAASgsC,EACTlsC,WAAYvtB,EACZwtB,UAAWttB,EACX0wB,aAAc8yD,EAAW1jF,GAAeA,EAAc,IAAMA,EAC5D6wB,YAAa6yD,EAAWxjF,GAAcA,EAAa,IAAMA,CAC3D,CACF,CAEA,IAAM4xF,GAAU,CAACr5D,EAAgBx4B,IAAiBw4B,EAASA,EAASspD,EAAY9hF,GAAQA,EAClF8xF,GAAmB,CAAC1tG,EAAcrP,IAAmBijG,EAASjjG,IAAUqP,AAAS,aAATA,GAC3E3X,CAAAA,AAAiC,OAAjCA,OAAOo9C,cAAAA,CAAe90C,IAAmBA,EAAMiF,WAAAA,GAAgBvN,MAAAA,EAElE,SAASglH,GACPl5G,CAAiB,CACjB6L,CAAY,CACZq1E,CAAsB,EAEtB,GAAIhtF,OAAOkN,SAAAA,CAAUy0E,cAAAA,CAAergF,IAAAA,CAAKwK,EAAQ6L,GAC/C,OAAO7L,CAAM,CAAC6L,EAAK,CAGrB,IAAMrP,EAAQ0kF,IAGd,O,2B;AADAlhF,CAAM,CAAC6L,EAAK,CAAGrP,EACRA,EACT,CA2EA,IAAM+7G,GAAW,CAAC/4G,EAAwBqjB,IAAsBrjB,AAAQ,CAAA,IAARA,EAAeqjB,EAC3E,AAAe,UAAf,OAAOrjB,EAAmB2hG,EAAiBt+E,EAAQrjB,GAAOoB,KAAAA,EA4B9D,SAAS84G,GACPt4B,CAAyB,CACzBppC,CAAuB,CACvBnsC,CAAuB,CACvBrP,CAAc,MAxCd+lC,EA0CA,IAAM69C,EAAapoC,EAASyoC,WAA5B,CACMl+C,EAvCC2oE,EAJP3oE,EA2CiCyV,EAAS8nB,SAAAA,EAvCZv9B,EAuCuB12B,EAAMrP,GAvCL+lC,EAwChD8+C,EAAY,IAAID,KAAiBhB,EAAW,CAC5C/rF,EAAM,IAAIwiD,IAChBxiD,EAAI2f,GAAAA,CAAIxX,GACR,IAAIgD,EAAMq6G,GAAiBxlH,EAAKgtF,EAAWx1E,EAAM02B,GAAY12B,EAAMrP,UACnE,AAAY,OAARgD,GAGA,CAAA,AAAoB,KAAA,IAAb+iC,GAA4BA,IAAa12B,GAE9CrM,AAAQ,OADZA,CAAAA,EAAMq6G,GAAiBxlH,EAAKgtF,EAAW9+C,EAAU/iC,EAAKhD,EAAtDgD,CADkDqM,GAM7Cu/F,GAAgB1jG,MAAMgN,IAAAA,CAAKrgB,GAAM,CAAC,GAAG,CAAE+rF,EAAY79C,EACxD,IAAMu3E,AAgBV,CAAA,SACE9hE,CAAuB,CACvBnsC,CAAY,CACZrP,CAAc,EAEd,IAAMqmB,EAASm1B,EAAS0oC,UAAxB,GACM70E,KAAQgX,GACZA,CAAAA,CAAM,CAAChX,EAAK,CAAG,CAAA,CAAA,EAEjB,IAAM7L,EAAS6iB,CAAM,CAAChX,EAAK,QAC3B,AAAIlE,EAAQ3H,IAAWy/F,EAASjjG,GAEvBA,EAEFwD,GAAU,CAAA,CACnB,CAAA,EA/BuBg4C,EAAUnsC,EAAgBrP,GACjD,CAEA,SAASq9G,GACPxlH,CAAmB,CACnBgtF,CAAsB,CACtB7hF,CAAsB,CACtB+iC,CAA2B,CAC3BtvB,CAAa,EAEb,KAAOzT,GACLA,EAAMo6G,AA3DV,SACEvlH,CAAmB,CACnB+sF,CAAyB,CACzB5hF,CAAsB,CACtBiiF,CAAiC,CACjCjlF,CAAc,EAEd,IAAK,IAAMqmB,KAAUu+D,EAAc,CACjC,IAAMnwC,EAAQsnE,GAAS/4G,EAAKqjB,GAC5B,GAAIouB,EAAO,KAnBb1O,EAoBIluC,EAAI2f,GAAAA,CAAIi9B,GACR,IAAM1O,EAjBH2oE,EAJP3oE,EAqBqC0O,EAAM6uB,SAAAA,EAjBbv9B,EAiBwB/iC,EAAKhD,GAjBL+lC,EAkBlD,GAAI,AAAoB,KAAA,IAAbA,GAA4BA,IAAa/iC,GAAO+iC,IAAak/C,E,8C;AAGtE,OAAOl/C,CAEJ,MAAA,GAAI0O,AAAU,CAAA,IAAVA,GAAmB,AAA0B,KAAA,IAAnBwwC,GAAkCjiF,IAAQiiF,E,gG;AAG7E,OAAO,IAEX,CACA,MAAO,CAAA,CACT,EAmCoBptF,EAAKgtF,EAAW7hF,EAAK+iC,EAAUtvB,GAEjD,OAAOzT,CACT,CAoCA,SAASy5G,GAASz5G,CAAW,CAAEggB,CAAmB,EAChD,IAAK,IAAMyxB,KAASzxB,EAAQ,CAC1B,GAAI,CAACyxB,EACH,SAEF,IAAMz0C,EAAQy0C,CAAK,CAACzxC,EAAI,CACxB,GAAI,AAAiB,KAAA,IAAVhD,EACT,OAAOA,CAEX,CACF,CAEA,SAAS48G,GAAqBp5G,CAAqB,EACjD,IAAI4N,EAAO5N,EAAO2gF,KAAlB,CAIA,OAHK/yE,GACHA,CAAAA,EAAO5N,EAAO2gF,KAAAA,CAAQo5B,AAK1B,SAAkCv6F,CAAmB,EACnD,IAAMnrB,EAAM,IAAIwiD,IAChB,IAAK,IAAM5F,KAASzxB,EAClB,IAAK,IAAMhgB,KAAOtL,OAAO0Z,IAAAA,CAAKqjC,GAAO10C,MAAAA,CAAO+F,AAAAA,GAAK,CAACA,EAAEqlB,UAAAA,CAAW,MAC7DtzB,EAAI2f,GAAAA,CAAIxU,GAGZ,OAAOkI,MAAMgN,IAAAA,CAAKrgB,EACpB,EAbmD2L,EAAOuzE,OADxD,CAAA,EAGO3lE,CACT,CAYO,SAASs1F,GACd3pF,CAAmC,CACnCpQ,CAAiB,CACjByJ,CAAa,CACbvF,CAAa,MAKThS,EAAyByd,EAAe7F,EAH5C,GAAM,CAAA,OAACiH,CAAM,CAAC,CAAGX,EACX,CAAA,IAAC/Z,EAAM,GAAA,CAAI,CAAG,IAAI,CAAC6c,QAAzB,CACMvC,EAAS,AAAIpS,MAAoB2F,GAGvC,IAAKhS,EAAI,EAAiBA,EAAPgS,EAAiB,EAAEhS,EAEpC4X,EAAO9J,CAAI,CADX2P,EAAQzd,EAAIuX,EACM,CAClBkH,CAAM,CAACze,EAAE,CAAG,CACVsL,EAAGuT,EAAOxa,KAAAA,CAAMyhG,EAAiBluF,EAAMzT,GAAMsZ,EAC/C,EAEF,OAAOgB,CACT,CClcA,IAAM8nE,GAAU7gF,OAAO6gF,OAAAA,EAAW,MAG5Bo4B,GAAW,CAACnoF,EAAuBx2B,IAAmCA,EAAIw2B,EAAOr5B,MAAAA,EAAU,CAACq5B,CAAM,CAACx2B,EAAE,CAAC42B,IAAAA,EAAQJ,CAAM,CAACx2B,EAAE,CACvH4+G,GAAe,AAACxqG,GAAyBA,AAAc,MAAdA,EAAoB,IAAM,IAmJzE,SAAS6qG,GAAgBzgD,CAAU,CAAEx7D,CAAW,CAAEN,CAAW,EAC3D,OAAOnD,KAAKmD,GAAAA,CAAInD,KAAKyD,GAAAA,CAAIw7D,EAAI97D,GAAMM,EACrC,CAwBA;;CAEC,EACM,SAAS4vG,GACdp8E,CAAqB,CACrB12B,CAAO,CACPmnB,CAAe,CACf1M,CAAa,CACbnG,CAAoB,EAEpB,IAAIpU,EAAWsd,EAAcmZ,EAAoBkwD,EAOjD,GAJI7mF,EAAQk3B,QAAAA,EACVR,CAAAA,EAASA,EAAOt1B,MAAAA,CAAO,AAACs9D,GAAO,CAACA,EAAG5nC,IADrC,CAAA,EAII92B,AAAmC,aAAnCA,EAAQ6pD,sBAAAA,EACVq1D,AArFJ;;;;;CAKC,EACM,SAA6BxoF,CAAqB,CAAEpiB,EAAuB,GAAG,MAO/EpU,EAAG6mF,EAAkCC,EANzC,IAAMC,EAAY63B,GAAaxqG,GACzB4yE,EAAYxwD,EAAOr5B,MAAzB,CACM8pF,EAAmB56E,MAAM26E,GAAWnlE,IAAAA,CAAK,GACzCqlE,EAAe76E,MAAM26E,GAIvBG,EAAaw3B,GAASnoF,EAAQ,GAElC,IAAKx2B,EAAI,EAAGA,EAAIgnF,EAAW,EAAEhnF,EAI3B,GAHA6mF,EAAcC,EACdA,EAAeK,EACfA,EAAaw3B,GAASnoF,EAAQx2B,EAAI,GAC7B8mF,GAIL,GAAIK,EAAY,CACd,IAAMC,EAAaD,CAAU,CAAC/yE,EAAU,CAAG0yE,CAAY,CAAC1yE,EAAU,A,+E;AAGlE6yE,CAAM,CAACjnF,EAAE,CAAGonF,AAAe,IAAfA,EAAoBD,AAAAA,CAAAA,CAAU,CAACJ,EAAU,CAAGD,CAAY,CAACC,EAAAA,AAAAA,EAAcK,EAAa,CACjG,CACDF,CAAE,CAAClnF,EAAE,CAAG,AAAC6mF,EACL,AAACM,EACE9L,EAAK4L,CAAM,CAACjnF,EAAI,EAAE,IAAMq7E,EAAK4L,CAAM,CAACjnF,EAAE,EAAK,EACzCinF,AAAAA,CAAAA,CAAM,CAACjnF,EAAI,EAAE,CAAGinF,CAAM,CAACjnF,EAAE,AAAFA,EAAM,EAFpBinF,CAAM,CAACjnF,EAAI,EAAE,CADRinF,CAAM,CAACjnF,EAAE,CAMlC8+G,AAlGF;;CAEC,EACD,CAAA,SAAwBtoF,CAAqB,CAAEywD,CAAgB,CAAEC,CAAY,MAGvEI,EAAgBC,EAAeC,EAAcC,EAA0BX,EAF3E,IAAME,EAAYxwD,EAAOr5B,MAAzB,CAGIgqF,EAAaw3B,GAASnoF,EAAQ,GAClC,IAAK,IAAIx2B,EAAI,EAAGA,EAAIgnF,EAAY,EAAG,EAAEhnF,EAGnC,GAFA8mF,EAAeK,EACfA,EAAaw3B,GAASnoF,EAAQx2B,EAAI,GAC9B,AAAC8mF,GAAiBK,GAItB,GAAI0xB,EAAa5xB,CAAM,CAACjnF,EAAE,CAAE,EAAGumF,IAAU,CACvCW,CAAE,CAAClnF,EAAE,CAAGknF,CAAE,CAAClnF,EAAI,EAAE,CAAG,EACpB,QACD,CAIDynF,CAAAA,EAAmBloF,KAAKiL,GAAAA,CAFxB88E,EAASJ,CAAE,CAAClnF,EAAE,CAAGinF,CAAM,CAACjnF,EAAE,CAEU,GAAKT,KAAKiL,GAAAA,CAD9C+8E,EAAQL,CAAE,CAAClnF,EAAI,EAAE,CAAGinF,CAAM,CAACjnF,EAAE,CAC4B,EAAzDynF,GACwB,IAIxBD,EAAO,EAAIjoF,KAAKC,IAAAA,CAAKioF,GACrBP,CAAE,CAAClnF,EAAE,CAAGsnF,EAASE,EAAOP,CAAM,CAACjnF,EAAE,CACjCknF,CAAE,CAAClnF,EAAI,EAAE,CAAGunF,EAAQC,EAAOP,CAAM,CAACjnF,EAAE,EAExC,CAAA,EAmEiBw2B,EAAQywD,EAAQC,GAE/B63B,AAnEF,SAAyBvoF,CAAqB,CAAE0wD,CAAY,CAAE9yE,EAAuB,GAAG,MAGlFssE,EAAemG,EAAkCC,EAFrD,IAAMC,EAAY63B,GAAaxqG,GACzB4yE,EAAYxwD,EAAOr5B,MAAzB,CAEIgqF,EAAaw3B,GAASnoF,EAAQ,GAElC,IAAK,IAAIx2B,EAAI,EAAGA,EAAIgnF,EAAW,EAAEhnF,EAAG,CAIlC,GAHA6mF,EAAcC,EACdA,EAAeK,EACfA,EAAaw3B,GAASnoF,EAAQx2B,EAAI,GAC9B,CAAC8mF,EACH,SAGF,IAAMpwD,EAASowD,CAAY,CAAC1yE,EAAU,CAChCuiB,EAASmwD,CAAY,CAACC,EAAU,CAClCF,IACFnG,EAAShqD,AAAAA,CAAAA,EAASmwD,CAAW,CAACzyE,EAAAA,AAAAA,EAAc,EAC5C0yE,CAAY,CAAC,CAAC,GAAG,EAAE1yE,EAAU,CAAC,CAAC,CAAGsiB,EAASgqD,EAC3CoG,CAAY,CAAC,CAAC,GAAG,EAAEC,EAAU,CAAC,CAAC,CAAGpwD,EAAS+pD,EAAQwG,CAAE,CAAClnF,EAAE,EAEtDmnF,IACFzG,EAASyG,AAAAA,CAAAA,CAAU,CAAC/yE,EAAU,CAAGsiB,CAAAA,EAAU,EAC3CowD,CAAY,CAAC,CAAC,GAAG,EAAE1yE,EAAU,CAAC,CAAC,CAAGsiB,EAASgqD,EAC3CoG,CAAY,CAAC,CAAC,GAAG,EAAEC,EAAU,CAAC,CAAC,CAAGpwD,EAAS+pD,EAAQwG,CAAE,CAAClnF,EAAE,CAE5D,CACF,EAwCkBw2B,EAAQ0wD,EAAI9yE,EAC9B,EA8CwBoiB,EAAQpiB,OACvB,CACL,IAAIsQ,EAAOnK,EAAOic,CAAM,CAACA,EAAOr5B,MAAAA,CAAS,EAAE,CAAGq5B,CAAM,CAAC,EAAE,CACvD,IAAKx2B,EAAI,EAAGsd,EAAOkZ,EAAOr5B,MAAAA,CAAQ6C,EAAIsd,EAAM,EAAEtd,EAE5C2mF,EAAgBk4B,AAlMf,SACL9mF,CAAuB,CACvB6vD,CAAwB,CACxBC,CAAuB,CACvB75E,CAAS,E,oF;A,kE;A,mD;AAUT,IAAMg7C,EAAWjxB,EAAWnB,IAAAA,CAAOgxD,EAAc7vD,EAE3CpwB,EAAOkgF,EAAWjxD,IAAAA,CAAOgxD,EAAcC,EACvCC,EAAMqvB,EAFIvvB,EAE2B5+B,GACrC++B,EAAMovB,EAAsBxvG,EAHlBigF,GAKZI,EAAMF,EAAOA,CAAAA,EAAMC,CAAAA,EACnBE,EAAMF,EAAOD,CAAAA,EAAMC,CAAAA,C,qD;AAGvBC,EAAMt3D,MAAMs3D,GAAO,EAAIA,EACvBC,EAAMv3D,MAAMu3D,GAAO,EAAIA,EAEvB,IAAMC,EAAKl6E,EAAIg6E,EACTG,EAAKn6E,EAAIi6E,CADf,kCAAA;AAGA,MAAO,CACLj/B,SAAU,CACRnoD,EAAGw5E,AAjBSuN,EAiBD/mF,CAAAA,CAAIqnF,EAAMvgF,CAAAA,EAAK9G,CAAAA,CAAImoD,EAASnoD,CAAAA,AAAAA,EACvCwK,EAAGgvE,AAlBSuN,EAkBDv8E,CAAAA,CAAI68E,EAAMvgF,CAAAA,EAAK0D,CAAAA,CAAI29C,EAAS39C,CAAAA,AAAAA,CACzC,EACA1D,KAAM,CACJ9G,EAAGw5E,AArBSuN,EAqBD/mF,CAAAA,CAAIsnF,EAAMxgF,CAAAA,EAAK9G,CAAAA,CAAImoD,EAASnoD,CAAAA,AAAAA,EACvCwK,EAAGgvE,AAtBSuN,EAsBDv8E,CAAAA,CAAI88E,EAAMxgF,CAAAA,EAAK0D,CAAAA,CAAI29C,EAAS39C,CAAAA,AAAAA,CACzC,CACF,CACF,EA2JQqZ,EAFF+R,EAAQD,CAAM,CAACx2B,EAAE,CAIfw2B,CAAM,CAACj3B,KAAKyD,GAAAA,CAAIhD,EAAI,EAAGsd,EAAQ/C,CAAAA,EAAO,EAAI,CAAA,GAAM+C,EAAK,CACrDxd,EAAQ4pD,OAJVi9B,EAMAlwD,EAAMusD,IAAAA,CAAO2D,EAAc39B,QAAAA,CAASnoD,CAApC41B,CACAA,EAAMysD,IAAAA,CAAOyD,EAAc39B,QAAAA,CAAS39C,CAApCorB,CACAA,EAAMwsD,IAAAA,CAAO0D,EAAch/E,IAAAA,CAAK9G,CAAhC41B,CACAA,EAAM0sD,IAAAA,CAAOwD,EAAch/E,IAAAA,CAAK0D,CAAhCorB,CACA/R,EAAO+R,CAEV,CAEG32B,EAAQ4qD,eAAAA,EACVA,AA5DJ,SAAyBl0B,CAAqB,CAAEvP,CAAe,MACzDjnB,EAAGsd,EAAMmZ,EAAO4xD,EAAQC,EAC5B,IAAIC,EAAaggB,GAAe/xE,CAAM,CAAC,EAAE,CAAEvP,GAC3C,IAAKjnB,EAAI,EAAGsd,EAAOkZ,EAAOr5B,MAAAA,CAAQ6C,EAAIsd,EAAM,EAAEtd,EAC5CsoF,EAAaD,EACbA,EAASE,EACTA,EAAavoF,EAAIsd,EAAO,GAAKirF,GAAe/xE,CAAM,CAACx2B,EAAI,EAAE,CAAEinB,GACtDohE,IAGL5xD,EAAQD,CAAM,CAACx2B,EAAE,CACbsoF,IACF7xD,EAAMusD,IAAAA,CAAOi8B,GAAgBxoF,EAAMusD,IAAAA,CAAM/7D,EAAKH,IAAAA,CAAMG,EAAKL,KAAzD6P,EACAA,EAAMysD,IAAAA,CAAO+7B,GAAgBxoF,EAAMysD,IAAAA,CAAMj8D,EAAK9X,GAAAA,CAAK8X,EAAKJ,MAAxD4P,GAEE8xD,IACF9xD,EAAMwsD,IAAAA,CAAOg8B,GAAgBxoF,EAAMwsD,IAAAA,CAAMh8D,EAAKH,IAAAA,CAAMG,EAAKL,KAAzD6P,EACAA,EAAM0sD,IAAAA,CAAO87B,GAAgBxoF,EAAM0sD,IAAAA,CAAMl8D,EAAK9X,GAAAA,CAAK8X,EAAKJ,MAAxD4P,GAGN,EAwCoBD,EAAQvP,EAE5B,CCzNA;;;;;;C,E;;CAWO,EAAA,SAAS2kF,KACd,MAAO,AAAkB,aAAlB,OAAOlyG,QAA0B,AAAoB,aAApB,OAAO+Z,QACjD,CAEA;;CAEC,EACM,SAAS63F,GAAe9iB,CAA0B,EACvD,IAAIhhE,EAASghE,EAAQC,UAArB,CAIA,OAHIjhE,GAAUA,AAAsB,wBAAtBA,EAAO/lB,QAAAA,IACnB+lB,CAAAA,EAAUA,EAAsBkhE,IADlC,AAAA,EAGOlhE,CACT,CAEA;;;CAGC,EAED,SAAS03F,GAAct2B,CAA2B,CAAEtmD,CAAiB,CAAEumD,CAAsB,EAC3F,IAAIC,EAYJ,MAXI,AAAsB,UAAtB,OAAOF,GACTE,EAAgBzE,SAASuE,EAAY,IAEL,KAA5BA,EAAWx0D,OAAAA,CAAQ,MAErB00D,CAAAA,EAAgB,EAAiB,IAAOxmD,EAAKmmD,UAAU,CAACI,EAAe,AAAfA,GAG1DC,EAAgBF,EAGXE,CACT,CAEA,IAAMI,GAAmB,AAAC9hE,GACxBA,EAAQ4hE,aAAAA,CAAcC,WAAAA,CAAYC,gBAAAA,CAAiB9hE,EAAS,MAMxDkW,GAAY,CAAC,MAAO,QAAS,SAAU,OAAO,CACpD,SAAS6hF,GAAmB91B,CAA2B,CAAE18D,CAAa,CAAE28D,CAAe,EACrF,IAAMj6E,EAAS,CAAA,EACfi6E,EAASA,EAAS,IAAMA,EAAS,GACjC,IAAK,IAAItpF,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMo8B,EAAMkB,EAAS,CAACt9B,EAAE,AACxBqP,CAAAA,CAAM,CAAC+sB,EAAI,CAAGpnB,WAAWq0E,CAAM,CAAC18D,EAAQ,IAAMyP,EAAMktD,EAAO,GAAK,CAClE,CAGA,OAFAj6E,EAAO0C,KAAAA,CAAQ1C,EAAOyX,IAAAA,CAAOzX,EAAOuX,KAApCvX,CACAA,EAAO8e,MAAAA,CAAS9e,EAAOF,GAAAA,CAAME,EAAOwX,MAApCxX,CACOA,CACT,CAEA,IAAM+vG,GAAe,CAACv+G,EAAWwK,EAAW1G,IACzC9D,AAAAA,CAAAA,EAAI,GAAKwK,EAAI,CAAA,GAAO,CAAA,CAAC1G,GAAU,CAAC,EAAwB6kF,UAAAA,AAAAA,CAgC3D;;;;;CAKC,EAEM,SAASqf,GACdpwF,CAAmD,CACnD3B,CAAY,EAEZ,GAAI,WAAY2B,EACd,OAAOA,EAGT,GAAM,CAAA,OAACjF,CAAAA,CAAAA,wBAAQgwB,CAAAA,CAAwB,CAAG1sB,EACpC6V,EAAQu8D,GAAiB11E,GACzBi2E,EAAY98D,AAAoB,eAApBA,EAAMiY,SAAAA,CAClB8kD,EAAWy1B,GAAmBxyF,EAAO,WACrCg9D,EAAUw1B,GAAmBxyF,EAAO,SAAU,SAC9C,CAAA,EAAC9rB,CAAAA,CAAAA,EAAGwK,CAAAA,CAAAA,IAAGixB,CAAG,CAAC,CAAG+iF,AAlDtB;;;;CAIC,EACD,SACE5mH,CAAkC,CAClC+a,CAAyB,MAUrB3S,EAAGwK,EAJP,IAAMw+E,EAAU,EAAkBA,OAAlC,CACMp/C,EAAUo/C,GAAWA,EAAQ1sF,MAAAA,CAAS0sF,CAAO,CAAC,EAAE,CAAGpxF,EACnD,CAAA,QAAC+0B,CAAAA,CAAAA,QAASC,CAAAA,CAAQ,CAAGgd,EACvBnO,EAAM,CAAA,EAEV,GAAI8iF,GAAa5xF,EAASC,EAASh1B,EAAEkM,MAAAA,EACnC9D,EAAI2sB,EACJniB,EAAIoiB,MACC,CACL,IAAMk/B,EAAOn5C,EAAOs2E,qBAApB,GACAjpF,EAAI4pC,EAAOs/C,OAAAA,CAAUp9B,EAAK7lC,IAA1BjmB,CACAwK,EAAIo/B,EAAOu/C,OAAAA,CAAUr9B,EAAKx9C,GAA1B9D,CACAixB,EAAM,CAAA,CACP,CACD,MAAO,CAACz7B,EAAAA,EAAGwK,EAAAA,EAAGixB,IAAAA,CAAG,CACnB,EAsBwC7jB,EAAOjF,GACvC8uE,EAAUoH,EAAS5iE,IAAAA,CAAQwV,CAAAA,GAAOqtD,EAAQ7iE,IAAAA,AAAAA,EAC1Cy7D,EAAUmH,EAASv6E,GAAAA,CAAOmtB,CAAAA,GAAOqtD,EAAQx6E,GAAAA,AAAAA,EAE3C,CAAA,MAAC4C,CAAAA,CAAAA,OAAOoc,CAAAA,CAAO,CAAGrX,EAKtB,OAJI2yE,IACF13E,GAAS23E,EAAS33E,KAAAA,CAAQ43E,EAAQ53E,KAAlCA,CACAoc,GAAUu7D,EAASv7D,MAAAA,CAASw7D,EAAQx7D,MAApCA,EAEK,CACLttB,EAAGtB,KAAK0B,KAAAA,CAAM,AAACJ,CAAAA,EAAIyhF,CAAAA,EAAWvwE,EAAQyB,EAAOzB,KAAAA,CAAQyxB,GACrDn4B,EAAG9L,KAAK0B,KAAAA,CAAM,AAACoK,CAAAA,EAAIk3E,CAAAA,EAAWp0D,EAAS3a,EAAO2a,MAAAA,CAASqV,EACzD,CACF,CA6BA,IAAM+7E,GAAS,AAAC5mH,GAAc4G,KAAK0B,KAAAA,CAAMtI,AAAI,GAAJA,GAAU,EAEnD,uCAAA;AACO,SAASqoC,GACdxtB,CAAyB,CACzB02E,CAAgB,CAChBC,CAAiB,CACjB39D,CAAoB,EAEpB,IAAMG,EAAQu8D,GAAiB11E,GACzB81B,EAAU61E,GAAmBxyF,EAAO,UACpCgD,EAAWuvF,GAAcvyF,EAAMgD,QAAAA,CAAUnc,EAAQ,gBAAkBooG,EACnEhsF,EAAYsvF,GAAcvyF,EAAMiD,SAAAA,CAAWpc,EAAQ,iBAAmBooG,EACtExxB,EAAgBk1B,AAxCxB,SAA0B9rG,CAAyB,CAAEzB,CAAa,CAAEoc,CAAc,EAChF,IAAIwB,EAAkBC,EAEtB,GAAI7d,AAAUxM,KAAAA,IAAVwM,GAAuBoc,AAAW5oB,KAAAA,IAAX4oB,EAAsB,CAC/C,IAAMuV,EAAY4nE,GAAe93F,GACjC,GAAKkwB,EAGE,CACL,IAAMipB,EAAOjpB,EAAUomD,qBAAAA,GACjBQ,EAAiBpB,GAAiBxlD,GAClC6mD,EAAkB40B,GAAmB70B,EAAgB,SAAU,SAC/DE,EAAmB20B,GAAmB70B,EAAgB,UAH5D,2CAAA;AAIAv4E,EAAQ46C,EAAK56C,KAAAA,CAAQy4E,EAAiBz4E,KAAAA,CAAQw4E,EAAgBx4E,KAA9DA,CACAoc,EAASw+B,EAAKx+B,MAAAA,CAASq8D,EAAiBr8D,MAAAA,CAASo8D,EAAgBp8D,MAAjEA,CACAwB,EAAWuvF,GAAc50B,EAAe36D,QAAAA,CAAU+T,EAAW,eAC7D9T,EAAYsvF,GAAc50B,EAAe16D,SAAAA,CAAW8T,EAAW,eAChE,MAXC3xB,EAAQyB,EAAOqwB,WAAf9xB,CACAoc,EAAS3a,EAAOi3E,YAAhBt8D,AAWH,CACD,MAAO,CACLpc,MAAAA,EACAoc,OAAAA,EACAwB,SAAUA,GAAYisF,EACtBhsF,UAAWA,GAAagsF,CAC1B,CACF,EAeyCpoG,EAAQ02E,EAASC,GACpD,CAAA,MAACp4E,CAAAA,CAAAA,OAAOoc,CAAAA,CAAO,CAAGi8D,EAEtB,GAAIz9D,AAAoB,gBAApBA,EAAMiY,SAAAA,CAA6B,CACrC,IAAM+kD,EAAUw1B,GAAmBxyF,EAAO,SAAU,SAC9C+8D,EAAWy1B,GAAmBxyF,EAAO,WAC3C5a,GAAS23E,EAAS33E,KAAAA,CAAQ43E,EAAQ53E,KAAlCA,CACAoc,GAAUu7D,EAASv7D,MAAAA,CAASw7D,EAAQx7D,MAApCA,AACD,CACDpc,EAAQxS,KAAKmD,GAAAA,CAAI,EAAGqP,EAAQu3B,EAAQv3B,KAApCA,EACAoc,EAAS5uB,KAAKmD,GAAAA,CAAI,EAAG8pB,EAAcza,EAAQya,EAAc2B,EAASmb,EAAQnb,MAA1EA,EACApc,EAAQwtG,GAAOhgH,KAAKyD,GAAAA,CAAI+O,EAAO4d,EAAUy6D,EAAcz6D,QAAvD5d,GACAoc,EAASoxF,GAAOhgH,KAAKyD,GAAAA,CAAImrB,EAAQyB,EAAWw6D,EAAcx6D,SAA1DzB,GACIpc,GAAS,CAACoc,G,uF;AAGZA,CAAAA,EAASoxF,GAAOxtG,EAAQ,EAAxBoc,EAGF,IAAMu8D,EAAiBR,AAAY3kF,KAAAA,IAAZ2kF,GAAyBC,AAAa5kF,KAAAA,IAAb4kF,EAOhD,OALIO,GAAkBl+D,GAAe49D,EAAcj8D,MAAAA,EAAUA,EAASi8D,EAAcj8D,MAAAA,EAElFpc,CAAAA,EAAQwtG,GAAOhgH,KAAKyJ,KAAAA,CAAMmlB,AAD1BA,CAAAA,EAASi8D,EAAcj8D,MAAvBA,AAAAA,EACmC3B,GAAnCza,EAGK,CAACA,MAAAA,EAAOoc,OAAAA,CAAM,CACvB,CAEA;;;;;CAMO,EAAA,SAAS2iF,GACdh6F,CAAY,CACZ6zE,CAAkB,CAClBC,CAAoB,EAEpB,IAAMC,EAAaF,GAAc,EAC3BG,EAAevrF,KAAKyJ,KAAAA,CAAM8N,EAAMqX,MAAAA,CAAS08D,GACzCE,EAAcxrF,KAAKyJ,KAAAA,CAAM8N,EAAM/E,KAAAA,CAAQ84E,EAE7C/zE,CAAAA,EAAMqX,MAAAA,CAAS5uB,KAAKyJ,KAAAA,CAAM8N,EAAMqX,MAAhCrX,EACAA,EAAM/E,KAAAA,CAAQxS,KAAKyJ,KAAAA,CAAM8N,EAAM/E,KAA/B+E,EAEA,IAAMtD,EAASsD,EAAMtD,MAArB,QAUA,AALIA,EAAOmZ,KAAAA,EAAUi+D,CAAAA,GAAe,CAACp3E,EAAOmZ,KAAAA,CAAMwB,MAAAA,EAAU,CAAC3a,EAAOmZ,KAAAA,CAAM5a,KAAAA,AAAAA,IACxEyB,EAAOmZ,KAAAA,CAAMwB,MAAAA,CAAS,CAAC,EAAErX,EAAMqX,MAAAA,CAAO,EAAE,CAAC,CACzC3a,EAAOmZ,KAAAA,CAAM5a,KAAAA,CAAQ,CAAC,EAAE+E,EAAM/E,KAAAA,CAAM,EAAE,CAAC,EAGrC+E,CAAAA,EAAM0sB,uBAAAA,GAA4BqnD,GAC/Br3E,EAAO2a,MAAAA,GAAW28D,GAClBt3E,EAAOzB,KAAAA,GAAUg5E,CAAAA,IACtBj0E,EAAM0sB,uBAAAA,CAA0BqnD,EAChCr3E,EAAO2a,MAAAA,CAAS28D,EAChBt3E,EAAOzB,KAAAA,CAAQg5E,EACfj0E,EAAM8J,GAAAA,CAAIoqE,YAAAA,CAAaH,EAAY,EAAG,EAAGA,EAAY,EAAG,GACjD,CAAA,EAGX,CAEA;;;;CAKa4f,EAAAA,IAAAA,GAAgC,WAC3C,IAAIxf,EAAmB,CAAA,EACvB,GAAI,CACF,IAAMnrF,EAAU,CACd,IAAIoiC,SAAU,CAEZ,OADA+oD,EAAmB,CAAA,EACZ,CAAA,CACT,CACF,EAEAvxF,OAAOknC,gBAAAA,CAAiB,OAAQ,KAAM9gC,GACtCpG,OAAOonC,mBAAAA,CAAoB,OAAQ,KAAMhhC,EAC3C,CAAE,MAAOrH,EAAG,C,+B;AAEZ,CACA,OAAOwyF,CACT,GAEA;;;;;;;;CAQC,EAEM,SAASsf,GACdnjF,CAAoB,CACpBmvB,CAA4B,EAE5B,IAAMp1C,EAtOC+nF,GAsOgB9hE,GAtOK8jE,gBAAAA,CAsOI30C,GAC1BiuC,EAAUrjF,GAASA,EAAMmjF,KAAAA,CAAM,qBACrC,OAAOE,EAAU,CAACA,CAAO,CAAC,EAAE,CAAGj/E,KAAAA,CACjC,CC/RA;;CAGO,EAAA,SAASitG,GAAaz+D,CAAS,CAAEC,CAAS,CAAEhmC,CAAS,CAAEgQ,CAAK,EACjE,MAAO,CACLnd,EAAGkzC,EAAGlzC,CAAAA,CAAImN,EAAKgmC,CAAAA,EAAGnzC,CAAAA,CAAIkzC,EAAGlzC,CAAAA,AAAAA,EACzBwK,EAAG0oC,EAAG1oC,CAAAA,CAAI2C,EAAKgmC,CAAAA,EAAG3oC,CAAAA,CAAI0oC,EAAG1oC,CAAAA,AAAAA,CAC3B,CACF,CAEA;;CAGO,EAAA,SAASinG,GACdv+D,CAAS,CACTC,CAAS,CACThmC,CAAS,CAAEgQ,CAAkC,EAE7C,MAAO,CACLnd,EAAGkzC,EAAGlzC,CAAAA,CAAImN,EAAKgmC,CAAAA,EAAGnzC,CAAAA,CAAIkzC,EAAGlzC,CAAAA,AAAAA,EACzBwK,EAAG2S,AAAS,WAATA,EAAoBhQ,EAAI,GAAM+lC,EAAG1oC,CAAAA,CAAI2oC,EAAG3oC,CAAAA,CACvC2S,AAAS,UAATA,EAAmBhQ,EAAI,EAAI+lC,EAAG1oC,CAAAA,CAAI2oC,EAAG3oC,CAAAA,CACnC2C,EAAI,EAAIgmC,EAAG3oC,CAAAA,CAAI0oC,EAAG1oC,CAFxBA,AAGF,CACF,CAEA;;CAGO,EAAA,SAASknG,GAAqBx+D,CAAe,CAAEC,CAAe,CAAEhmC,CAAS,CAAEgQ,CAAK,EACrF,IAAMmtE,EAAM,CAACtqF,EAAGkzC,EAAGkvC,IAANpiF,CAAYwK,EAAG0oC,EAAGovC,IAAN93E,AAAU,EAC7B+/E,EAAM,CAACvqF,EAAGmzC,EAAGgvC,IAANniF,CAAYwK,EAAG2oC,EAAGkvC,IAAN73E,AAAU,EAC7BjS,EAAIo5G,GAAaz+D,EAAIo3C,EAAKn9E,GAC1B1N,EAAIkyG,GAAarnB,EAAKC,EAAKp9E,GAC3BE,EAAIskG,GAAapnB,EAAKp3C,EAAIhmC,GAC1BjN,EAAIyxG,GAAap5G,EAAGkH,EAAG0N,GACvBvV,EAAI+5G,GAAalyG,EAAG4N,EAAGF,GAC7B,OAAOwkG,GAAazxG,EAAGtI,EAAGuV,EAC5B,CCUO,SAASyoG,GAAc9gD,CAAY,CAAE01B,CAAa,CAAEt5E,CAAa,MA1ClBA,EA2CpD,OAAO4jD,GA3C6C5jD,EA2CVA,EA1CnC,CACLlR,EAAAA,AAAEA,GACOwqF,AAwCwBA,EAAAA,EAxCRt5E,EAAQlR,EAEjCo2D,SAAS/nD,CAAC,EACR6C,EAAQ7C,CACV,EACA+iC,UAAAA,AAAU5L,GACR,AAAIA,AAAU,WAAVA,EACKA,EAEFA,AAAU,UAAVA,EAAoB,OAAS,QAEtCmwB,MAAAA,CAAM31D,EAAGM,IACAN,EAAIM,EAEb40D,WAAAA,CAAWl1D,EAAGi0D,IACLj0D,EAAIi0D,CAEf,GAIO,CACLj0D,EAAAA,AAAEA,GACOA,EAETo2D,SAAS/nD,CAAC,EAAE,EAEZ+iC,UAAAA,AAAU5L,GACDA,EAETmwB,MAAAA,CAAM31D,EAAGM,IACAN,EAAIM,EAEb40D,WAAAA,CAAWl1D,EAAGyqF,IACLzqF,CAEX,CAKF,CAEO,SAAS81G,GAAsB/1F,CAA6B,CAAE2qE,CAAwB,EAC3F,IAAI5+D,EAA4B6+D,EAC5BD,CAAAA,AAAc,QAAdA,GAAuBA,AAAc,QAAdA,CAAc,IAEvCC,EAAW,CACT7+D,AAFFA,CAAAA,EAAQ/L,EAAIpN,MAAAA,CAAOmZ,KAAnBA,AAAAA,EAEQu+D,gBAAAA,CAAiB,aACvBv+D,EAAM8+D,mBAAAA,CAAoB,aAC3B,CAED9+D,EAAM++D,WAAAA,CAAY,YAAaH,EAAW,aACzC3qE,EAAiD+qE,iBAAAA,CAAoBH,EAE1E,CAEO,SAASsrB,GAAqBl2F,CAA6B,CAAE4qE,CAA2B,EAC5EjmF,KAAAA,IAAbimF,IACF,OAAQ5qE,EAAiD+qE,iBAAzD,CACA/qE,EAAIpN,MAAAA,CAAOmZ,KAAAA,CAAM++D,WAAAA,CAAY,YAAaF,CAAQ,CAAC,EAAE,CAAEA,CAAQ,CAAC,EAAE,EAEtE,CC/DA,SAASk0B,GAAWnpE,CAAQ,QAC1B,AAAIA,AAAa,UAAbA,EACK,CACLs1C,QAASub,GACTtb,QAASmwB,EACT5rC,UAAWykC,EACb,EAEK,CACLjpB,QAAS+lB,GACT9lB,QAAS,CAAC1yF,EAAGkH,IAAMlH,EAAIkH,EACvB+vE,UAAWxvE,AAAAA,GAAKA,CAClB,CACF,CAEA,SAAS8+G,GAAiB,CAAA,MAACpoG,CAAK,CAAA,IAAE4F,CAAG,CAAA,MAAEnL,CAAK,CAAA,KAAEuI,CAAI,CAAA,MAAEoS,CAAK,CAAC,EACxD,MAAO,CACLpV,MAAOA,EAAQvF,EACfmL,IAAKA,EAAMnL,EACXuI,KAAMA,GAAQ,AAAC4C,CAAAA,EAAM5F,EAAQ,CAAA,EAAKvF,GAAU,EAC5C2a,MAAAA,CACF,CACF,CA4CO,SAASioF,GAAcr9E,CAAO,CAAEf,CAAM,CAAEg2B,CAAM,MAa/CrrD,EAAOs1B,EAAOu1D,EAZlB,GAAI,CAACx/B,EACH,MAAO,CAACj1B,EAAQ,CAGlB,GAAM,CAAA,SAACgf,CAAAA,CAAUh/B,MAAO00E,CAAAA,CAAY9uE,IAAK+uE,CAAQ,CAAC,CAAG1/B,EAC/Cx6C,EAAQwkB,EAAOr5B,MAArB,CACM,CAAA,QAAC2uF,CAAAA,CAAAA,QAASD,CAAAA,CAAAA,UAASxb,CAAS,CAAC,CAAGqvC,GAAWnpE,GAC3C,CAAA,MAACh/B,CAAAA,CAAAA,IAAO4F,CAAAA,CAAAA,KAAK5C,CAAAA,CAAAA,MAAMoS,CAAAA,CAAM,CAAGizF,AAlDpC,SAAoBroF,CAAO,CAAEf,CAAM,CAAEg2B,CAAM,MAMrCxsD,EALJ,GAAM,CAAA,SAACu2C,CAAAA,CAAUh/B,MAAO00E,CAAAA,CAAY9uE,IAAK+uE,CAAQ,CAAC,CAAG1/B,EAC/C,CAAA,QAACq/B,CAAO,CAAA,UAAExb,CAAS,CAAC,CAAGqvC,GAAWnpE,GAClCvkC,EAAQwkB,EAAOr5B,MAArB,CAEI,CAAA,MAACoa,CAAK,CAAA,IAAE4F,CAAAA,CAAAA,KAAK5C,CAAAA,CAAK,CAAGgd,EAGzB,GAAIhd,EAAM,CAGR,IAFAhD,GAASvF,EACTmL,GAAOnL,EACFhS,EAAI,EACP,AADwBA,EAAPgS,GACZ65E,EAAQxb,EAAU75C,CAAM,CAACjf,EAAQvF,EAAM,CAACukC,EAAS,EAAG01C,EAAYC,GADnC,EAAElsF,EAIpCuX,IACA4F,IAEF5F,GAASvF,EACTmL,GAAOnL,CACR,CAKD,OAHImL,EAAM5F,GACR4F,CAAAA,GAAOnL,CADT,EAGO,CAACuF,MAAAA,EAAO4F,IAAAA,EAAK5C,KAAAA,EAAMoS,MAAO4K,EAAQ5K,KAAfA,AAAoB,CAChD,EAwB+C4K,EAASf,EAAQg2B,GAExDn9C,EAAS,EAAE,CACb+8E,EAAS,CAAA,EACTC,EAAW,KAGTC,EAAgB,IAAMT,EAAQI,EAAYD,EAAW7qF,IAAU2qF,AAAmC,IAAnCA,EAAQG,EAAYD,GACnFO,EAAc,IAAMT,AAA6B,IAA7BA,EAAQI,EAAU/qF,IAAgB0qF,EAAQK,EAAUF,EAAW7qF,GACnFqrF,EAAc,IAAMJ,GAAUE,IAC9BG,EAAa,IAAM,CAACL,GAAUG,IAEpC,IAAK,IAAIvsF,EAAIuX,EAAOmN,EAAOnN,EAAOvX,GAAKmd,EAAK,EAAEnd,EAGxCy2B,AAFJA,CAAAA,EAAQD,CAAM,CAACx2B,EAAIgS,EAAM,AAANA,EAET4kB,IAAAA,EAMNz1B,AAFJA,CAAAA,EAAQkvE,EAAU55C,CAAK,CAAC8f,EAAS,CAAA,IAEnBy1C,IAIdI,EAASP,EAAQ1qF,EAAO8qF,EAAYC,GAEnB,OAAbG,GAAqBG,KACvBH,CAAAA,EAAWP,AAA+B,IAA/BA,EAAQ3qF,EAAO8qF,GAAoBjsF,EAAI0kB,CADpD,EAIiB,OAAb2nE,GAAqBI,MACvBp9E,EAAOpP,IAAAA,CAAK0/G,GAAiB,CAACpoG,MAAO80E,EAAUlvE,IAAKnd,EAAGua,KAAAA,EAAMvI,MAAAA,EAAO2a,MAAAA,CAAK,IACzE0/D,EAAW,MAEb3nE,EAAO1kB,EACPgsF,EAAY7qF,GAOd,OAJiB,OAAbkrF,GACFh9E,EAAOpP,IAAAA,CAAK0/G,GAAiB,CAACpoG,MAAO80E,EAAUlvE,IAAAA,EAAK5C,KAAAA,EAAMvI,MAAAA,EAAO2a,MAAAA,CAAK,IAGjEtd,CACT,CAYO,SAASyjG,GAAe77E,CAAI,CAAEu1B,CAAM,EACzC,IAAMn9C,EAAS,EAAE,CACX27C,EAAW/zB,EAAK+zB,QAAtB,CAEA,IAAK,IAAIhrD,EAAI,EAAGA,EAAIgrD,EAAS7tD,MAAAA,CAAQ6C,IAAK,CACxC,IAAM0sF,EAAMkoB,GAAc5pD,CAAQ,CAAChrD,EAAE,CAAEi3B,EAAKT,MAAAA,CAAQg2B,EAChDkgC,CAAAA,EAAIvvF,MAAAA,EACNkS,EAAOpP,IAAAA,IAAQysF,EAEnB,CACA,OAAOr9E,CACT,CAsFO,SAASwjG,GAAiB57E,CAAI,CAAE01D,CAAc,EACnD,IAAMn2D,EAASS,EAAKT,MAApB,CACMQ,EAAWC,EAAKn3B,OAAAA,CAAQk3B,QAA9B,CACMhlB,EAAQwkB,EAAOr5B,MAArB,CAEA,GAAI,CAAC6U,EACH,MAAO,EAAE,CAGX,IAAMuI,EAAO,CAAC,CAAC0c,EAAK3c,KAApB,CACM,CAAA,MAAC/C,CAAAA,CAAAA,IAAO4F,CAAAA,CAAI,CAAG0iG,AA3FvB,SAAyBrpF,CAAM,CAAExkB,CAAK,CAAEuI,CAAI,CAAEyc,CAAQ,EACpD,IAAIzf,EAAQ,EACR4F,EAAMnL,EAAQ,EAElB,GAAIuI,GAAQ,CAACyc,EAEX,KAAOzf,EAAQvF,GAAS,CAACwkB,CAAM,CAACjf,EAAM,CAACqf,IAAAA,EACrCrf,IAKJ,KAAOA,EAAQvF,GAASwkB,CAAM,CAACjf,EAAM,CAACqf,IAAAA,EACpCrf,IAWF,IAPAA,GAASvF,EAELuI,GAEF4C,CAAAA,GAAO5F,CAFT,EAKO4F,EAAM5F,GAASif,CAAM,CAACrZ,EAAMnL,EAAM,CAAC4kB,IAAAA,EACxCzZ,IAMF,MAAO,CAAC5F,MAAAA,EAAO4F,IAFfA,GAAOnL,CAEW,CACpB,EA2DuCwkB,EAAQxkB,EAAOuI,EAAMyc,GAE1D,GAAIA,AAAa,CAAA,IAAbA,EACF,OAAO+oF,GAAc9oF,EAAM,CAAC,CAAC1f,MAAAA,EAAO4F,IAAAA,EAAK5C,KAAAA,CAAI,EAAE,CAAEic,EAAQm2D,GAG3D,IAAMjqF,EAAMya,EAAM5F,EAAQ4F,EAAMnL,EAAQmL,EAClC2vE,EAAe,CAAC,CAAC71D,EAAKoB,SAAAA,EAAa9gB,AAAU,IAAVA,GAAe4F,IAAQnL,EAAQ,EACxE,OAAO+tG,GAAc9oF,EAAM6oF,AA1D7B,SAAuBtpF,CAAM,CAAEjf,CAAK,CAAE7U,CAAG,CAAE6X,CAAI,MAKzC4C,EAJJ,IAAMnL,EAAQwkB,EAAOr5B,MAArB,CACMkS,EAAS,EAAE,CACb4kB,EAAO1c,EACPmN,EAAO8R,CAAM,CAACjf,EAAM,CAGxB,IAAK4F,EAAM5F,EAAQ,EAAG4F,GAAOza,EAAK,EAAEya,EAAK,CACvC,IAAMrc,EAAM01B,CAAM,CAACrZ,EAAMnL,EAAM,AAC3BlR,CAAAA,EAAI81B,IAAAA,EAAQ91B,EAAIgY,IAAAA,CACb4L,EAAKkS,IAAAA,GACRrc,EAAO,CAAA,EACPlL,EAAOpP,IAAAA,CAAK,CAACsX,MAAOA,EAAQvF,EAAOmL,IAAK,AAACA,CAAAA,EAAM,CAAA,EAAKnL,EAAOuI,KAAAA,CAAI,GAE/DhD,EAAQ0c,EAAOnzB,EAAIgY,IAAAA,CAAOqE,EAAM,OAGlC8W,EAAO9W,EACHuH,EAAKkS,IAAAA,EACPrf,CAAAA,EAAQ4F,CADV,GAIFuH,EAAO5jB,CACT,CAMA,OAJa,OAATmzB,GACF5kB,EAAOpP,IAAAA,CAAK,CAACsX,MAAOA,EAAQvF,EAAOmL,IAAK8W,EAAOjiB,EAAOuI,KAAAA,CAAI,GAGrDlL,CACT,EA4B2CmnB,EAAQjf,EAAO7U,EAAKoqF,GAAet2D,EAAQm2D,EACtF,CAQA,SAASozB,GAAc9oF,CAAI,CAAE+zB,CAAQ,CAAEx0B,CAAM,CAAEm2D,CAAc,SAC3D,AAAI,AAACA,GAAmBA,EAAejkD,UAAAA,EAAelS,EAG/CwpF,AAUT,SAAyB/oF,CAAI,CAAE+zB,CAAQ,CAAEx0B,CAAM,CAAEm2D,CAAc,EAC7D,IAAMM,EAAeh2D,EAAKxb,MAAAA,CAAO6I,UAAjC,GACM4oE,EAAY+yB,GAAUhpF,EAAKn3B,OAAjC,EACM,CAACu3B,cAAexZ,CAAAA,CAAc/d,QAAS,CAAA,SAACk3B,CAAQ,CAAC,CAAC,CAAGC,EACrDjlB,EAAQwkB,EAAOr5B,MAArB,CACMkS,EAAS,EAAE,CACb+9E,EAAYF,EACZ31E,EAAQyzC,CAAQ,CAAC,EAAE,CAACzzC,KAAxB,CACIvX,EAAIuX,EAER,SAAS81E,EAASz0F,CAAC,CAAEH,CAAC,CAAEkrB,CAAC,CAAE2pE,CAAE,EAC3B,IAAMC,EAAMv2D,EAAW,GAAK,EAC5B,GAAIp+B,IAAMH,GAKV,IADAG,GAAKoZ,EACEwkB,CAAM,CAAC59B,EAAIoZ,EAAM,CAAC4kB,IAAAA,EACvBh+B,GAAK20F,EAEP,KAAO/2D,CAAM,CAAC/9B,EAAIuZ,EAAM,CAAC4kB,IAAAA,EACvBn+B,GAAK80F,EAEH30F,EAAIoZ,GAAUvZ,EAAIuZ,IACpB3C,EAAOpP,IAAAA,CAAK,CAACsX,MAAO3e,EAAIoZ,EAAOmL,IAAK1kB,EAAIuZ,EAAOuI,KAAMoJ,EAAGgJ,MAAO2gE,CAAE,GACjEF,EAAYE,EACZ/1E,EAAQ9e,EAAIuZ,GAEhB,CAEA,IAAK,IAAMulB,KAAWyzB,EAAU,KAG1Br+B,EADJ,IAAIjI,EAAO8R,CAAM,CAACjf,AADlBA,CAAAA,EAAQyf,EAAWzf,EAAQggB,EAAQhgB,KAAnCA,AAAAA,EAC0BvF,EAAM,CAEhC,IAAKhS,EAAIuX,EAAQ,EAAGvX,GAAKu3B,EAAQpa,GAAAA,CAAKnd,IAAK,CACzC,IAAMw+D,EAAKhoC,CAAM,CAACx2B,EAAIgS,EAAM,CASxBkuG,AA0BV,CAAA,SAAsBvzF,CAAK,CAAEygE,CAAS,EACpC,GAAI,CAACA,EACH,MAAO,CAAA,EAET,IAAMtlE,EAAQ,EAAE,CACV2lE,EAAW,SAAStpF,CAAG,CAAEhD,CAAK,SAClC,AAAKu7G,GAAoBv7G,IAGpB2mB,EAAMnT,QAAAA,CAASxT,IAClB2mB,EAAM7nB,IAAAA,CAAKkB,GAEN2mB,EAAMsM,OAAAA,CAAQjzB,IALZA,CAMX,EACA,OAAOiD,KAAKoO,SAAAA,CAAUma,EAAO8gE,KAAcrpF,KAAKoO,SAAAA,CAAU46E,EAAWK,EACvE,CAAA,EAjDM9gE,EAAQszF,GAAUtzB,EAAejkD,UAAAA,CAAW08D,GAAcnY,EAAc,CACtEp5E,KAAM,UACN65E,GAAIhpE,EACJqvB,GAAIyqB,EACJmvB,YAAa,AAAC3tF,CAAAA,EAAI,CAAA,EAAKgS,EACvB47E,YAAa5tF,EAAIgS,EACjB6L,aAAAA,CACF,KACwBuvE,IACtBC,EAAS91E,EAAOvX,EAAI,EAAGu3B,EAAQhd,IAAAA,CAAM6yE,GAEvC1oE,EAAO85C,EACP4uB,EAAYzgE,CACd,CACIpV,EAAQvX,EAAI,GACdqtF,EAAS91E,EAAOvX,EAAI,EAAGu3B,EAAQhd,IAAAA,CAAM6yE,EAEzC,CAEA,OAAO/9E,CACT,EAlEyB4nB,EAAM+zB,EAAUx0B,EAAQm2D,GAFtC3hC,CAGX,CAmEA,SAASi1D,GAAUngH,CAAO,EACxB,MAAO,CACLmU,gBAAiBnU,EAAQmU,eAAzBA,CACA20C,eAAgB9oD,EAAQ8oD,cAAxBA,CACArX,WAAYzxC,EAAQyxC,UAApBA,CACAE,iBAAkB3xC,EAAQ2xC,gBAA1BA,CACAqX,gBAAiBhpD,EAAQgpD,eAAzBA,CACA77B,YAAantB,EAAQmtB,WAArBA,CACAH,YAAahtB,EAAQgtB,WAArBA,AACF,CACF,C,G,E,Q,C,Q,S,C,C,C,MC6BI,CAvXJ;;;;;CAKC,EACD,SAAS,EAAM,CAAC,EACd,OAAO,EAAI,GAAM,CACnB,C,E,E,O,C,Q,I,GACA,IAAM,EAAM,CAAC,EAAG,EAAG,IAAM,KAAK,GAAA,CAAI,KAAK,GAAA,CAAI,EAAG,GAAI,GAClD,SAAS,EAAI,CAAC,EACZ,OAAO,EAAI,EAAM,AAAI,KAAJ,GAAW,EAAG,IACjC,CAIA,SAAS,EAAI,CAAC,EACZ,OAAO,EAAI,EAAM,AAAI,IAAJ,GAAU,EAAG,IAChC,CACA,SAAS,EAAI,CAAC,EACZ,OAAO,EAAI,EAAM,EAAI,MAAQ,IAAK,EAAG,EACvC,CACA,SAAS,EAAI,CAAC,EACZ,OAAO,EAAI,EAAM,AAAI,IAAJ,GAAU,EAAG,IAChC,CAEA,IAAM,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAE,EACvJ,EAAM,IAAI,mBAAmB,CAC7B,EAAK,AAAA,GAAK,CAAG,CAAC,AAAI,GAAJ,EAAQ,CACtB,EAAK,AAAA,GAAK,CAAG,CAAE,AAAA,CAAA,AAAI,IAAJ,CAAI,GAAS,EAAE,CAAG,CAAG,CAAC,AAAI,GAAJ,EAAQ,CAC7C,EAAK,AAAA,GAAO,AAAA,CAAA,AAAI,IAAJ,CAAI,GAAS,GAAQ,CAAA,AAAI,GAAJ,CAAI,EACrC,EAAU,AAAA,GAAK,EAAG,EAAE,CAAA,GAAM,EAAG,EAAE,CAAA,GAAM,EAAG,EAAE,CAAA,GAAM,EAAG,EAAE,CAA3D,EAuBM,EAAQ,CAAC,EAAG,IAAM,EAAI,IAAM,EAAE,GAAK,GAQnC,EAAS,+GACf,SAAS,EAAS,CAAC,CAAE,CAAC,CAAE,CAAC,EACvB,IAAM,EAAI,EAAI,KAAK,GAAA,CAAI,EAAG,EAAI,GACxB,EAAI,CAAC,EAAG,EAAK,AAAA,CAAA,EAAI,EAAI,EAAA,EAAM,EAAE,GAAK,EAAI,EAAI,KAAK,GAAA,CAAI,KAAK,GAAA,CAAI,EAAI,EAAG,EAAI,EAAG,GAAI,IACpF,MAAO,CAAC,EAAE,GAAI,EAAE,GAAI,EAAE,GAAG,AAC3B,CACA,SAAS,EAAS,CAAC,CAAE,CAAC,CAAE,CAAC,EACvB,IAAM,EAAI,CAAC,EAAG,EAAK,AAAA,CAAA,EAAI,EAAI,EAAA,EAAM,CAAC,GAAK,EAAI,EAAI,EAAI,KAAK,GAAA,CAAI,KAAK,GAAA,CAAI,EAAG,EAAI,EAAG,GAAI,GACnF,MAAO,CAAC,EAAE,GAAI,EAAE,GAAI,EAAE,GAAG,AAC3B,CACA,SAAS,EAAS,CAAC,CAAE,CAAC,CAAE,CAAC,MAEnB,EADJ,IAAM,EAAM,EAAS,EAAG,EAAG,IAO3B,IALI,EAAI,EAAI,IACV,EAAI,EAAK,CAAA,EAAI,CAAA,EACb,GAAK,EACL,GAAK,GAEF,EAAI,EAAG,EAAI,EAAG,IACjB,CAAG,CAAC,EAAE,EAAI,EAAI,EAAI,EAClB,CAAG,CAAC,EAAE,EAAI,EAEZ,OAAO,CACT,CAUA,SAAS,EAAQ,CAAC,MAQZ,EAAG,EAAG,EANV,IAAM,EAAI,EAAE,CAAA,CADE,IAER,EAAI,EAAE,CAAA,CAFE,IAGR,EAAI,EAAE,CAAA,CAHE,IAIR,EAAM,KAAK,GAAA,CAAI,EAAG,EAAG,GACrB,EAAM,KAAK,GAAA,CAAI,EAAG,EAAG,GACrB,EAAI,AAAC,CAAA,EAAM,CAAA,EAAO,EAQxB,OANI,IAAQ,IACV,EAAI,EAAM,EACV,EAAI,EAAI,GAAM,EAAK,CAAA,EAAI,EAAM,CAAA,EAAO,EAAK,CAAA,EAAM,CAAA,EAE/C,EAAI,AAAI,GADR,CAAA,EApBF,AAAI,AAoBW,IAAY,EAnBlB,AAAE,CAAA,AAmBO,EAAG,CAnBN,EAmBS,EAnBE,CAAA,AAmBR,EAAG,EAnBa,EAAI,CAAA,EAElC,AAiBc,IAAS,EAhBjB,AAAA,CAAA,AAgBW,EAAN,CAhBD,EAgBU,EAhBD,EAEf,AAAA,CAAA,AAcO,EAAG,CAdN,EAcY,EAdH,CAcnB,EACa,IAER,CAAC,AAAI,EAAJ,EAAO,GAAK,EAAG,EAAE,AAC3B,CACA,SAAS,EAAM,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,EACvB,MAAO,AACL,CAAA,MAAM,OAAA,CAAQ,GACV,EAAE,CAAC,CAAC,EAAE,CAAE,CAAC,CAAC,EAAE,CAAE,CAAC,CAAC,EAAE,EAClB,EAAE,EAAG,EAAG,EAAA,EACZ,GAAA,CAAI,EACR,CAUA,SAAS,EAAI,CAAC,EACZ,MAAQ,AAAA,CAAA,EAAI,IAAM,GAAA,EAAO,GAC3B,CAiDA,IAAM,EAAM,CACV,EAAG,OACH,EAAG,QACH,EAAG,KACH,EAAG,MACH,EAAG,KACH,EAAG,SACH,EAAG,QACH,EAAG,KACH,EAAG,KACH,EAAG,KACH,EAAG,KACH,EAAG,QACH,EAAG,QACH,EAAG,KACH,EAAG,WACH,EAAG,KACH,EAAG,KACH,EAAG,KACH,EAAG,KACH,EAAG,KACH,EAAG,QACH,EAAG,KACH,EAAG,KACH,EAAG,OACH,EAAG,KACH,EAAG,QACH,EAAG,IACL,EACM,EAAU,CACd,OAAQ,SACR,YAAa,SACb,KAAM,OACN,UAAW,SACX,KAAM,SACN,MAAO,SACP,OAAQ,SACR,MAAO,IACP,aAAc,SACd,GAAI,KACJ,QAAS,SACT,KAAM,SACN,UAAW,SACX,OAAQ,SACR,SAAU,SACV,QAAS,SACT,IAAK,SACL,YAAa,SACb,QAAS,SACT,QAAS,SACT,KAAM,OACN,IAAK,KACL,MAAO,OACP,QAAS,SACT,KAAM,SACN,KAAM,OACN,KAAM,SACN,OAAQ,SACR,QAAS,SACT,SAAU,SACV,OAAQ,SACR,MAAO,SACP,IAAK,SACL,OAAQ,SACR,OAAQ,SACR,KAAM,SACN,MAAO,SACP,MAAO,SACP,IAAK,OACL,OAAQ,SACR,OAAQ,SACR,SAAU,OACV,OAAQ,SACR,OAAQ,SACR,SAAU,SACV,SAAU,SACV,SAAU,SACV,SAAU,SACV,OAAQ,SACR,QAAS,SACT,UAAW,SACX,IAAK,SACL,OAAQ,SACR,IAAK,SACL,IAAK,OACL,MAAO,SACP,IAAK,SACL,QAAS,SACT,OAAQ,SACR,QAAS,SACT,MAAO,SACP,KAAM,SACN,MAAO,SACP,OAAQ,SACR,UAAW,SACX,QAAS,SACT,WAAY,SACZ,IAAK,SACL,KAAM,SACN,MAAO,SACP,UAAW,SACX,KAAM,SACN,KAAM,SACN,KAAM,SACN,KAAM,SACN,OAAQ,SACR,OAAQ,SACR,OAAQ,SACR,MAAO,SACP,MAAO,SACP,QAAS,SACT,IAAK,SACL,KAAM,OACN,QAAS,SACT,IAAK,SACL,OAAQ,SACR,MAAO,SACP,WAAY,SACZ,IAAK,KACL,MAAO,SACP,OAAQ,SACR,OAAQ,SACR,KAAM,SACN,UAAW,OACX,IAAK,SACL,SAAU,SACV,WAAY,SACZ,QAAS,SACT,SAAU,SACV,QAAS,SACT,WAAY,SACZ,KAAM,KACN,OAAQ,SACR,KAAM,SACN,QAAS,SACT,MAAO,SACP,QAAS,SACT,KAAM,SACN,UAAW,SACX,OAAQ,SACR,MAAO,SACP,WAAY,SACZ,UAAW,SACX,QAAS,SACT,KAAM,SACN,IAAK,SACL,KAAM,SACN,QAAS,SACT,MAAO,SACP,YAAa,SACb,GAAI,SACJ,SAAU,SACV,MAAO,SACP,UAAW,SACX,MAAO,SACP,UAAW,SACX,MAAO,SACP,QAAS,SACT,MAAO,SACP,OAAQ,SACR,MAAO,SACP,IAAK,SACL,KAAM,SACN,KAAM,SACN,KAAM,SACN,SAAU,OACV,OAAQ,SACR,IAAK,SACL,IAAK,OACL,MAAO,SACP,OAAQ,SACR,GAAI,SACJ,MAAO,SACP,IAAK,SACL,KAAM,SACN,UAAW,SACX,GAAI,SACJ,MAAO,QACT,EAiCM,EAAS,uGAiCT,EAAK,AAAA,GAAK,GAAK,SAAY,AAAI,MAAJ,EAAY,AAAyB,MAAzB,KAAK,GAAA,CAAI,EAAG,EAAM,KAAe,KACxE,EAAO,AAAA,GAAK,GAAK,OAAU,EAAI,MAAQ,KAAK,GAAA,CAAK,AAAA,CAAA,EAAI,IAAA,EAAS,MAAO,KAa3E,SAAS,EAAO,CAAC,CAAE,CAAC,CAAE,CAAK,EACzB,GAAI,EAAG,CACL,IAAI,EAAM,EAAQ,EAClB,CAAA,CAAG,CAAC,EAAE,CAAG,KAAK,GAAA,CAAI,EAAG,KAAK,GAAA,CAAI,CAAG,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CAAG,EAAO,AAAM,IAAN,EAAU,IAAM,IACvE,EAjUK,EAAM,EAiUG,EAlUE,KAAA,EAAG,KAAA,GAmUnB,EAAE,CAAA,CAAI,CAAG,CAAC,EAAE,CACZ,EAAE,CAAA,CAAI,CAAG,CAAC,EAAE,CACZ,EAAE,CAAA,CAAI,CAAG,CAAC,EAAE,AACd,CACF,CACA,SAAS,EAAM,CAAC,CAAE,CAAK,EACrB,OAAO,EAAI,OAAO,MAAA,CAAO,GAAS,CAAC,EAAG,GAAK,CAC7C,CACA,SAAS,EAAW,CAAK,EACvB,IAAI,EAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAG,EAYjC,OAXI,MAAM,OAAA,CAAQ,GACZ,EAAM,MAAA,EAAU,IAClB,EAAI,CAAC,EAAG,CAAK,CAAC,EAAE,CAAE,EAAG,CAAK,CAAC,EAAE,CAAE,EAAG,CAAK,CAAC,EAAE,CAAE,EAAG,GAAG,EAC9C,EAAM,MAAA,CAAS,GACjB,CAAA,EAAE,CAAA,CAAI,EAAI,CAAK,CAAC,EAAE,CAAA,GAKtB,AADA,CAAA,EAAI,EAAM,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EAAA,EACtC,CAAA,CAAI,EAAI,EAAE,CAAZ,EAEK,CACT,CAOA,MAAM,EACJ,YAAY,CAAK,CAAE,KAKb,EAJJ,GAAI,aAAiB,EACnB,OAAO,EAET,IAAM,EAAO,OAAO,EAEpB,GAAI,AAAS,WAAT,EACF,EAAI,EAAW,QACV,GAAI,AAAS,WAAT,EACT,KA/bA,EADA,CAgcI,CAhcJ,EAAM,AAgcO,EAhcH,MAAd,CAEe,MAAX,AA8ba,CA9bV,CAAC,EAAE,GACJ,AAAQ,IAAR,GAAa,AAAQ,IAAR,EACf,EAAM,CACJ,EAAG,IAAM,AAAgB,GAAhB,CAAK,CAAC,AA2bJ,CA3bO,CAAC,EAAE,CAAC,CACtB,EAAG,IAAM,AAAgB,GAAhB,CAAK,CAAC,AA0bJ,CA1bO,CAAC,EAAE,CAAC,CACtB,EAAG,IAAM,AAAgB,GAAhB,CAAK,CAAC,AAybJ,CAzbO,CAAC,EAAE,CAAC,CACtB,EAAG,AAAQ,IAAR,EAAY,AAAgB,GAAhB,CAAK,CAAC,AAwbV,CAxba,CAAC,EAAE,CAAC,CAAQ,GACtC,EACS,CAAA,AAAQ,IAAR,GAAa,AAAQ,IAAR,CAAQ,GAC9B,CAAA,EAAM,CACJ,EAAG,CAAK,CAAC,AAobE,CApbC,CAAC,EAAE,CAAC,EAAI,EAAI,CAAK,CAAC,AAobnB,CApbsB,CAAC,EAAE,CAAC,CACrC,EAAG,CAAK,CAAC,AAmbE,CAnbC,CAAC,EAAE,CAAC,EAAI,EAAI,CAAK,CAAC,AAmbnB,CAnbsB,CAAC,EAAE,CAAC,CACrC,EAAG,CAAK,CAAC,AAkbE,CAlbC,CAAC,EAAE,CAAC,EAAI,EAAI,CAAK,CAAC,AAkbnB,CAlbsB,CAAC,EAAE,CAAC,CACrC,EAAG,AAAQ,IAAR,EAAa,CAAK,CAAC,AAibX,CAjbc,CAAC,EAAE,CAAC,EAAI,EAAI,CAAK,CAAC,AAibhC,CAjbmC,CAAC,EAAE,CAAC,CAAI,GACxD,CAAA,GAgbA,EAAI,AA7aD,GA6aoB,AAzG7B,SAAmB,CAAG,EACf,GAEH,CAAA,AADA,CAAA,EAAQ,AApBZ,eAIM,EAAG,EAAG,EAAG,EAAI,EAHjB,IAAM,EAAW,CAAC,EACZ,EAAO,OAAO,IAAA,CAAK,GACnB,EAAQ,OAAO,IAAA,CAAK,GAE1B,IAAK,EAAI,EAAG,EAAI,EAAK,MAAA,CAAQ,IAAK,CAEhC,IAAK,EAAI,EADT,EAAK,EAAK,CAAI,CAAC,EAAE,CACL,EAAI,EAAM,MAAA,CAAQ,IAC5B,EAAI,CAAK,CAAC,EAAE,CACZ,EAAK,EAAG,OAAA,CAAQ,EAAG,CAAG,CAAC,EAAE,EAE3B,EAAI,SAAS,CAAO,CAAC,EAAG,CAAE,IAC1B,CAAQ,CAAC,EAAG,CAAG,CAAC,GAAK,GAAK,IAAM,GAAK,EAAI,IAAM,AAAI,IAAJ,EAAS,AAC1D,CACA,OAAO,CACT,GAKI,EACM,WAAA,CAAc,CAAC,EAAG,EAAG,EAAG,EAAE,AAAA,EAElC,IAAM,EAAI,CAAK,CAAC,EAAI,WAAA,GAAc,CAClC,OAAO,GAAK,CACV,EAAG,CAAC,CAAC,EAAE,CACP,EAAG,CAAC,CAAC,EAAE,CACP,EAAG,CAAC,CAAC,EAAE,CACP,EAAG,AAAa,IAAb,EAAE,MAAA,CAAe,CAAC,CAAC,EAAE,CAAG,GAC7B,CACF,EA6FuC,IAfrC,CAAA,AAAI,AAAkB,MAAlB,AAeyD,EAfrD,MAAA,CAAO,GACN,AA5EX,SAAkB,CAAG,MAGf,EAAG,EAAG,EAFV,IAAM,EAAI,EAAO,IAAA,CAAK,GAClB,EAAI,IAER,GAAK,GAGL,GAAI,CAAC,CAAC,EAAE,GAAK,EAAG,CACd,IAAM,EAAI,CAAC,CAAC,CAAC,EAAE,CACf,EAAI,CAAC,CAAC,EAAE,CAAG,EAAI,GAAK,EAAI,AAAI,IAAJ,EAAS,EAAG,IACtC,CAOA,OANA,EAAI,CAAC,CAAC,CAAC,EAAE,CACT,EAAI,CAAC,CAAC,CAAC,EAAE,CACT,EAAI,CAAC,CAAC,CAAC,EAAE,CAIF,CACL,EAJF,EAAI,IAAO,CAAA,CAAC,CAAC,EAAE,CAAG,EAAI,GAAK,EAAI,EAAG,EAAG,IAAA,EAKnC,EAJF,EAAI,IAAO,CAAA,CAAC,CAAC,EAAE,CAAG,EAAI,GAAK,EAAI,EAAG,EAAG,IAAA,EAKnC,EAJF,EAAI,IAAO,CAAA,CAAC,CAAC,EAAE,CAAG,EAAI,GAAK,EAAI,EAAG,EAAG,IAAA,EAKnC,EAAG,CACL,EACF,EAmE+D,GAZtD,AAlVT,SAAkB,CAAG,MAGf,EAFJ,IAAM,EAAI,EAAO,IAAA,CAAK,GAClB,EAAI,IAER,GAAI,CAAC,EACH,MAEE,CAAA,CAAC,CAAC,EAAE,GAAK,GACX,CAAA,EAAI,CAAC,CAAC,EAAE,CAAG,EAAI,CAAC,CAAC,CAAC,EAAE,EAAI,EAAI,CAAC,CAAC,CAAC,EAAE,CAAA,EAEnC,IAAM,EAAI,EAAI,CAAC,CAAC,CAAC,EAAE,EACb,EAAK,CAAC,CAAC,CAAC,EAAE,CAAG,IACb,EAAK,CAAC,CAAC,CAAC,EAAE,CAAG,IAQnB,MAAO,CACL,EAAG,CAPH,EADE,AAAS,QAAT,CAAC,CAAC,EAAE,CArBD,EAAM,EAsBC,EAAG,EAAI,GACV,AAAS,QAAT,CAAC,CAAC,EAAE,CApBR,EAAM,EAqBC,EAAG,EAAI,GA3Bd,EAAM,EA6BC,EAAG,EAAI,GAGf,CAAC,EAAE,CACP,EAAG,CAAC,CAAC,EAAE,CACP,EAAG,CAAC,CAAC,EAAE,CACP,EAAG,CACL,CACF,EAoU+D,EAf7D,CAcS,CAGP,IAAI,CAAC,IAAA,CAAO,EACZ,IAAI,CAAC,MAAA,CAAS,CAAC,CAAC,CAClB,CACA,IAAI,OAAQ,CACV,OAAO,IAAI,CAAC,MAAZ,AACF,CACA,IAAI,KAAM,CACR,IAAI,EAAI,EAAM,IAAI,CAAC,IAAnB,EAIA,OAHI,GACF,CAAA,EAAE,CAAA,CAAI,EAAI,EAAE,CADd,CAAA,EAGO,CACT,CACA,IAAI,IAAI,CAAG,CAAE,CACX,IAAI,CAAC,IAAA,CAAO,EAAW,EACzB,CACA,WAAY,KApFK,EAqFf,OAAO,IAAI,CAAC,MAAA,CApFP,CADU,EAqFgB,IAAI,CAAC,IAAA,GAnFpC,CAAA,EAAE,CAAA,CAAI,IACF,CAAC,KAAK,EAAE,EAAE,CAAA,CAAE,EAAE,EAAE,EAAE,CAAA,CAAE,EAAE,EAAE,EAAE,CAAA,CAAE,EAAE,EAAE,EAAI,EAAE,CAAA,EAAG,CAAC,CAAC,CAC3C,CAAC,IAAI,EAAE,EAAE,CAAA,CAAE,EAAE,EAAE,EAAE,CAAA,CAAE,EAAE,EAAE,EAAE,CAAA,CAAE,CAAC,CAAC,AAAD,EAiFY,KAAA,CAC9C,CACA,WAAY,KA/bK,EACb,EA+bF,OAAO,IAAI,CAAC,MAAA,EA/bV,EAAI,EADS,EAgcgB,IAAI,CAAC,IAAA,EA/bjB,EAAK,EACnB,EACH,IAAM,EAAE,EAAE,CAAA,EAAK,EAAE,EAAE,CAAA,EAAK,EAAE,EAAE,CAAA,EAAK,EAAM,EAAE,CAAA,CAAG,GAC5C,KAAA,GA4b0C,KAAA,CAC9C,CACA,WAAY,CACV,OAAO,IAAI,CAAC,MAAA,CAAS,AApVzB,SAAmB,CAAC,EAClB,GAAI,CAAC,EACH,OAEF,IAAM,EAAI,EAAQ,GACZ,EAAI,CAAC,CAAC,EAAE,CACR,EAAI,EAAI,CAAC,CAAC,EAAE,EACZ,EAAI,EAAI,CAAC,CAAC,EAAE,EAClB,OAAO,EAAE,CAAA,CAAI,IACT,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAI,EAAE,CAAA,EAAG,CAAC,CAAC,CACvC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,AAC/B,EAyUmC,IAAI,CAAC,IAAA,EAAQ,KAAA,CAC9C,CACA,IAAI,CAAK,CAAE,CAAM,CAAE,CACjB,GAAI,EAAO,KAGL,EAFJ,IAAM,EAAK,IAAI,CAAC,GAAhB,CACM,EAAK,EAAM,GAAjB,CAEM,EAAI,IAAW,EAAK,GAAM,EAC1B,EAAI,EAAI,EAAI,EACZ,EAAI,EAAG,CAAA,CAAI,EAAG,CAApB,CACM,EAAM,AAAC,CAAA,AAAA,CAAA,EAAI,GAAM,GAAK,EAAK,AAAA,CAAA,EAAI,CAAA,EAAM,CAAA,EAAI,EAAI,CAAA,CAAA,EAAM,CAAA,EAAK,EAC9D,EAAK,EAAI,EACT,EAAG,CAAA,CAAI,IAAO,EAAK,EAAG,CAAA,CAAI,EAAK,EAAG,CAAA,CAAI,GACtC,EAAG,CAAA,CAAI,IAAO,EAAK,EAAG,CAAA,CAAI,EAAK,EAAG,CAAA,CAAI,GACtC,EAAG,CAAA,CAAI,IAAO,EAAK,EAAG,CAAA,CAAI,EAAK,EAAG,CAAA,CAAI,GACtC,EAAG,CAAA,CAAI,EAAI,EAAG,CAAA,CAAK,AAAA,CAAA,EAAI,CAAA,EAAK,EAAG,CAA/B,CACA,IAAI,CAAC,GAAA,CAAM,CACb,CACA,OAAO,IAAI,AACb,CACA,YAAY,CAAK,CAAE,CAAC,CAAE,CAIpB,OAHI,GACF,CAAA,IAAI,CAAC,IAAA,CAAO,AAvGlB,SAAqB,CAAI,CAAE,CAAI,CAAE,CAAC,EAChC,IAAM,EAAI,EAAK,EAAI,EAAK,CAAxB,GACM,EAAI,EAAK,EAAI,EAAK,CAAxB,GACM,EAAI,EAAK,EAAI,EAAK,CAAxB,GACA,MAAO,CACL,EAAG,EAAI,EAAG,EAAI,EAAK,CAAA,EAAK,EAAI,EAAK,CAAA,GAAM,CAAA,IACvC,EAAG,EAAI,EAAG,EAAI,EAAK,CAAA,EAAK,EAAI,EAAK,CAAA,GAAM,CAAA,IACvC,EAAG,EAAI,EAAG,EAAI,EAAK,CAAA,EAAK,EAAI,EAAK,CAAA,GAAM,CAAA,IACvC,EAAG,EAAK,CAAA,CAAI,EAAK,CAAA,EAAK,CAAA,CAAI,EAAK,CAAA,AAAA,CACjC,CACF,EA6F8B,IAAI,CAAC,IAAA,CAAM,EAAM,IAAA,CAAM,EADjD,EAGO,IAAI,AACb,CACA,OAAQ,CACN,OAAO,IAAI,EAAM,IAAI,CAAC,GAAtB,CACF,CACA,MAAM,CAAC,CAAE,CAEP,OADA,IAAI,CAAC,IAAA,CAAK,CAAA,CAAI,EAAI,GACX,IAAI,AACb,CACA,QAAQ,CAAK,CAAE,CACb,IAAM,EAAM,IAAI,CAAC,IAAjB,CAEA,OADA,EAAI,CAAA,EAAK,EAAI,EACN,IAAI,AACb,CACA,WAAY,CACV,IAAM,EAAM,IAAI,CAAC,IAAjB,CACM,EAAM,EAAM,AAAQ,GAAR,EAAI,CAAA,CAAU,AAAQ,IAAR,EAAI,CAAA,CAAW,AAAQ,IAAR,EAAI,CAAA,EAEnD,OADA,EAAI,CAAA,CAAI,EAAI,CAAA,CAAI,EAAI,CAAA,CAAI,EACjB,IAAI,AACb,CACA,QAAQ,CAAK,CAAE,CACb,IAAM,EAAM,IAAI,CAAC,IAAjB,CAEA,OADA,EAAI,CAAA,EAAK,EAAI,EACN,IAAI,AACb,CACA,QAAS,CACP,IAAM,EAAI,IAAI,CAAC,IAAf,CAIA,OAHA,EAAE,CAAA,CAAI,IAAM,EAAE,CAAd,CACA,EAAE,CAAA,CAAI,IAAM,EAAE,CAAd,CACA,EAAE,CAAA,CAAI,IAAM,EAAE,CAAd,CACO,IAAI,AACb,CACA,QAAQ,CAAK,CAAE,CAEb,OADA,EAAO,IAAI,CAAC,IAAA,CAAM,EAAG,GACd,IAAI,AACb,CACA,OAAO,CAAK,CAAE,CAEZ,OADA,EAAO,IAAI,CAAC,IAAA,CAAM,EAAG,CAAC,GACf,IAAI,AACb,CACA,SAAS,CAAK,CAAE,CAEd,OADA,EAAO,IAAI,CAAC,IAAA,CAAM,EAAG,GACd,IAAI,AACb,CACA,WAAW,CAAK,CAAE,CAEhB,OADA,EAAO,IAAI,CAAC,IAAA,CAAM,EAAG,CAAC,GACf,IAAI,AACb,CACA,OAAO,CAAG,CAAE,KApaE,EACV,EAqaF,MApaF,CADI,EAAI,EADM,EAqaL,IAAI,CAAC,IAAA,EAnab,CAAC,EAAE,CAAG,EAAI,CAAC,CAAC,EAAE,CAmaK,GAlapB,EAzCO,EAAM,EAyCD,EA1CM,KAAA,EAAG,KAAA,GA2CrB,EAAE,CAAA,CAAI,CAAC,CAAC,EAAE,CACV,EAAE,CAAA,CAAI,CAAC,CAAC,EAAE,CACV,EAAE,CAAA,CAAI,CAAC,CAAC,EAAE,CAgaD,IAAI,AACb,CACF,C,G,E,Q,C,Q,S,C,C,C,E,I,E,E,S,E,E,SCnkBA,IAAM,EAAgB,CACrB,mFAAmF;AACnF,UAEA,yEAAyE;AACzE,OAEA,iDAAiD;AACjD,MACA,CAEK,EAAkB,CAAC,EACzB,IAAK,IAAM,KAAS,OAAO,IAAA,CAAK,GAC/B,CAAe,CAAC,IAAI,CAAO,CAAC,EAAM,CAAC,MAAf,CAAsB,CAAC,IAAA,GAAO,IAAA,CAAK,IAAI,CAAG,EAG/D,IAAM,EAAW,CAAC,EAElB,SAAS,EAAM,CAAM,CAAE,CAAK,MAavB,EACA,EAbJ,GAAI,CAAE,CAAA,IAAI,YAAY,CAAA,EACrB,OAAO,IAAI,EAAM,EAAQ,GAO1B,GAJI,GAAS,KAAS,GACrB,CAAA,EAAQ,IADT,EAII,GAAS,CAAE,CAAA,KAAS,CAAA,EACvB,MAAM,AAAI,MAAM,kBAAoB,GAMrC,GAAI,AAAU,MAAV,EACH,IAAI,CAAC,KAAA,CAAQ,MACb,IAAI,CAAC,KAAA,CAAQ,CAAC,EAAG,EAAG,EAAE,CACtB,IAAI,CAAC,MAAA,CAAS,OACR,GAAI,aAAkB,EAC5B,IAAI,CAAC,KAAA,CAAQ,EAAO,KAApB,CACA,IAAI,CAAC,KAAA,CAAQ,IAAI,EAAO,KAAP,CAAa,CAC9B,IAAI,CAAC,MAAA,CAAS,EAAO,MAArB,MACM,GAAI,AAAkB,UAAlB,OAAO,EAAqB,CACtC,IAAM,EAAS,EAAA,GAAA,CAAgB,GAC/B,GAAI,AAAW,OAAX,EACH,MAAM,AAAI,MAAM,sCAAwC,EAGzD,CAAA,IAAI,CAAC,KAAA,CAAQ,EAAO,KAApB,CACA,EAAW,CAAO,CAAC,IAAI,CAAC,KAAA,CAAM,CAAC,QAA/B,CACA,IAAI,CAAC,KAAA,CAAQ,EAAO,KAAA,CAAM,KAAA,CAAM,EAAG,GACnC,IAAI,CAAC,MAAA,CAAS,AAAkC,UAAlC,OAAO,EAAO,KAAK,CAAC,EAAS,CAAgB,EAAO,KAAK,CAAC,EAAS,CAAG,CACrF,MAAO,GAAI,EAAO,MAAA,CAAS,EAAG,CAC7B,IAAI,CAAC,KAAA,CAAQ,GAAS,MACtB,EAAW,CAAO,CAAC,IAAI,CAAC,KAAA,CAAM,CAAC,QAA/B,CACA,IAAM,EAAW,MAAM,SAAA,CAAU,KAAA,CAAM,IAAA,CAAK,EAAQ,EAAG,EACvD,CAAA,IAAI,CAAC,KAAA,CAAQ,EAAU,EAAU,GACjC,IAAI,CAAC,MAAA,CAAS,AAA4B,UAA5B,OAAO,CAAM,CAAC,EAAS,CAAgB,CAAM,CAAC,EAAS,CAAG,CACzE,MAAO,GAAI,AAAkB,UAAlB,OAAO,EACjB,kDAAkD;AAClD,IAAI,CAAC,KAAA,CAAQ,MACb,IAAI,CAAC,KAAA,CAAQ,CACX,GAAU,GAAM,IAChB,GAAU,EAAK,IAChB,AAAS,IAAT,EACA,CACD,IAAI,CAAC,MAAA,CAAS,MACR,CACN,IAAI,CAAC,MAAA,CAAS,EAEd,IAAM,EAAO,OAAO,IAAA,CAAK,EACrB,CAAA,UAAW,IACd,EAAK,MAAA,CAAO,EAAK,OAAA,CAAQ,SAAU,GACnC,IAAI,CAAC,MAAA,CAAS,AAAwB,UAAxB,OAAO,EAAO,KAAA,CAAqB,EAAO,KAAA,CAAQ,GAGjE,IAAM,EAAa,EAAK,IAAA,GAAO,IAAA,CAAK,IACpC,GAAI,CAAE,CAAA,KAAc,CAAA,EACnB,MAAM,AAAI,MAAM,sCAAwC,KAAK,SAAA,CAAU,GAGxE,CAAA,IAAI,CAAC,KAAA,CAAQ,CAAe,CAAC,EAAW,CAExC,GAAM,CAAA,OAAC,CAAM,CAAC,CAAG,CAAO,CAAC,IAAI,CAAC,KAAA,CAAM,CAC9B,EAAQ,EAAE,CAChB,IAAK,EAAI,EAAG,EAAI,EAAO,MAAA,CAAQ,IAC9B,EAAM,IAAA,CAAK,CAAM,CAAC,CAAM,CAAC,EAAE,CAAC,CAG7B,CAAA,IAAI,CAAC,KAAA,CAAQ,EAAU,EACxB,CAEA,uCAAuC;AACvC,GAAI,CAAQ,CAAC,IAAI,CAAC,KAAA,CAAM,CAEvB,IAAK,EAAI,EADT,EAAW,CAAO,CAAC,IAAI,CAAC,KAAA,CAAM,CAAC,QAA/B,CACY,EAAI,EAAU,IAAK,CAC9B,IAAM,EAAQ,CAAQ,CAAC,IAAI,CAAC,KAAA,CAAM,CAAC,EAAE,CACjC,GACH,CAAA,IAAI,CAAC,KAAK,CAAC,EAAE,CAAG,EAAM,IAAI,CAAC,KAAK,CAAC,EAAE,CAAA,CAErC,CAGD,IAAI,CAAC,MAAA,CAAS,KAAK,GAAA,CAAI,EAAG,KAAK,GAAA,CAAI,EAAG,IAAI,CAAC,MAA3C,GAEI,OAAO,MAAA,EACV,OAAO,MAAA,CAAO,IAAI,CAEpB,CAmSA,mDAAmD;AACnD,IAAK,IAAM,KAlSX,EAAM,SAAA,CAAY,CACjB,WACC,OAAO,IAAI,CAAC,MAAZ,EACD,EAEA,SACC,OAAO,IAAI,CAAC,IAAI,CAAC,KAAA,CAAM,EACxB,EAEA,OAAO,CAAM,EACZ,IAAI,EAAO,IAAI,CAAC,KAAA,IAAS,EAAA,EAAA,CAAiB,IAAI,CAAG,IAAI,CAAC,GAAtD,GACA,EAAO,EAAK,KAAA,CAAM,AAAkB,UAAlB,OAAO,EAAsB,EAAS,GACxD,IAAM,EAAO,AAAgB,IAAhB,EAAK,MAAA,CAAe,EAAK,KAAA,CAAQ,IAAI,EAAK,KAAL,CAAY,IAAI,CAAC,MAAL,CAAY,CAC1E,OAAO,EAAA,EAAc,CAAC,EAAK,KAAA,CAAM,CAAC,EACnC,EAEA,cAAc,CAAM,EACnB,IAAM,EAAO,IAAI,CAAC,GAAA,GAAM,KAAA,CAAM,AAAkB,UAAlB,OAAO,EAAsB,EAAS,GAC9D,EAAO,AAAgB,IAAhB,EAAK,MAAA,CAAe,EAAK,KAAA,CAAQ,IAAI,EAAK,KAAL,CAAY,IAAI,CAAC,MAAL,CAAY,CAC1E,OAAO,EAAA,EAAA,CAAe,GAAA,CAAI,OAAA,CAAQ,EACnC,EAEA,QACC,OAAO,AAAgB,IAAhB,IAAI,CAAC,MAAA,CAAe,IAAI,IAAI,CAAC,KAAL,CAAW,CAAG,IAAI,IAAI,CAAC,KAAL,CAAY,IAAI,CAAC,MAAL,CAAY,AAC1E,EAEA,SACC,IAAM,EAAS,CAAC,EACV,CAAA,SAAC,CAAQ,CAAC,CAAG,CAAO,CAAC,IAAI,CAAC,KAAA,CAAM,CAChC,CAAA,OAAC,CAAM,CAAC,CAAG,CAAO,CAAC,IAAI,CAAC,KAAA,CAAM,CAEpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAU,IAC7B,CAAM,CAAC,CAAM,CAAC,EAAE,CAAC,CAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAOlC,OAJoB,IAAhB,IAAI,CAAC,MAAA,EACR,CAAA,EAAO,KAAA,CAAQ,IAAI,CAAC,MADrB,AAAA,EAIO,CACR,EAEA,YACC,IAAM,EAAM,IAAI,CAAC,GAAA,GAAM,KAAvB,CASA,OARA,CAAG,CAAC,EAAE,EAAI,IACV,CAAG,CAAC,EAAE,EAAI,IACV,CAAG,CAAC,EAAE,EAAI,IAEU,IAAhB,IAAI,CAAC,MAAA,EACR,EAAI,IAAA,CAAK,IAAI,CAAC,MADf,EAIO,CACR,EAEA,aACC,IAAM,EAAM,IAAI,CAAC,GAAA,GAAM,MAAvB,GASA,OARA,EAAI,CAAA,EAAK,IACT,EAAI,CAAA,EAAK,IACT,EAAI,CAAA,EAAK,IAEW,IAAhB,IAAI,CAAC,MAAA,EACR,CAAA,EAAI,KAAA,CAAQ,IAAI,CAAC,MADlB,AAAA,EAIO,CACR,EAEA,MAAM,CAAM,MAiQS,EA/PpB,OADA,EAAS,KAAK,GAAA,CAAI,GAAU,EAAG,GACxB,IAAI,EAAM,IAAI,IAAI,CAAC,KAAA,CAAM,GAAA,EA+PZ,EA/P6B,EAgQ3C,SAAU,CAAM,EACtB,OALM,OAAO,AAKE,EALK,OAAA,CAKG,GACxB,IAlQ4D,IAAI,CAAC,MAAL,CAAY,CAAE,IAAI,CAAC,KAAP,CACxE,EAEA,MAAM,CAAK,SACV,AAAI,AAAU,KAAA,IAAV,EACI,IAAI,EAAM,IAAI,IAAI,CAAC,KAAL,CAAY,KAAK,GAAA,CAAI,EAAG,KAAK,GAAA,CAAI,EAAG,IAAQ,CAAE,IAAI,CAAC,KAAP,EAG3D,IAAI,CAAC,MAAZ,AACD,EAEA,MAAM;AACN,IAAK,EAAO,MAAO,EAAG,EAAM,MAC5B,MAAO,EAAO,MAAO,EAAG,EAAM,MAC9B,KAAM,EAAO,MAAO,EAAG,EAAM,MAE7B,IAAK,EAAO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAM,CAAE,EAAG,AAAA,GAAU,AAAA,CAAA,EAAS,IAAO,GAAA,EAAO,KAErF,YAAa,EAAO,MAAO,EAAG,EAAM,MACpC,UAAW,EAAO,MAAO,EAAG,EAAM,MAElC,YAAa,EAAO,MAAO,EAAG,EAAM,MACpC,MAAO,EAAO,MAAO,EAAG,EAAM,MAE9B,OAAQ,EAAO,MAAO,EAAG,EAAM,MAC/B,KAAM,EAAO,MAAO,EAAG,EAAM,MAE7B,MAAO,EAAO,MAAO,EAAG,EAAM,MAC9B,OAAQ,EAAO,MAAO,EAAG,EAAM,MAE/B,KAAM,EAAO,OAAQ,EAAG,EAAM,MAC9B,QAAS,EAAO,OAAQ,EAAG,EAAM,MACjC,OAAQ,EAAO,OAAQ,EAAG,EAAM,MAChC,MAAO,EAAO,OAAQ,EAAG,EAAM,MAE/B,EAAG,EAAO,MAAO,EAAG,EAAM,SAC1B,EAAG,EAAO,MAAO,EAAG,EAAM,MAC1B,EAAG,EAAO,MAAO,EAAG,EAAM,UAE1B,EAAG,EAAO,MAAO,EAAG,EAAM,MAC1B,EAAG,EAAO,MAAO,GACjB,EAAG,EAAO,MAAO,GAEjB,QAAQ,CAAK,SACZ,AAAI,AAAU,KAAA,IAAV,EACI,IAAI,EAAM,GAGX,CAAO,CAAC,IAAI,CAAC,KAAA,CAAM,CAAC,OAAA,CAAQ,IAAI,CAAC,KAAxC,CACD,EAEA,IAAI,CAAK,SACR,AAAI,AAAU,KAAA,IAAV,EACI,IAAI,EAAM,GAGX,EAAA,EAAA,CAAe,GAAA,CAAI,IAAI,CAAC,GAAA,GAAM,KAAA,GAAQ,KAA7C,CACD,EAEA,KAAK,CAAK,EACT,GAAI,AAAU,KAAA,IAAV,EACH,OAAO,IAAI,EAAM,GAGlB,IAAM,EAAW,IAAI,CAAC,GAAA,GAAM,KAAA,GAAQ,KAApC,CAEI,EAAW,KAAK,KAAA,CAAM,AAAc,IAAd,IAAI,CAAC,MAAA,EAAc,QAAA,CAAS,IAAI,WAA1D,GAKA,OAJwB,IAApB,EAAS,MAAA,EACZ,CAAA,EAAW,IAAM,CADlB,EAIO,EAAA,EAAA,CAAe,GAAA,CAAI,GAAY,CACvC,EAEA,YACC,IAAM,EAAM,IAAI,CAAC,GAAA,GAAM,KAAvB,CACA,MAAO,AAAE,CAAA,AAAS,IAAT,CAAG,CAAC,EAAE,AAAG,GAAS,GAAQ,AAAA,CAAA,AAAS,IAAT,CAAG,CAAC,EAAE,AAAG,GAAS,EAAM,AAAS,IAAT,CAAG,CAAC,EAAE,AAClE,EAEA,aACC,oDAAoD;AACpD,IAAM,EAAM,IAAI,CAAC,GAAA,GAAM,KAAvB,CAEM,EAAM,EAAE,CACd,IAAK,GAAM,CAAC,EAAG,EAAQ,GAAI,EAAI,OAAA,GAAW,CACzC,IAAM,EAAO,EAAU,GACvB,CAAA,CAAG,CAAC,EAAE,CAAG,GAAS,OAAW,EAAO,MAAQ,AAAE,CAAA,AAAA,CAAA,EAAO,IAAA,EAAS,KAAA,GAAU,GACzE,CAEA,OAAO,MAAS,CAAG,CAAC,EAAE,CAAG,MAAS,CAAG,CAAC,EAAE,CAAG,MAAS,CAAG,CAAC,EAAE,AAC3D,EAEA,SAAS,CAAM,EACd,iDAAiD;AACjD,IAAM,EAAO,IAAI,CAAC,UAAlB,GACM,EAAO,EAAO,UAApB,UAEA,AAAI,EAAO,EACF,AAAA,CAAA,EAAO,GAAA,EAAS,CAAA,EAAO,GAAA,EAGxB,AAAA,CAAA,EAAO,GAAA,EAAS,CAAA,EAAO,GAAA,CAChC,EAEA,MAAM,CAAM,EACX,gDAAgD;AAChD,IAAM,EAAgB,IAAI,CAAC,QAAA,CAAS,UACpC,AAAI,GAAiB,EACb,MAGD,GAAkB,IAAO,KAAO,EACxC,EAEA,SACC,sEAAsE;AACtE,IAAM,EAAM,IAAI,CAAC,GAAA,GAAM,KAAvB,CACM,EAAM,AAAC,CAAA,AAAS,KAAT,CAAG,CAAC,EAAE,CAAU,AAAS,KAAT,CAAG,CAAC,EAAE,CAAU,AAAS,IAAT,CAAG,CAAC,EAAE,AAAG,EAAO,IAC7D,OAAO,EAAM,GACd,EAEA,UACC,MAAO,CAAC,IAAI,CAAC,MAAb,EACD,EAEA,SACC,IAAM,EAAM,IAAI,CAAC,GAAjB,GACA,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACtB,EAAI,KAAK,CAAC,EAAE,CAAG,IAAM,EAAI,KAAK,CAAC,EAAE,CAGlC,OAAO,CACR,EAEA,QAAQ,CAAK,EACZ,IAAM,EAAM,IAAI,CAAC,GAAjB,GAEA,OADA,EAAI,KAAK,CAAC,EAAE,EAAI,EAAI,KAAK,CAAC,EAAE,CAAG,EACxB,CACR,EAEA,OAAO,CAAK,EACX,IAAM,EAAM,IAAI,CAAC,GAAjB,GAEA,OADA,EAAI,KAAK,CAAC,EAAE,EAAI,EAAI,KAAK,CAAC,EAAE,CAAG,EACxB,CACR,EAEA,SAAS,CAAK,EACb,IAAM,EAAM,IAAI,CAAC,GAAjB,GAEA,OADA,EAAI,KAAK,CAAC,EAAE,EAAI,EAAI,KAAK,CAAC,EAAE,CAAG,EACxB,CACR,EAEA,WAAW,CAAK,EACf,IAAM,EAAM,IAAI,CAAC,GAAjB,GAEA,OADA,EAAI,KAAK,CAAC,EAAE,EAAI,EAAI,KAAK,CAAC,EAAE,CAAG,EACxB,CACR,EAEA,OAAO,CAAK,EACX,IAAM,EAAM,IAAI,CAAC,GAAjB,GAEA,OADA,EAAI,KAAK,CAAC,EAAE,EAAI,EAAI,KAAK,CAAC,EAAE,CAAG,EACxB,CACR,EAEA,QAAQ,CAAK,EACZ,IAAM,EAAM,IAAI,CAAC,GAAjB,GAEA,OADA,EAAI,KAAK,CAAC,EAAE,EAAI,EAAI,KAAK,CAAC,EAAE,CAAG,EACxB,CACR,EAEA,YACC,uEAAuE;AACvE,IAAM,EAAM,IAAI,CAAC,GAAA,GAAM,KAAvB,CACM,EAAQ,AAAS,GAAT,CAAG,CAAC,EAAE,CAAS,AAAS,IAAT,CAAG,CAAC,EAAE,CAAU,AAAS,IAAT,CAAG,CAAC,EAAE,CACnD,OAAO,EAAM,GAAA,CAAI,EAAO,EAAO,EAChC,EAEA,KAAK,CAAK,EACT,OAAO,IAAI,CAAC,KAAA,CAAM,IAAI,CAAC,MAAA,CAAU,IAAI,CAAC,MAAA,CAAS,EAChD,EAEA,QAAQ,CAAK,EACZ,OAAO,IAAI,CAAC,KAAA,CAAM,IAAI,CAAC,MAAA,CAAU,IAAI,CAAC,MAAA,CAAS,EAChD,EAEA,OAAO,CAAO,EACb,IAAM,EAAM,IAAI,CAAC,GAAjB,GACI,EAAM,EAAI,KAAK,CAAC,EAAE,CAItB,OAFA,EAAM,AADN,CAAA,EAAM,AAAC,CAAA,EAAM,CAAA,EAAW,GAAxB,EACY,EAAI,IAAM,EAAM,EAC5B,EAAI,KAAK,CAAC,EAAE,CAAG,EACR,CACR,EAEA,IAAI,CAAU,CAAE,CAAM,EACrB,uCAAuC;AACvC,mGAAmG;AACnG,GAAI,CAAC,GAAc,CAAC,EAAW,GAAA,CAC9B,MAAM,AAAI,MAAM,yEAA2E,OAAO,GAGnG,IAAM,EAAS,EAAW,GAA1B,GACM,EAAS,IAAI,CAAC,GAApB,GACM,EAAI,AAAW,KAAA,IAAX,EAAuB,GAAM,EAEjC,EAAI,EAAI,EAAI,EACZ,EAAI,EAAO,KAAA,GAAU,EAAO,KAAlC,GAEM,EAAM,AAAC,CAAA,AAAA,CAAA,EAAK,GAAM,GAAM,EAAK,AAAA,CAAA,EAAI,CAAA,EAAM,CAAA,EAAI,EAAI,CAAA,CAAA,EAAM,CAAA,EAAK,EAC1D,EAAK,EAAI,EAEf,OAAO,EAAM,GAAA,CACZ,EAAK,EAAO,GAAA,GAAQ,EAAK,EAAO,GAAA,GAChC,EAAK,EAAO,KAAA,GAAU,EAAK,EAAO,KAAA,GAClC,EAAK,EAAO,IAAA,GAAS,EAAK,EAAO,IAAA,GACjC,EAAO,KAAA,GAAU,EAAI,EAAO,KAAA,GAAW,CAAA,EAAI,CAAA,EAC7C,CACD,EAGoB,OAAO,IAAA,CAAK,IAAU,CACzC,GAAI,EAAc,QAAA,CAAS,GAC1B,SAGD,GAAM,CAAA,SAAC,CAAQ,CAAC,CAAG,CAAO,CAAC,EAAM,AAEjC,sBAAqB;AACrB,EAAM,SAAS,CAAC,EAAM,CAAG,SAAU,GAAG,CAAI,MAsEtB,SArEnB,AAAI,IAAI,CAAC,KAAA,GAAU,EACX,IAAI,EAAM,IAAI,EAGlB,EAAK,MAAA,CAAS,EACV,IAAI,EAAM,EAAM,GAGjB,IAAI,EAAM,IA8DX,MAAM,OAAA,CADO,EA7Dc,CAAO,CAAC,IAAI,CAAC,KAAA,CAAM,CAAC,EAAM,CAAC,GAAA,CAAI,IAAI,CAAC,KAAhD,GA8DQ,EAAQ,CAAC,EAAM,CA9DkC,IAAI,CAAC,MAAL,CAAY,CAAE,EAC7F,EAEA,gCAAgC;AAChC,CAAK,CAAC,EAAM,CAAG,SAAU,GAAG,CAAI,EAC/B,IAAI,EAAQ,CAAI,CAAC,EAAE,CAKnB,MAJqB,UAAjB,OAAO,GACV,CAAA,EAAQ,EAAU,EAAM,EADzB,EAIO,IAAI,EAAM,EAAO,EACzB,CACD,CAYA,SAAS,EAAO,CAAK,CAAE,CAAO,CAAE,CAAQ,EAGvC,IAAK,IAAM,KAFX,EAAQ,MAAM,OAAA,CAAQ,GAAS,EAAQ,CAAC,EAAM,CAG5C,AAAA,CAAA,CAAQ,CAAC,EAAE,EAAK,CAAA,CAAQ,CAAC,EAAE,CAAG,EAAC,AAAD,CAAC,CAAG,CAAC,EAAQ,CAAG,EAKhD,OAFA,EAAQ,CAAK,CAAC,EAAE,CAET,SAAU,CAAK,EACrB,IAAI,SAEA,AAAU,KAAA,IAAV,GACC,GACH,CAAA,EAAQ,EAAS,EADlB,EAKA,AADA,CAAA,EAAS,IAAI,CAAC,EAAM,EAApB,EACO,KAAK,CAAC,EAAQ,CAAG,IAIzB,EAAS,IAAI,CAAC,EAAM,GAAG,KAAK,CAAC,EAAQ,CACjC,GACH,CAAA,EAAS,EAAS,EADnB,GAIO,CACR,CACD,CAEA,SAAS,EAAM,CAAG,EACjB,OAAO,SAAU,CAAC,EACjB,OAAO,KAAK,GAAA,CAAI,EAAG,KAAK,GAAA,CAAI,EAAK,GAClC,CACD,CAMA,SAAS,EAAU,CAAK,CAAE,CAAM,EAC/B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,IACH,UAApB,OAAO,CAAK,CAAC,EAAE,EAClB,CAAA,CAAK,CAAC,EAAE,CAAG,CAAA,EAIb,OAAO,CACR,CAEA,EAAA,OAAA,CAAiB,C,G,E,Q,C,Q,S,C,C,C,E,e,EC/ejB,IAAA,EAAA,EAAA,S,E,E,SAGI,EAAiB,OAAO,cAA5B,CAEI,EAAe,OAAO,MAAA,CAAO,MAEjC,uCAAuC;AACvC,IAAK,IAAI,KAAQ,EACZ,EAAe,IAAA,CAAK,EAAY,IACnC,CAAA,CAAY,CAAC,CAAU,CAAC,EAAK,CAAC,CAAG,CAFnC,EAMA,IAAI,EAAK,EAAA,OAAA,CAAiB,CACzB,GAAI,CAAC,EACL,IAAK,CAAC,CACP,CAwNA,WAAU;AACV,SAAS,EAAM,CAAG,CAAE,CAAG,CAAE,CAAG,EAC3B,OAAO,KAAK,GAAA,CAAI,KAAK,GAAA,CAAI,EAAK,GAAM,EACrC,CAEA,SAAS,EAAU,CAAG,EACrB,IAAI,EAAM,KAAK,KAAA,CAAM,GAAK,QAAA,CAAS,IAAI,WAAvC,GACA,OAAQ,EAAI,MAAA,CAAS,EAAK,IAAM,EAAM,CACvC,CA9NA,EAAG,GAAA,CAAM,SAAU,CAAM,EACxB,IACI,EACA,EACJ,OAHa,EAAO,SAAA,CAAU,EAAG,GAAG,WAApC,IAIC,IAAK,MACJ,EAAM,EAAG,GAAA,CAAI,GAAA,CAAI,GACjB,EAAQ,MACR,KACD,KAAK,MACJ,EAAM,EAAG,GAAA,CAAI,GAAA,CAAI,GACjB,EAAQ,MACR,KACD,SACC,EAAM,EAAG,GAAA,CAAI,GAAA,CAAI,GACjB,EAAQ,KAEV,QAEA,AAAK,EAIE,CAAC,MAAO,EAAO,MAAO,CAAG,EAHxB,IAIT,EAEA,EAAG,GAAA,CAAI,GAAA,CAAM,SAAU,CAAM,EAC5B,GAAI,CAAC,EACJ,OAAO,KASR,IACI,EACA,EACA,EAHA,EAAM,CAAC,EAAG,EAAG,EAAG,EAAE,CAKtB,GAAI,EAAQ,EAAO,KAAA,CAVT,mCAUqB,CAI9B,IAAK,EAAI,EAHT,EAAW,CAAK,CAAC,EAAE,CACnB,EAAQ,CAAK,CAAC,EAAE,CAEJ,EAAI,EAAG,IAAK,CACvB,yEAAyE;AACzE,IAAI,EAAK,AAAI,EAAJ,CACT,CAAA,CAAG,CAAC,EAAE,CAAG,SAAS,EAAM,KAAA,CAAM,EAAI,EAAK,GAAI,GAC5C,CAEI,GACH,CAAA,CAAG,CAAC,EAAE,CAAG,SAAS,EAAU,IAAM,GADnC,CAGD,MAAO,GAAI,EAAQ,EAAO,KAAA,CAxBf,uBAwB4B,CAItC,IAAK,EAAI,EAFT,EAAW,AADX,CAAA,EAAQ,CAAK,CAAC,EAAE,AAAF,CACE,CAAC,EAAE,CAEP,EAAI,EAAG,IAClB,CAAG,CAAC,EAAE,CAAG,SAAS,CAAK,CAAC,EAAE,CAAG,CAAK,CAAC,EAAE,CAAE,IAGpC,GACH,CAAA,CAAG,CAAC,EAAE,CAAG,SAAS,EAAW,EAAU,IAAM,GAD9C,CAGD,MAAO,GAAI,EAAQ,EAAO,KAAA,CAjCf,gIAiC4B,CACtC,IAAK,EAAI,EAAG,EAAI,EAAG,IAClB,CAAG,CAAC,EAAE,CAAG,SAAS,CAAK,CAAC,EAAI,EAAE,CAAE,EAG7B,CAAA,CAAK,CAAC,EAAE,GACP,CAAK,CAAC,EAAE,CACX,CAAG,CAAC,EAAE,CAAG,AAAuB,IAAvB,WAAW,CAAK,CAAC,EAAE,EAE5B,CAAG,CAAC,EAAE,CAAG,WAAW,CAAK,CAAC,EAAE,EAG/B,MAAO,GAAI,EAAQ,EAAO,KAAA,CA5ChB,wHA4C4B,CACrC,IAAK,EAAI,EAAG,EAAI,EAAG,IAClB,CAAG,CAAC,EAAE,CAAG,KAAK,KAAA,CAAM,AAA2B,KAA3B,WAAW,CAAK,CAAC,EAAI,EAAE,EAGxC,CAAA,CAAK,CAAC,EAAE,GACP,CAAK,CAAC,EAAE,CACX,CAAG,CAAC,EAAE,CAAG,AAAuB,IAAvB,WAAW,CAAK,CAAC,EAAE,EAE5B,CAAG,CAAC,EAAE,CAAG,WAAW,CAAK,CAAC,EAAE,EAG/B,MAAO,IAAI,CAAA,EAAQ,EAAO,KAAA,CAvDZ,UAuDkB,EAc/B,OAAO,gBAbP,AAAI,AAAa,gBAAb,CAAK,CAAC,EAAE,CACJ,CAAC,EAAG,EAAG,EAAG,EAAE,CAGf,EAAe,IAAA,CAAK,EAAY,CAAK,CAAC,EAAE,GAK7C,AADA,CAAA,EAAM,CAAU,CAAC,CAAK,CAAC,EAAE,CAAC,AAAD,CACtB,CAAC,EAAE,CAAG,EAEF,GANC,KAWT,IAAK,EAAI,EAAG,EAAI,EAAG,IAClB,CAAG,CAAC,EAAE,CAAG,EAAM,CAAG,CAAC,EAAE,CAAE,EAAG,KAI3B,OAFA,CAAG,CAAC,EAAE,CAAG,EAAM,CAAG,CAAC,EAAE,CAAE,EAAG,GAEnB,CACR,EAEA,EAAG,GAAA,CAAI,GAAA,CAAM,SAAU,CAAM,EAC5B,GAAI,CAAC,EACJ,OAAO,KAIR,IAAI,EAAQ,EAAO,KAAA,CADT,gLAGV,GAAI,EAAO,CACV,IAAI,EAAQ,WAAW,CAAK,CAAC,EAAE,EAM/B,MAAO,CALE,AAAC,CAAA,WAAW,CAAK,CAAC,EAAE,EAAI,IAAO,GAAA,EAAO,IACvC,EAAM,WAAW,CAAK,CAAC,EAAE,EAAG,EAAG,KAC/B,EAAM,WAAW,CAAK,CAAC,EAAE,EAAG,EAAG,KAC/B,EAAM,MAAM,GAAS,EAAI,EAAO,EAAG,GAExB,AACpB,CAEA,OAAO,IACR,EAEA,EAAG,GAAA,CAAI,GAAA,CAAM,SAAU,CAAM,EAC5B,GAAI,CAAC,EACJ,OAAO,KAIR,IAAI,EAAQ,EAAO,KAAA,CADT,uKAGV,GAAI,EAAO,CACV,IAAI,EAAQ,WAAW,CAAK,CAAC,EAAE,EAK/B,MAAO,CAJE,AAAC,CAAA,WAAW,CAAK,CAAC,EAAE,EAAI,IAAO,GAAA,EAAO,IACvC,EAAM,WAAW,CAAK,CAAC,EAAE,EAAG,EAAG,KAC/B,EAAM,WAAW,CAAK,CAAC,EAAE,EAAG,EAAG,KAC/B,EAAM,MAAM,GAAS,EAAI,EAAO,EAAG,GACxB,AACpB,CAEA,OAAO,IACR,EAEA,EAAG,EAAA,CAAG,GAAA,CAAM,WACX,IAAI,EAAO,EAAQ,WAEnB,MACC,IACA,EAAU,CAAI,CAAC,EAAE,EACjB,EAAU,CAAI,CAAC,EAAE,EACjB,EAAU,CAAI,CAAC,EAAE,EAChB,CAAA,CAAI,CAAC,EAAE,CAAG,EACP,EAAU,KAAK,KAAA,CAAM,AAAU,IAAV,CAAI,CAAC,EAAE,GAC7B,EAAA,CAEL,EAEA,EAAG,EAAA,CAAG,GAAA,CAAM,WACX,IAAI,EAAO,EAAQ,WAEnB,OAAO,EAAK,MAAA,CAAS,GAAK,AAAY,IAAZ,CAAI,CAAC,EAAE,CAC9B,OAAS,KAAK,KAAA,CAAM,CAAI,CAAC,EAAE,EAAI,KAAO,KAAK,KAAA,CAAM,CAAI,CAAC,EAAE,EAAI,KAAO,KAAK,KAAA,CAAM,CAAI,CAAC,EAAE,EAAI,IACzF,QAAU,KAAK,KAAA,CAAM,CAAI,CAAC,EAAE,EAAI,KAAO,KAAK,KAAA,CAAM,CAAI,CAAC,EAAE,EAAI,KAAO,KAAK,KAAA,CAAM,CAAI,CAAC,EAAE,EAAI,KAAO,CAAI,CAAC,EAAE,CAAG,GAC/G,EAEA,EAAG,EAAA,CAAG,GAAA,CAAI,OAAA,CAAU,WACnB,IAAI,EAAO,EAAQ,WAEf,EAAI,KAAK,KAAA,CAAM,CAAI,CAAC,EAAE,CAAG,IAAM,KAC/B,EAAI,KAAK,KAAA,CAAM,CAAI,CAAC,EAAE,CAAG,IAAM,KAC/B,EAAI,KAAK,KAAA,CAAM,CAAI,CAAC,EAAE,CAAG,IAAM,KAEnC,OAAO,EAAK,MAAA,CAAS,GAAK,AAAY,IAAZ,CAAI,CAAC,EAAE,CAC9B,OAAS,EAAI,MAAQ,EAAI,MAAQ,EAAI,KACrC,QAAU,EAAI,MAAQ,EAAI,MAAQ,EAAI,MAAQ,CAAI,CAAC,EAAE,CAAG,GAC5D,EAEA,EAAG,EAAA,CAAG,GAAA,CAAM,WACX,IAAI,EAAO,EAAQ,WACnB,OAAO,EAAK,MAAA,CAAS,GAAK,AAAY,IAAZ,CAAI,CAAC,EAAE,CAC9B,OAAS,CAAI,CAAC,EAAE,CAAG,KAAO,CAAI,CAAC,EAAE,CAAG,MAAQ,CAAI,CAAC,EAAE,CAAG,KACtD,QAAU,CAAI,CAAC,EAAE,CAAG,KAAO,CAAI,CAAC,EAAE,CAAG,MAAQ,CAAI,CAAC,EAAE,CAAG,MAAQ,CAAI,CAAC,EAAE,CAAG,GAC7E,EAEA,sFAAsF;AACtF,iDAAiD;AACjD,EAAG,EAAA,CAAG,GAAA,CAAM,WACX,IAAI,EAAO,EAAQ,WAEf,EAAI,GAKR,OAJI,EAAK,MAAA,EAAU,GAAK,AAAY,IAAZ,CAAI,CAAC,EAAE,EAC9B,CAAA,EAAI,KAAO,CAAI,CAAC,EAAE,AAAF,EAGV,OAAS,CAAI,CAAC,EAAE,CAAG,KAAO,CAAI,CAAC,EAAE,CAAG,MAAQ,CAAI,CAAC,EAAE,CAAG,IAAM,EAAI,GACxE,EAEA,EAAG,EAAA,CAAG,OAAA,CAAU,SAAU,CAAG,EAC5B,OAAO,CAAY,CAAC,EAAI,KAAA,CAAM,EAAG,GAAG,AACrC,C,G,E,Q,C,Q,S,C,C,C,ECrOA,EAAA,OAAA,CAAiB,CAChB,UAAa,CAAC,IAAK,IAAK,IAAI,CAC5B,aAAgB,CAAC,IAAK,IAAK,IAAI,CAC/B,KAAQ,CAAC,EAAG,IAAK,IAAI,CACrB,WAAc,CAAC,IAAK,IAAK,IAAI,CAC7B,MAAS,CAAC,IAAK,IAAK,IAAI,CACxB,MAAS,CAAC,IAAK,IAAK,IAAI,CACxB,OAAU,CAAC,IAAK,IAAK,IAAI,CACzB,MAAS,CAAC,EAAG,EAAG,EAAE,CAClB,eAAkB,CAAC,IAAK,IAAK,IAAI,CACjC,KAAQ,CAAC,EAAG,EAAG,IAAI,CACnB,WAAc,CAAC,IAAK,GAAI,IAAI,CAC5B,MAAS,CAAC,IAAK,GAAI,GAAG,CACtB,UAAa,CAAC,IAAK,IAAK,IAAI,CAC5B,UAAa,CAAC,GAAI,IAAK,IAAI,CAC3B,WAAc,CAAC,IAAK,IAAK,EAAE,CAC3B,UAAa,CAAC,IAAK,IAAK,GAAG,CAC3B,MAAS,CAAC,IAAK,IAAK,GAAG,CACvB,eAAkB,CAAC,IAAK,IAAK,IAAI,CACjC,SAAY,CAAC,IAAK,IAAK,IAAI,CAC3B,QAAW,CAAC,IAAK,GAAI,GAAG,CACxB,KAAQ,CAAC,EAAG,IAAK,IAAI,CACrB,SAAY,CAAC,EAAG,EAAG,IAAI,CACvB,SAAY,CAAC,EAAG,IAAK,IAAI,CACzB,cAAiB,CAAC,IAAK,IAAK,GAAG,CAC/B,SAAY,CAAC,IAAK,IAAK,IAAI,CAC3B,UAAa,CAAC,EAAG,IAAK,EAAE,CACxB,SAAY,CAAC,IAAK,IAAK,IAAI,CAC3B,UAAa,CAAC,IAAK,IAAK,IAAI,CAC5B,YAAe,CAAC,IAAK,EAAG,IAAI,CAC5B,eAAkB,CAAC,GAAI,IAAK,GAAG,CAC/B,WAAc,CAAC,IAAK,IAAK,EAAE,CAC3B,WAAc,CAAC,IAAK,GAAI,IAAI,CAC5B,QAAW,CAAC,IAAK,EAAG,EAAE,CACtB,WAAc,CAAC,IAAK,IAAK,IAAI,CAC7B,aAAgB,CAAC,IAAK,IAAK,IAAI,CAC/B,cAAiB,CAAC,GAAI,GAAI,IAAI,CAC9B,cAAiB,CAAC,GAAI,GAAI,GAAG,CAC7B,cAAiB,CAAC,GAAI,GAAI,GAAG,CAC7B,cAAiB,CAAC,EAAG,IAAK,IAAI,CAC9B,WAAc,CAAC,IAAK,EAAG,IAAI,CAC3B,SAAY,CAAC,IAAK,GAAI,IAAI,CAC1B,YAAe,CAAC,EAAG,IAAK,IAAI,CAC5B,QAAW,CAAC,IAAK,IAAK,IAAI,CAC1B,QAAW,CAAC,IAAK,IAAK,IAAI,CAC1B,WAAc,CAAC,GAAI,IAAK,IAAI,CAC5B,UAAa,CAAC,IAAK,GAAI,GAAG,CAC1B,YAAe,CAAC,IAAK,IAAK,IAAI,CAC9B,YAAe,CAAC,GAAI,IAAK,GAAG,CAC5B,QAAW,CAAC,IAAK,EAAG,IAAI,CACxB,UAAa,CAAC,IAAK,IAAK,IAAI,CAC5B,WAAc,CAAC,IAAK,IAAK,IAAI,CAC7B,KAAQ,CAAC,IAAK,IAAK,EAAE,CACrB,UAAa,CAAC,IAAK,IAAK,GAAG,CAC3B,KAAQ,CAAC,IAAK,IAAK,IAAI,CACvB,MAAS,CAAC,EAAG,IAAK,EAAE,CACpB,YAAe,CAAC,IAAK,IAAK,GAAG,CAC7B,KAAQ,CAAC,IAAK,IAAK,IAAI,CACvB,SAAY,CAAC,IAAK,IAAK,IAAI,CAC3B,QAAW,CAAC,IAAK,IAAK,IAAI,CAC1B,UAAa,CAAC,IAAK,GAAI,GAAG,CAC1B,OAAU,CAAC,GAAI,EAAG,IAAI,CACtB,MAAS,CAAC,IAAK,IAAK,IAAI,CACxB,MAAS,CAAC,IAAK,IAAK,IAAI,CACxB,SAAY,CAAC,IAAK,IAAK,IAAI,CAC3B,cAAiB,CAAC,IAAK,IAAK,IAAI,CAChC,UAAa,CAAC,IAAK,IAAK,EAAE,CAC1B,aAAgB,CAAC,IAAK,IAAK,IAAI,CAC/B,UAAa,CAAC,IAAK,IAAK,IAAI,CAC5B,WAAc,CAAC,IAAK,IAAK,IAAI,CAC7B,UAAa,CAAC,IAAK,IAAK,IAAI,CAC5B,qBAAwB,CAAC,IAAK,IAAK,IAAI,CACvC,UAAa,CAAC,IAAK,IAAK,IAAI,CAC5B,WAAc,CAAC,IAAK,IAAK,IAAI,CAC7B,UAAa,CAAC,IAAK,IAAK,IAAI,CAC5B,UAAa,CAAC,IAAK,IAAK,IAAI,CAC5B,YAAe,CAAC,IAAK,IAAK,IAAI,CAC9B,cAAiB,CAAC,GAAI,IAAK,IAAI,CAC/B,aAAgB,CAAC,IAAK,IAAK,IAAI,CAC/B,eAAkB,CAAC,IAAK,IAAK,IAAI,CACjC,eAAkB,CAAC,IAAK,IAAK,IAAI,CACjC,eAAkB,CAAC,IAAK,IAAK,IAAI,CACjC,YAAe,CAAC,IAAK,IAAK,IAAI,CAC9B,KAAQ,CAAC,EAAG,IAAK,EAAE,CACnB,UAAa,CAAC,GAAI,IAAK,GAAG,CAC1B,MAAS,CAAC,IAAK,IAAK,IAAI,CACxB,QAAW,CAAC,IAAK,EAAG,IAAI,CACxB,OAAU,CAAC,IAAK,EAAG,EAAE,CACrB,iBAAoB,CAAC,IAAK,IAAK,IAAI,CACnC,WAAc,CAAC,EAAG,EAAG,IAAI,CACzB,aAAgB,CAAC,IAAK,GAAI,IAAI,CAC9B,aAAgB,CAAC,IAAK,IAAK,IAAI,CAC/B,eAAkB,CAAC,GAAI,IAAK,IAAI,CAChC,gBAAmB,CAAC,IAAK,IAAK,IAAI,CAClC,kBAAqB,CAAC,EAAG,IAAK,IAAI,CAClC,gBAAmB,CAAC,GAAI,IAAK,IAAI,CACjC,gBAAmB,CAAC,IAAK,GAAI,IAAI,CACjC,aAAgB,CAAC,GAAI,GAAI,IAAI,CAC7B,UAAa,CAAC,IAAK,IAAK,IAAI,CAC5B,UAAa,CAAC,IAAK,IAAK,IAAI,CAC5B,SAAY,CAAC,IAAK,IAAK,IAAI,CAC3B,YAAe,CAAC,IAAK,IAAK,IAAI,CAC9B,KAAQ,CAAC,EAAG,EAAG,IAAI,CACnB,QAAW,CAAC,IAAK,IAAK,IAAI,CAC1B,MAAS,CAAC,IAAK,IAAK,EAAE,CACtB,UAAa,CAAC,IAAK,IAAK,GAAG,CAC3B,OAAU,CAAC,IAAK,IAAK,EAAE,CACvB,UAAa,CAAC,IAAK,GAAI,EAAE,CACzB,OAAU,CAAC,IAAK,IAAK,IAAI,CACzB,cAAiB,CAAC,IAAK,IAAK,IAAI,CAChC,UAAa,CAAC,IAAK,IAAK,IAAI,CAC5B,cAAiB,CAAC,IAAK,IAAK,IAAI,CAChC,cAAiB,CAAC,IAAK,IAAK,IAAI,CAChC,WAAc,CAAC,IAAK,IAAK,IAAI,CAC7B,UAAa,CAAC,IAAK,IAAK,IAAI,CAC5B,KAAQ,CAAC,IAAK,IAAK,GAAG,CACtB,KAAQ,CAAC,IAAK,IAAK,IAAI,CACvB,KAAQ,CAAC,IAAK,IAAK,IAAI,CACvB,WAAc,CAAC,IAAK,IAAK,IAAI,CAC7B,OAAU,CAAC,IAAK,EAAG,IAAI,CACvB,cAAiB,CAAC,IAAK,GAAI,IAAI,CAC/B,IAAO,CAAC,IAAK,EAAG,EAAE,CAClB,UAAa,CAAC,IAAK,IAAK,IAAI,CAC5B,UAAa,CAAC,GAAI,IAAK,IAAI,CAC3B,YAAe,CAAC,IAAK,GAAI,GAAG,CAC5B,OAAU,CAAC,IAAK,IAAK,IAAI,CACzB,WAAc,CAAC,IAAK,IAAK,GAAG,CAC5B,SAAY,CAAC,GAAI,IAAK,GAAG,CACzB,SAAY,CAAC,IAAK,IAAK,IAAI,CAC3B,OAAU,CAAC,IAAK,GAAI,GAAG,CACvB,OAAU,CAAC,IAAK,IAAK,IAAI,CACzB,QAAW,CAAC,IAAK,IAAK,IAAI,CAC1B,UAAa,CAAC,IAAK,GAAI,IAAI,CAC3B,UAAa,CAAC,IAAK,IAAK,IAAI,CAC5B,UAAa,CAAC,IAAK,IAAK,IAAI,CAC5B,KAAQ,CAAC,IAAK,IAAK,IAAI,CACvB,YAAe,CAAC,EAAG,IAAK,IAAI,CAC5B,UAAa,CAAC,GAAI,IAAK,IAAI,CAC3B,IAAO,CAAC,IAAK,IAAK,IAAI,CACtB,KAAQ,CAAC,EAAG,IAAK,IAAI,CACrB,QAAW,CAAC,IAAK,IAAK,IAAI,CAC1B,OAAU,CAAC,IAAK,GAAI,GAAG,CACvB,UAAa,CAAC,GAAI,IAAK,IAAI,CAC3B,OAAU,CAAC,IAAK,IAAK,IAAI,CACzB,MAAS,CAAC,IAAK,IAAK,IAAI,CACxB,MAAS,CAAC,IAAK,IAAK,IAAI,CACxB,WAAc,CAAC,IAAK,IAAK,IAAI,CAC7B,OAAU,CAAC,IAAK,IAAK,EAAE,CACvB,YAAe,CAAC,IAAK,IAAK,GAAG,AAC9B,C,G,E,Q,C,Q,S,C,C,C,E,I,E,E,SCnJI,EAAS,MAAM,SAAA,CAAU,MAA7B,CACI,EAAQ,MAAM,SAAA,CAAU,KAA5B,CAEI,EAAU,EAAA,OAAA,CAAiB,SAAiB,CAAI,EAGnD,IAAK,IAFD,EAAU,EAAE,CAEP,EAAI,EAAG,EAAM,EAAK,MAAA,CAAQ,EAAI,EAAK,IAAK,CAChD,IAAI,EAAM,CAAI,CAAC,EAAE,CAEb,EAAW,GAEd,EAAU,EAAO,IAAA,CAAK,EAAS,EAAM,IAAA,CAAK,IAE1C,EAAQ,IAAA,CAAK,EAEf,CAEA,OAAO,CACR,CAEA,CAAA,EAAQ,IAAA,CAAO,SAAU,CAAE,EAC1B,OAAO,WACN,OAAO,EAAG,EAAQ,WACnB,CACD,C,G,E,Q,C,Q,S,C,C,C,EC5BA,EAAA,OAAA,CAAiB,SAAoB,CAAG,QACvC,EAAK,GAAO,AAAe,UAAf,OAAO,GAIZ,CAAA,aAAe,OAAS,MAAM,OAAA,CAAQ,IAC3C,EAAI,MAAA,EAAU,GAAM,CAAA,EAAI,MAAA,YAAkB,UACzC,OAAO,wBAAA,CAAyB,EAAM,EAAI,MAAA,CAAS,IAAO,AAAyB,WAAzB,EAAI,WAAA,CAAY,IAAA,AAAS,CAAQ,CAC/F,C,G,E,Q,C,Q,S,C,C,C,E,I,E,E,S,E,E,SCLA,IAAM,EAAU,CAAC,EAEX,EAAS,OAAO,IAAA,CAAK,GA0D3B,EAAO,OAAA,CAAQ,AAAA,IACd,CAAO,CAAC,EAAU,CAAG,CAAC,EAEtB,OAAO,cAAA,CAAe,CAAO,CAAC,EAAU,CAAE,WAAY,CAAC,MAAO,CAAW,CAAC,EAAU,CAAC,QAA9B,AAAsC,GAC7F,OAAO,cAAA,CAAe,CAAO,CAAC,EAAU,CAAE,SAAU,CAAC,MAAO,CAAW,CAAC,EAAU,CAAC,MAA9B,AAAoC,GAEzF,IAAM,EAAS,EAAM,GACf,EAAc,OAAO,IAAA,CAAK,GAEhC,EAAY,OAAA,CAAQ,AAAA,IACnB,IAAM,EAAK,CAAM,CAAC,EAAQ,AAE1B,CAAA,CAAO,CAAC,EAAU,CAAC,EAAQ,CAAG,AA9ChC,SAAqB,CAAE,EACtB,IAAM,EAAY,SAAU,GAAG,CAAI,EAClC,IAAM,EAAO,CAAI,CAAC,EAAE,CAEpB,GAAI,MAAA,EACH,OAAO,CAGJ,CAAA,EAAK,MAAA,CAAS,GACjB,CAAA,EAAO,CADR,EAIA,IAAM,EAAS,EAAG,EAElB,+CAA8C;AAC9C,oDAAoD;AACpD,2BAA2B;AAC3B,GAAI,AAAkB,UAAlB,OAAO,EACV,IAAK,IAAI,EAAM,EAAO,MAAA,CAAQ,EAAI,EAAG,EAAI,EAAK,IAC7C,CAAM,CAAC,EAAE,CAAG,KAAK,KAAA,CAAM,CAAM,CAAC,EAAE,EAIlC,OAAO,CACR,EAOA,MAJI,eAAgB,GACnB,CAAA,EAAU,UAAA,CAAa,EAAG,UAD3B,AAAA,EAIO,CACR,EAc4C,GAC1C,CAAO,CAAC,EAAU,CAAC,EAAQ,CAAC,GAAA,CAAM,AArEpC,SAAiB,CAAE,EAClB,IAAM,EAAY,SAAU,GAAG,CAAI,EAClC,IAAM,EAAO,CAAI,CAAC,EAAE,QACpB,AAAI,MAAA,EACI,GAGJ,EAAK,MAAA,CAAS,GACjB,CAAA,EAAO,CADR,EAIO,EAAG,GACX,EAOA,MAJI,eAAgB,GACnB,CAAA,EAAU,UAAA,CAAa,EAAG,UAD3B,AAAA,EAIO,CACR,EAiD4C,EAC3C,EACD,GAEA,EAAA,OAAA,CAAiB,C,G,E,Q,C,Q,S,C,C,C,E,e,E,qC,EChFjB,IAAA,EAAA,EACA,QAGA,0EAAyE;AACzE,oDAAoD;AACpD,oEAAoE;AAEpE,IAAM,EAAkB,CAAC,EACzB,IAAK,IAAM,KAAO,OAAO,IAAA,CAAK,GAC7B,CAAe,CAAC,CAAW,CAAC,EAAI,CAAC,CAAG,EAGrC,IAAM,EAAU,CACf,IAAK,CAAC,SAAU,EAAG,OAAQ,KAAK,EAChC,IAAK,CAAC,SAAU,EAAG,OAAQ,KAAK,EAChC,IAAK,CAAC,SAAU,EAAG,OAAQ,KAAK,EAChC,IAAK,CAAC,SAAU,EAAG,OAAQ,KAAK,EAChC,KAAM,CAAC,SAAU,EAAG,OAAQ,MAAM,EAClC,IAAK,CAAC,SAAU,EAAG,OAAQ,KAAK,EAChC,IAAK,CAAC,SAAU,EAAG,OAAQ,KAAK,EAChC,IAAK,CAAC,SAAU,EAAG,OAAQ,KAAK,EAChC,IAAK,CAAC,SAAU,EAAG,OAAQ,CAAC,MAAM,AAAA,EAClC,QAAS,CAAC,SAAU,EAAG,OAAQ,CAAC,UAAU,AAAA,EAC1C,OAAQ,CAAC,SAAU,EAAG,OAAQ,CAAC,SAAS,AAAA,EACxC,QAAS,CAAC,SAAU,EAAG,OAAQ,CAAC,UAAU,AAAA,EAC1C,IAAK,CAAC,SAAU,EAAG,OAAQ,CAAC,IAAK,IAAK,IAAI,AAAA,EAC1C,MAAO,CAAC,SAAU,EAAG,OAAQ,CAAC,MAAO,MAAO,MAAM,AAAA,EAClD,KAAM,CAAC,SAAU,EAAG,OAAQ,CAAC,OAAO,AAAA,CACrC,EAIA,wCAAwC;AACxC,IAAK,IAAM,KAHX,EAAA,OAAA,CAAiB,EAGG,OAAO,IAAA,CAAK,IAAU,CACzC,GAAI,CAAE,CAAA,aAAc,CAAO,CAAC,EAAM,AAAN,EAC3B,MAAM,AAAI,MAAM,8BAAgC,GAGjD,GAAI,CAAE,CAAA,WAAY,CAAO,CAAC,EAAM,AAAN,EACzB,MAAM,AAAI,MAAM,oCAAsC,GAGvD,GAAI,CAAO,CAAC,EAAM,CAAC,MAAA,CAAO,MAAA,GAAW,CAAO,CAAC,EAAM,CAAC,QAAA,CACnD,MAAM,AAAI,MAAM,sCAAwC,GAGzD,GAAM,CAAA,SAAC,CAAQ,CAAA,OAAE,CAAM,CAAC,CAAG,CAAO,CAAC,EAAM,AACzC,QAAO,CAAO,CAAC,EAAM,CAAC,QAAtB,CACA,OAAO,CAAO,CAAC,EAAM,CAAC,MAAtB,CACA,OAAO,cAAA,CAAe,CAAO,CAAC,EAAM,CAAE,WAAY,CAAC,MAAO,CAAQ,GAClE,OAAO,cAAA,CAAe,CAAO,CAAC,EAAM,CAAE,SAAU,CAAC,MAAO,CAAM,EAC/D,CAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,MAO1B,EANJ,IAAM,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAM,KAAK,GAAA,CAAI,EAAG,EAAG,GACrB,EAAM,KAAK,GAAA,CAAI,EAAG,EAAG,GACrB,EAAQ,EAAM,CAIhB,CAAA,IAAQ,EACX,EAAI,EACM,IAAM,EAChB,EAAK,AAAA,CAAA,EAAI,CAAA,EAAK,EACJ,IAAM,EAChB,EAAI,EAAI,AAAC,CAAA,EAAI,CAAA,EAAK,EACR,IAAM,GAChB,CAAA,EAAI,EAAI,AAAC,CAAA,EAAI,CAAA,EAAK,CADZ,EAIP,CAAA,EAAI,KAAK,GAAA,CAAI,AAAI,GAAJ,EAAQ,IAArB,EAEQ,GACP,CAAA,GAAK,GADN,EAIA,IAAM,EAAI,AAAC,CAAA,EAAM,CAAA,EAAO,EAUxB,MAAO,CAAC,EAAG,AAAI,KARX,IAAQ,EACP,EACM,GAAK,GACX,EAAS,CAAA,EAAM,CAAA,EAEf,EAAS,CAAA,EAAI,EAAM,CAAA,GAGJ,AAAI,IAAJ,EAAQ,AAC7B,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,MAC1B,EACA,EACA,EACA,EACA,EAEJ,IAAM,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,KAAK,GAAA,CAAI,EAAG,EAAG,GACnB,EAAO,EAAI,KAAK,GAAA,CAAI,EAAG,EAAG,GAC1B,EAAQ,SAAU,CAAC,EACxB,MAAQ,AAAA,CAAA,EAAI,CAAA,EAAK,EAAI,EAAO,EAC7B,EA0BA,OAxBI,AAAS,IAAT,GACH,EAAI,EACJ,EAAI,IAEJ,EAAI,EAAO,EACX,EAAO,EAAM,GACb,EAAO,EAAM,GACb,EAAO,EAAM,GAET,IAAM,EACT,EAAI,EAAO,EACD,IAAM,EAChB,EAAI,EAAK,EAAK,EAAO,EACX,IAAM,GAChB,CAAA,EAAI,EAAK,EAAK,EAAO,CADf,EAIH,EAAI,EACP,GAAK,EACK,EAAI,GACd,CAAA,GAAK,CAAA,GAIA,CACN,AAAI,IAAJ,EACA,AAAI,IAAJ,EACA,AAAI,IAAJ,EACA,AACF,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,EAC9B,IAAM,EAAI,CAAG,CAAC,EAAE,CACV,EAAI,CAAG,CAAC,EAAE,CACZ,EAAI,CAAG,CAAC,EAAE,CACR,EAAI,EAAQ,GAAA,CAAI,GAAA,CAAI,EAAI,CAAC,EAAE,CAC3B,EAAI,EAAI,IAAM,KAAK,GAAA,CAAI,EAAG,KAAK,GAAA,CAAI,EAAG,IAI5C,MAAO,CAAC,EAAG,AAAI,IAAJ,EAAS,AAAI,IAFxB,CAAA,EAAI,EAAI,EAAI,IAAM,KAAK,GAAA,CAAI,EAAG,KAAK,GAAA,CAAI,EAAG,GAA1C,EAE4B,AAC7B,EAEA,EAAQ,GAAA,CAAI,IAAA,CAAO,SAAU,CAAG,EAC/B,IAAM,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IAEb,EAAI,KAAK,GAAA,CAAI,EAAI,EAAG,EAAI,EAAG,EAAI,GAKrC,MAAO,CAAC,AAAI,IAJD,CAAA,AAAA,CAAA,EAAI,EAAI,CAAA,EAAM,CAAA,EAAI,CAAA,GAAM,CAAA,EAIlB,AAAI,IAHV,CAAA,AAAA,CAAA,EAAI,EAAI,CAAA,EAAM,CAAA,EAAI,CAAA,GAAM,CAAA,EAGT,AAAI,IAFnB,CAAA,AAAA,CAAA,EAAI,EAAI,CAAA,EAAM,CAAA,EAAI,CAAA,GAAM,CAAA,EAEA,AAAI,IAAJ,EAAQ,AAC5C,EAaA,EAAQ,GAAA,CAAI,OAAA,CAAU,SAAU,CAAG,MAO9B,EANJ,IAAM,EAAW,CAAe,CAAC,EAAI,CACrC,GAAI,EACH,OAAO,EAGR,IAAI,EAAyB,IAG7B,IAAK,IAAM,KAAW,OAAO,IAAA,CAAK,GAAc,CAC/C,IAAM,EAAQ,CAAW,CAAC,EAAQ,CAG5B,EAnBN,AAAE,CAAA,AAmBmC,CAnBlC,CAAC,EAAE,CAAG,AAmBiC,CAnBhC,CAAC,EAAC,AAAD,GAAO,EACjB,AAAC,CAAA,AAkBmC,CAlBlC,CAAC,EAAE,CAAG,AAkBiC,CAlBhC,CAAC,EAAC,AAAD,GAAO,EAChB,AAAA,CAAA,AAiBmC,CAjBlC,CAAC,EAAE,CAAG,AAiBiC,CAjBhC,CAAC,EAAC,AAAD,GAAO,CAmBlB,2CAA0C;AACtC,EAAW,IACd,EAAyB,EACzB,EAAwB,EAE1B,CAEA,OAAO,CACR,EAEA,EAAQ,OAAA,CAAQ,GAAA,CAAM,SAAU,CAAO,EACtC,OAAO,CAAW,CAAC,EAAQ,AAC5B,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,EAC9B,IAAI,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,GAEjB,eAAc;AACd,EAAI,EAAI,OAAW,AAAC,CAAA,AAAC,CAAA,EAAI,IAAA,EAAS,KAAA,GAAU,IAAQ,EAAI,MACxD,EAAI,EAAI,OAAW,AAAC,CAAA,AAAC,CAAA,EAAI,IAAA,EAAS,KAAA,GAAU,IAAQ,EAAI,MACxD,EAAI,EAAI,OAAW,AAAC,CAAA,AAAC,CAAA,EAAI,IAAA,EAAS,KAAA,GAAU,IAAQ,EAAI,MAExD,IAAM,EAAI,AAAK,MAAL,EAAgB,AAAI,MAAJ,EAAe,AAAI,MAAJ,EACnC,EAAI,AAAK,MAAL,EAAgB,AAAI,MAAJ,EAAe,AAAI,MAAJ,EACnC,EAAI,AAAK,MAAL,EAAgB,AAAI,MAAJ,EAAe,AAAI,MAAJ,EAEzC,MAAO,CAAC,AAAI,IAAJ,EAAS,AAAI,IAAJ,EAAS,AAAI,IAAJ,EAAQ,AACnC,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,EAC9B,IAAM,EAAM,EAAQ,GAAA,CAAI,GAAA,CAAI,GACxB,EAAI,CAAG,CAAC,EAAE,CACV,EAAI,CAAG,CAAC,EAAE,CACV,EAAI,CAAG,CAAC,EAAE,CAEd,GAAK,OACL,GAAK,IACL,GAAK,QAEL,EAAI,EAAI,QAAY,GAAM,CAAA,EAAI,CAAA,EAAM,MAAS,EAAM,GAAK,IACxD,EAAI,EAAI,QAAY,GAAM,CAAA,EAAI,CAAA,EAAM,MAAS,EAAM,GAAK,IACxD,EAAI,EAAI,QAAY,GAAM,CAAA,EAAI,CAAA,EAAM,MAAS,EAAM,GAAK,IAExD,IAAM,EAAK,IAAM,EAAK,GAChB,EAAI,IAAO,CAAA,EAAI,CAAA,EACf,EAAI,IAAO,CAAA,EAAI,CAAA,EAErB,MAAO,CAAC,EAAG,EAAG,EAAE,AACjB,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,MAI1B,EACA,EACA,EALJ,IAAM,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IAKnB,GAAI,AAAM,IAAN,EAEH,MAAO,CADP,EAAM,AAAI,IAAJ,EACO,EAAK,EAAI,CAItB,EADG,EAAI,GACF,EAAK,CAAA,EAAI,CAAA,EAET,EAAI,EAAI,EAAI,EAGlB,IAAM,EAAK,EAAI,EAAI,EAEb,EAAM,CAAC,EAAG,EAAG,EAAE,CACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACtB,CAAA,EAAK,EAAI,CAAA,CAAA,EAAI,EAAM,CAAA,EAAI,CAAA,CAAA,CAAA,EACd,GACR,IAGG,EAAK,GACR,IAIA,EADG,EAAI,EAAK,EACN,EAAK,AAAC,CAAA,EAAK,CAAA,EAAM,EAAI,EACjB,EAAI,EAAK,EACb,EACI,EAAI,EAAK,EACb,EAAK,AAAC,CAAA,EAAK,CAAA,EAAO,CAAA,EAAI,EAAI,CAAA,EAAM,EAEhC,EAGP,CAAG,CAAC,EAAE,CAAG,AAAM,IAAN,EAGV,OAAO,CACR,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,EAC9B,IAAM,EAAI,CAAG,CAAC,EAAE,CACZ,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAO,EACL,EAAO,KAAK,GAAA,CAAI,EAAG,KAEzB,GAAK,EACL,GAAK,GAAM,EAAK,EAAI,EAAI,EACxB,GAAQ,GAAQ,EAAI,EAAO,EAAI,EAC/B,IAAM,EAAI,AAAC,CAAA,EAAI,CAAA,EAAK,EACd,EAAK,AAAM,IAAN,EAAU,EAAK,EAAS,CAAA,EAAO,CAAA,EAAS,EAAI,EAAM,CAAA,EAAI,CAAA,EAEjE,MAAO,CAAC,EAAG,AAAK,IAAL,EAAU,AAAI,IAAJ,EAAQ,AAC9B,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,EAC9B,IAAM,EAAI,CAAG,CAAC,EAAE,CAAG,GACb,EAAI,CAAG,CAAC,EAAE,CAAG,IACf,EAAI,CAAG,CAAC,EAAE,CAAG,IACX,EAAK,KAAK,KAAA,CAAM,GAAK,EAErB,EAAI,EAAI,KAAK,KAAA,CAAM,GACnB,EAAI,IAAM,EAAK,CAAA,EAAI,CAAA,EACnB,EAAI,IAAM,EAAK,CAAA,EAAK,EAAI,CAAA,EACxB,EAAI,IAAM,EAAK,CAAA,EAAK,EAAK,CAAA,EAAI,CAAA,CAAA,EAGnC,OAFA,GAAK,IAEG,GACP,KAAK,EACJ,MAAO,CAAC,EAAG,EAAG,EAAE,AACjB,MAAK,EACJ,MAAO,CAAC,EAAG,EAAG,EAAE,AACjB,MAAK,EACJ,MAAO,CAAC,EAAG,EAAG,EAAE,AACjB,MAAK,EACJ,MAAO,CAAC,EAAG,EAAG,EAAE,AACjB,MAAK,EACJ,MAAO,CAAC,EAAG,EAAG,EAAE,AACjB,MAAK,EACJ,MAAO,CAAC,EAAG,EAAG,EAAE,AAClB,CACD,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,MAK1B,EACA,EALJ,IAAM,EAAI,CAAG,CAAC,EAAE,CACV,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAO,KAAK,GAAA,CAAI,EAAG,KAIzB,EAAI,AAAC,CAAA,EAAI,CAAA,EAAK,EACd,IAAM,EAAO,AAAC,CAAA,EAAI,CAAA,EAAK,EAMvB,MAAO,CAAC,EAAG,AAAK,IAHX,CAAA,AAFA,EAAI,EACH,CAAA,GAAS,EAAK,EAAO,EAAI,CAA/B,GACW,CAAA,EAGU,AAAI,IAFzB,CAAA,GAAK,CAAA,EAEwB,AAC9B,EAEA,gDAAgD;AAChD,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,MAK1B,EAkBA,EACA,EACA,EAxBJ,IAAM,EAAI,CAAG,CAAC,EAAE,CAAG,IACf,EAAK,CAAG,CAAC,EAAE,CAAG,IACd,EAAK,CAAG,CAAC,EAAE,CAAG,IACZ,EAAQ,EAAK,EAIf,EAAQ,IACX,GAAM,EACN,GAAM,GAGP,IAAM,EAAI,KAAK,KAAA,CAAM,EAAI,GACnB,EAAI,EAAI,EACd,EAAI,EAAI,EAAI,EAEP,CAAA,AAAI,EAAJ,CAAI,GAAU,GAClB,CAAA,EAAI,EAAI,CAAA,EAGT,IAAM,EAAI,EAAK,EAAK,CAAA,EAAI,CAAA,CAAK,wBAAuB;AAKpD,0DAA0D,EAC1D,OAAQ,GACP,QACA,KAAK,EACL,KAAK,EAAG,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,KAChC,MAAK,EAAG,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,KAChC,MAAK,EAAG,EAAI,EAAI,EAAI,EAAI,EAAI,EAAG,KAC/B,MAAK,EAAG,EAAI,EAAI,EAAI,EAAI,EAAI,EAAG,KAC/B,MAAK,EAAG,EAAI,EAAI,EAAI,EAAI,EAAI,EAAG,KAC/B,MAAK,EAAG,EAAI,EAAI,EAAI,EAAI,EAAI,CAC7B,CACA,yDAAyD,EAEzD,MAAO,CAAC,AAAI,IAAJ,EAAS,AAAI,IAAJ,EAAS,AAAI,IAAJ,EAAQ,AACnC,EAEA,EAAQ,IAAA,CAAK,GAAA,CAAM,SAAU,CAAI,EAChC,IAAM,EAAI,CAAI,CAAC,EAAE,CAAG,IACd,EAAI,CAAI,CAAC,EAAE,CAAG,IACd,EAAI,CAAI,CAAC,EAAE,CAAG,IACd,EAAI,CAAI,CAAC,EAAE,CAAG,IAEd,EAAI,EAAI,KAAK,GAAA,CAAI,EAAG,EAAK,CAAA,EAAI,CAAA,EAAK,GAClC,EAAI,EAAI,KAAK,GAAA,CAAI,EAAG,EAAK,CAAA,EAAI,CAAA,EAAK,GAClC,EAAI,EAAI,KAAK,GAAA,CAAI,EAAG,EAAK,CAAA,EAAI,CAAA,EAAK,GAExC,MAAO,CAAC,AAAI,IAAJ,EAAS,AAAI,IAAJ,EAAS,AAAI,IAAJ,EAAQ,AACnC,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,MAI1B,EACA,EACA,EALJ,IAAM,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IA0BnB,OAjBA,cAAc;AACd,EAAI,AALJ,CAAA,EAAK,AAAI,OAAJ,EAAe,AAAI,QAAJ,EAAgB,AAAI,OAAJ,CAApC,EAKQ,SACJ,MAAU,GAAM,CAAA,EAAM,GAAA,EAAS,KAChC,AAAI,MAAJ,EAEH,EAAI,AARJ,CAAA,EAAK,AAAI,OAAJ,EAAgB,AAAI,OAAJ,EAAe,AAAI,MAAJ,CAApC,EAQQ,SACJ,MAAU,GAAM,CAAA,EAAM,GAAA,EAAS,KAChC,AAAI,MAAJ,EAEH,EAAI,AAXJ,CAAA,EAAK,AAAI,MAAJ,EAAe,AAAI,MAAJ,EAAgB,AAAI,MAAJ,CAApC,EAWQ,SACJ,MAAU,GAAM,CAAA,EAAM,GAAA,EAAS,KAChC,AAAI,MAAJ,EAMI,CAAC,AAAI,IAJZ,CAAA,EAAI,KAAK,GAAA,CAAI,KAAK,GAAA,CAAI,EAAG,GAAI,EAA7B,EAIiB,AAAI,IAHrB,CAAA,EAAI,KAAK,GAAA,CAAI,KAAK,GAAA,CAAI,EAAG,GAAI,EAA7B,EAG0B,AAAI,IAF9B,CAAA,EAAI,KAAK,GAAA,CAAI,KAAK,GAAA,CAAI,EAAG,GAAI,EAA7B,EAEkC,CACnC,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,EAC9B,IAAI,EAAI,CAAG,CAAC,EAAE,CACV,EAAI,CAAG,CAAC,EAAE,CACV,EAAI,CAAG,CAAC,EAAE,CAEd,GAAK,OACL,GAAK,IACL,GAAK,QAEL,EAAI,EAAI,QAAY,GAAM,CAAA,EAAI,CAAA,EAAM,MAAS,EAAM,GAAK,IACxD,EAAI,EAAI,QAAY,GAAM,CAAA,EAAI,CAAA,EAAM,MAAS,EAAM,GAAK,IACxD,EAAI,EAAI,QAAY,GAAM,CAAA,EAAI,CAAA,EAAM,MAAS,EAAM,GAAK,IAExD,IAAM,EAAK,IAAM,EAAK,GAChB,EAAI,IAAO,CAAA,EAAI,CAAA,EACf,EAAI,IAAO,CAAA,EAAI,CAAA,EAErB,MAAO,CAAC,EAAG,EAAG,EAAE,AACjB,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,MAI1B,EACA,EACA,EALJ,IAAM,EAAI,CAAG,CAAC,EAAE,CACV,EAAI,CAAG,CAAC,EAAE,CACV,EAAI,CAAG,CAAC,EAAE,CAMhB,EAAI,EAAI,IADR,CAAA,EAAI,AAAC,CAAA,EAAI,EAAA,EAAM,GAAf,EAEA,EAAI,EAAI,EAAI,IAEZ,IAAM,EAAK,GAAK,EACV,EAAK,GAAK,EACV,EAAK,GAAK,EAShB,OAHA,EALI,CAAA,EAAK,QAAW,EAAM,AAAA,CAAA,EAAI,GAAK,GAAA,EAAO,KAA1C,EAKK,IAGE,CAJP,EAHI,CAAA,EAAK,QAAW,EAAM,AAAA,CAAA,EAAI,GAAK,GAAA,EAAO,KAA1C,EAGK,OAIM,EAFX,EAJI,CAAA,EAAK,QAAW,EAAM,AAAA,CAAA,EAAI,GAAK,GAAA,EAAO,KAA1C,EAIK,QAEW,AACjB,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,MAI1B,EAHJ,IAAM,EAAI,CAAG,CAAC,EAAE,CACV,EAAI,CAAG,CAAC,EAAE,CACV,EAAI,CAAG,CAAC,EAAE,CAGV,EAAK,KAAK,KAAA,CAAM,EAAG,GACzB,CAAA,EAAI,AAAK,IAAL,EAAW,EAAI,KAAK,EAAxB,AAAA,EAEQ,GACP,CAAA,GAAK,GADN,EAIA,IAAM,EAAI,KAAK,IAAA,CAAK,EAAI,EAAI,EAAI,GAEhC,MAAO,CAAC,EAAG,EAAG,EAAE,AACjB,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,EAC9B,IAAM,EAAI,CAAG,CAAC,EAAE,CACV,EAAI,CAAG,CAAC,EAAE,CACV,EAAI,CAAG,CAAC,EAAE,CAEV,EAAK,EAAI,IAAM,EAAI,KAAK,EAA9B,CACM,EAAI,EAAI,KAAK,GAAA,CAAI,GACjB,EAAI,EAAI,KAAK,GAAA,CAAI,GAEvB,MAAO,CAAC,EAAG,EAAG,EAAE,AACjB,EAEA,EAAQ,GAAA,CAAI,MAAA,CAAS,SAAU,CAAI,CAAE,EAAa,IAAI,EACrD,GAAM,CAAC,EAAG,EAAG,EAAE,CAAG,EACd,EAAQ,AAAe,OAAf,EAAsB,EAAQ,GAAA,CAAI,GAAA,CAAI,EAAK,CAAC,EAAE,CAAG,EAI7D,GAAI,AAAU,IAFd,CAAA,EAAQ,KAAK,KAAA,CAAM,EAAQ,GAA3B,EAGC,OAAO,GAGR,IAAI,EAAO,GACN,CAAA,KAAK,KAAA,CAAM,EAAI,MAAQ,EACxB,KAAK,KAAA,CAAM,EAAI,MAAQ,EACxB,KAAK,KAAA,CAAM,EAAI,IAAA,EAMlB,OAJc,IAAV,GACH,CAAA,GAAQ,EADT,EAIO,CACR,EAEA,EAAQ,GAAA,CAAI,MAAA,CAAS,SAAU,CAAI,EAClC,qEAAqE;AACrE,uBAAuB;AACvB,OAAO,EAAQ,GAAA,CAAI,MAAA,CAAO,EAAQ,GAAA,CAAI,GAAA,CAAI,GAAO,CAAI,CAAC,EAAE,CACzD,EAEA,EAAQ,GAAA,CAAI,OAAA,CAAU,SAAU,CAAI,EACnC,IAAM,EAAI,CAAI,CAAC,EAAE,CACX,EAAI,CAAI,CAAC,EAAE,CACX,EAAI,CAAI,CAAC,EAAE,AAEjB,qEAAoE;AACpE,+DAA+D;AAC/D,GAAI,IAAM,GAAK,IAAM,SACpB,AAAI,EAAI,EACA,GAGJ,EAAI,IACA,IAGD,KAAK,KAAA,CAAQ,AAAA,CAAA,EAAI,CAAA,EAAK,IAAO,IAAM,IAG3C,IAAM,EAAO,GACT,GAAK,KAAK,KAAA,CAAM,EAAI,IAAM,GAC1B,EAAI,KAAK,KAAA,CAAM,EAAI,IAAM,GAC1B,KAAK,KAAA,CAAM,EAAI,IAAM,GAExB,OAAO,CACR,EAEA,EAAQ,MAAA,CAAO,GAAA,CAAM,SAAU,CAAI,EAClC,IAAI,EAAQ,EAAO,EAEnB,oBAAmB;AACnB,GAAI,AAAU,IAAV,GAAe,AAAU,IAAV,EAOlB,OANI,EAAO,IACV,CAAA,GAAS,GADV,EAMO,CAFP,EAAQ,EAAQ,KAAO,IAER,EAAO,EAAM,CAG7B,IAAM,EAAQ,AAAA,CAAA,CAAC,CAAE,CAAA,EAAO,EAAA,EAAM,CAAA,EAAK,GAC7B,EAAI,AAAE,CAAA,AAAQ,EAAR,CAAQ,EAAK,EAAQ,IAC3B,EAAI,AAAG,CAAA,GAAS,EAAK,CAAA,EAAK,EAAQ,IAClC,EAAI,AAAG,CAAA,GAAS,EAAK,CAAA,EAAK,EAAQ,IAExC,MAAO,CAAC,EAAG,EAAG,EAAE,AACjB,EAEA,EAAQ,OAAA,CAAQ,GAAA,CAAM,SAAU,CAAI,MAS/B,CARJ,oBAAmB;AACnB,GAAI,GAAQ,IAAK,CAChB,IAAM,EAAI,AAAC,CAAA,EAAO,GAAA,EAAO,GAAK,EAC9B,MAAO,CAAC,EAAG,EAAG,EAAE,AACjB,CAEA,GAAQ,GAGR,IAAM,EAAI,KAAK,KAAA,CAAM,EAAO,IAAM,EAAI,IAChC,EAAI,KAAK,KAAA,CAAO,AAAA,CAAA,EAAM,EAAO,EAAA,EAAM,GAAK,EAAI,IAGlD,MAAO,CAAC,EAAG,EAFA,EAAM,EAAK,EAAI,IAEV,AACjB,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAI,EAC/B,IAAM,EAAU,AAAC,CAAA,AAAC,CAAA,AAAsB,IAAtB,KAAK,KAAA,CAAM,CAAI,CAAC,EAAE,CAAI,GAAS,EAAA,EAC7C,CAAA,AAAC,CAAA,AAAsB,IAAtB,KAAK,KAAA,CAAM,CAAI,CAAC,EAAE,CAAI,GAAS,CAAA,EAChC,CAAA,AAAsB,IAAtB,KAAK,KAAA,CAAM,CAAI,CAAC,EAAE,CAAI,EAEpB,EAAS,EAAQ,QAAA,CAAS,IAAI,WAApC,GACA,MAAO,SAAS,SAAA,CAAU,EAAO,MAAA,EAAU,CAC5C,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAI,EAC/B,IAAM,EAAQ,EAAK,QAAA,CAAS,IAAI,KAAA,CAAM,4BACtC,GAAI,CAAC,EACJ,MAAO,CAAC,EAAG,EAAG,EAAE,CAGjB,IAAI,EAAc,CAAK,CAAC,EAAE,AAEF,CAAA,IAApB,CAAK,CAAC,EAAE,CAAC,MAAA,EACZ,CAAA,EAAc,EAAY,KAAA,CAAM,IAAI,GAAA,CAAI,AAAA,GAChC,EAAO,GACZ,IAAA,CAAK,GAAR,EAGD,IAAM,EAAU,SAAS,EAAa,IAKtC,MAAO,CAJI,GAAW,GAAM,IACjB,GAAW,EAAK,IACjB,AAAU,IAAV,EAEM,AACjB,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,EAC9B,IAAM,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAM,KAAK,GAAA,CAAI,KAAK,GAAA,CAAI,EAAG,GAAI,GAC/B,EAAM,KAAK,GAAA,CAAI,KAAK,GAAA,CAAI,EAAG,GAAI,GAC/B,EAAU,EAAM,EAyBtB,MAAO,CAAC,AAAM,MAfV,GAAU,EACP,EAEH,IAAQ,EACH,AAAA,CAAA,EAAI,CAAA,EAAK,EAAU,EAExB,IAAQ,EACL,EAAI,AAAC,CAAA,EAAI,CAAA,EAAK,EAEd,EAAI,AAAC,CAAA,EAAI,CAAA,EAAK,GAGd,EACA,GAEY,AAAS,IAAT,EAAc,AAAY,KArBzC,EAAS,EACA,EAAO,CAAA,EAAI,CAAA,EAEX,GAkBoC,AAClD,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,EAC9B,IAAM,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IAEb,EAAI,EAAI,GAAO,EAAM,EAAI,EAAM,EAAM,EAAK,CAAA,EAAM,CAAA,EAElD,EAAI,EAKR,OAJI,EAAI,GACP,CAAA,EAAK,AAAA,CAAA,EAAI,GAAM,CAAA,EAAM,CAAA,EAAM,CAAA,CAAA,EAGrB,CAAC,CAAG,CAAC,EAAE,CAAE,AAAI,IAAJ,EAAS,AAAI,IAAJ,EAAQ,AAClC,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,EAC9B,IAAM,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IAEb,EAAI,EAAI,EACV,EAAI,EAMR,OAJI,EAAI,GACP,CAAA,EAAK,AAAA,CAAA,EAAI,CAAA,EAAM,CAAA,EAAI,CAAA,CAAA,EAGb,CAAC,CAAG,CAAC,EAAE,CAAE,AAAI,IAAJ,EAAS,AAAI,IAAJ,EAAQ,AAClC,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,EAC9B,IAAM,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IAEnB,GAAI,AAAM,IAAN,EACH,MAAO,CAAC,AAAI,IAAJ,EAAS,AAAI,IAAJ,EAAS,AAAI,IAAJ,EAAQ,CAGnC,IAAM,EAAO,CAAC,EAAG,EAAG,EAAE,CAChB,EAAM,EAAI,EAAK,EACf,EAAI,EAAK,EACT,EAAI,EAAI,EACV,EAAK,EAET,0CAA0C,EAC1C,OAAQ,KAAK,KAAA,CAAM,IAClB,KAAK,EACJ,CAAI,CAAC,EAAE,CAAG,EAAG,CAAI,CAAC,EAAE,CAAG,EAAG,CAAI,CAAC,EAAE,CAAG,EAAG,KACxC,MAAK,EACJ,CAAI,CAAC,EAAE,CAAG,EAAG,CAAI,CAAC,EAAE,CAAG,EAAG,CAAI,CAAC,EAAE,CAAG,EAAG,KACxC,MAAK,EACJ,CAAI,CAAC,EAAE,CAAG,EAAG,CAAI,CAAC,EAAE,CAAG,EAAG,CAAI,CAAC,EAAE,CAAG,EAAG,KACxC,MAAK,EACJ,CAAI,CAAC,EAAE,CAAG,EAAG,CAAI,CAAC,EAAE,CAAG,EAAG,CAAI,CAAC,EAAE,CAAG,EAAG,KACxC,MAAK,EACJ,CAAI,CAAC,EAAE,CAAG,EAAG,CAAI,CAAC,EAAE,CAAG,EAAG,CAAI,CAAC,EAAE,CAAG,EAAG,KACxC,SACC,CAAI,CAAC,EAAE,CAAG,EAAG,CAAI,CAAC,EAAE,CAAG,EAAG,CAAI,CAAC,EAAE,CAAG,CACtC,CAKA,OAJA,yCAAyC,EAEzC,EAAM,AAAA,CAAA,EAAM,CAAA,EAAK,EAEV,CACL,AAAA,CAAA,EAAI,CAAI,CAAC,EAAE,CAAG,CAAA,EAAM,IACpB,AAAA,CAAA,EAAI,CAAI,CAAC,EAAE,CAAG,CAAA,EAAM,IACpB,AAAA,CAAA,EAAI,CAAI,CAAC,EAAE,CAAG,CAAA,EAAM,IACrB,CACF,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,EAC9B,IAAM,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IAEb,EAAI,EAAI,EAAK,CAAA,EAAM,CAAA,EACrB,EAAI,EAMR,OAJI,EAAI,GACP,CAAA,EAAI,EAAI,CAAA,EAGF,CAAC,CAAG,CAAC,EAAE,CAAE,AAAI,IAAJ,EAAS,AAAI,IAAJ,EAAQ,AAClC,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,EAC9B,IAAM,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IAEb,EAAI,EAAK,CAAA,EAAM,CAAA,EAAK,GAAM,EAC5B,EAAI,EASR,OAPI,EAAI,GAAO,EAAI,GAClB,EAAI,EAAK,CAAA,EAAI,CAAA,EAEV,GAAK,IAAO,EAAI,GACnB,CAAA,EAAI,EAAK,CAAA,EAAK,CAAA,EAAI,CAAA,CAAA,CAAC,EAGb,CAAC,CAAG,CAAC,EAAE,CAAE,AAAI,IAAJ,EAAS,AAAI,IAAJ,EAAQ,AAClC,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,EAC9B,IAAM,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,EAAI,EAAK,CAAA,EAAM,CAAA,EACzB,MAAO,CAAC,CAAG,CAAC,EAAE,CAAG,AAAA,CAAA,EAAI,CAAA,EAAK,IAAM,AAAA,CAAA,EAAI,CAAA,EAAK,IAAI,AAC9C,EAEA,EAAQ,GAAA,CAAI,GAAA,CAAM,SAAU,CAAG,EAC9B,IAAM,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,CAAG,CAAC,EAAE,CAAG,IACb,EAAI,EAAI,EACR,EAAI,EAAI,EACV,EAAI,EAMR,OAJI,EAAI,GACP,CAAA,EAAK,AAAA,CAAA,EAAI,CAAA,EAAM,CAAA,EAAI,CAAA,CAAA,EAGb,CAAC,CAAG,CAAC,EAAE,CAAE,AAAI,IAAJ,EAAS,AAAI,IAAJ,EAAQ,AAClC,EAEA,EAAQ,KAAA,CAAM,GAAA,CAAM,SAAU,CAAK,EAClC,MAAO,CAAE,CAAK,CAAC,EAAE,CAAG,MAAS,IAAM,CAAK,CAAC,EAAE,CAAG,MAAS,IAAM,CAAK,CAAC,EAAE,CAAG,MAAS,IAAI,AACtF,EAEA,EAAQ,GAAA,CAAI,KAAA,CAAQ,SAAU,CAAG,EAChC,MAAO,CAAE,CAAG,CAAC,EAAE,CAAG,IAAO,MAAQ,CAAG,CAAC,EAAE,CAAG,IAAO,MAAQ,CAAG,CAAC,EAAE,CAAG,IAAO,MAAM,AAChF,EAEA,EAAQ,IAAA,CAAK,GAAA,CAAM,SAAU,CAAI,EAChC,MAAO,CAAC,CAAI,CAAC,EAAE,CAAG,IAAM,IAAK,CAAI,CAAC,EAAE,CAAG,IAAM,IAAK,CAAI,CAAC,EAAE,CAAG,IAAM,IAAI,AACvE,EAEA,EAAQ,IAAA,CAAK,GAAA,CAAM,SAAU,CAAI,EAChC,MAAO,CAAC,EAAG,EAAG,CAAI,CAAC,EAAE,CAAC,AACvB,EAEA,EAAQ,IAAA,CAAK,GAAA,CAAM,EAAQ,IAAA,CAAK,GAAhC,CAEA,EAAQ,IAAA,CAAK,GAAA,CAAM,SAAU,CAAI,EAChC,MAAO,CAAC,EAAG,IAAK,CAAI,CAAC,EAAE,CAAC,AACzB,EAEA,EAAQ,IAAA,CAAK,IAAA,CAAO,SAAU,CAAI,EACjC,MAAO,CAAC,EAAG,EAAG,EAAG,CAAI,CAAC,EAAE,CAAC,AAC1B,EAEA,EAAQ,IAAA,CAAK,GAAA,CAAM,SAAU,CAAI,EAChC,MAAO,CAAC,CAAI,CAAC,EAAE,CAAE,EAAG,EAAE,AACvB,EAEA,EAAQ,IAAA,CAAK,GAAA,CAAM,SAAU,CAAI,EAChC,IAAM,EAAM,AAAkC,IAAlC,KAAK,KAAA,CAAM,CAAI,CAAC,EAAE,CAAG,IAAM,KAGjC,EAAS,AAFE,CAAA,AAAA,CAAA,GAAO,EAAA,EAAO,CAAA,GAAO,CAAA,EAAK,CAA3C,EAEuB,QAAA,CAAS,IAAI,WAApC,GACA,MAAO,SAAS,SAAA,CAAU,EAAO,MAAA,EAAU,CAC5C,EAEA,EAAQ,GAAA,CAAI,IAAA,CAAO,SAAU,CAAG,EAC/B,IAAM,EAAM,AAAC,CAAA,CAAG,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CAAG,CAAG,CAAC,EAAC,AAAD,EAAM,EACzC,MAAO,CAAC,EAAM,IAAM,IAAI,AACzB,C,G,E,Q,C,Q,S,C,C,C,E,I,E,E,QCzvBA,CAAA,EAAA,OAAA,CAAiB,SAAU,CAAS,EACnC,IAAM,EAAQ,AAhDf,qDAAqD;AACrD,SAAmB,CAAS,EAC3B,IAAM,EAAQ,AA9Bf;;;;;;;;;AASA,EAEA,WACC,IAAM,EAAQ,CAAC,EAET,EAAS,OAAO,IAAA,CAAK,GAE3B,IAAK,IAAI,EAAM,EAAO,MAAA,CAAQ,EAAI,EAAG,EAAI,EAAK,IAC7C,CAAK,CAAC,CAAM,CAAC,EAAE,CAAC,CAAG,CAClB,kCAAkC;AAClC,iCAAiC;AACjC,SAAU,GACV,OAAQ,IACT,EAGD,OAAO,CACR,IAKO,EAAQ,CAAC,EAAU,CAIzB,IAFA,CAAK,CAAC,EAAU,CAAC,QAAA,CAAW,EAErB,EAAM,MAAA,EAAQ,CACpB,IAAM,EAAU,EAAM,GAAtB,GACM,EAAY,OAAO,IAAA,CAAK,CAAW,CAAC,EAAQ,EAElD,IAAK,IAAI,EAAM,EAAU,MAAA,CAAQ,EAAI,EAAG,EAAI,EAAK,IAAK,CACrD,IAAM,EAAW,CAAS,CAAC,EAAE,CACvB,EAAO,CAAK,CAAC,EAAS,AAEN,CAAA,KAAlB,EAAK,QAAA,GACR,EAAK,QAAA,CAAW,CAAK,CAAC,EAAQ,CAAC,QAAA,CAAW,EAC1C,EAAK,MAAA,CAAS,EACd,EAAM,OAAA,CAAQ,GAEhB,CACD,CAEA,OAAO,CACR,EAwByB,GAClB,EAAa,CAAC,EAEd,EAAS,OAAO,IAAA,CAAK,GAC3B,IAAK,IAAI,EAAM,EAAO,MAAA,CAAQ,EAAI,EAAG,EAAI,EAAK,IAAK,CAClD,IAAM,EAAU,CAAM,CAAC,EAAE,CACnB,EAAO,CAAK,CAAC,EAAQ,AAEP,QAAhB,EAAK,MAAA,EAKT,CAAA,CAAU,CAAC,EAAQ,CAAG,AA7BxB,SAAwB,CAAO,CAAE,CAAK,EACrC,IAAM,EAAO,CAAC,CAAK,CAAC,EAAQ,CAAC,MAAf,CAAuB,EAAQ,CACzC,EAAK,CAAW,CAAC,CAAK,CAAC,EAAQ,CAAC,MAAA,CAAO,CAAC,EAAQ,CAEhD,EAAM,CAAK,CAAC,EAAQ,CAAC,MAAzB,CACA,KAAO,CAAK,CAAC,EAAI,CAAC,MAAA,EACjB,EAAK,OAAA,CAAQ,CAAK,CAAC,EAAI,CAAC,MAAxB,EACA,EAAK,AAbP,SAAc,CAAI,CAAE,CAAE,EACrB,OAAO,SAAU,CAAI,EACpB,OAAO,EAAG,EAAK,GAChB,CACD,EASY,CAAW,CAAC,CAAK,CAAC,EAAI,CAAC,MAAA,CAAO,CAAC,EAAI,CAAE,GAC/C,EAAM,CAAK,CAAC,EAAI,CAAC,MAAjB,CAID,OADA,EAAG,UAAA,CAAa,EACT,CACR,EAgBuC,EAAS,EAA9C,CACD,CAEA,OAAO,CACR,C,E,4D","sources":["<anon>","dane.ts","ordynacja.ts","typy.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/dist/random.module.js","node_modules/.pnpm/random@4.1.0/node_modules/random/src/rng.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/generators/function.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/rng-factory.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/distributions/uniform.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/validation.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/distributions/uniform-int.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/distributions/uniform-boolean.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/distributions/normal.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/distributions/log-normal.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/distributions/bernoulli.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/distributions/binomial.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/distributions/geometric.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/distributions/poisson.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/distributions/exponential.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/distributions/irwin-hall.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/distributions/bates.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/distributions/pareto.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/generators/math-random.ts","node_modules/.pnpm/random@4.1.0/node_modules/random/src/random.ts","node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/index.js","node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/alea.js","node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/xor128.js","node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/xorwow.js","node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/xorshift7.js","node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/xor4096.js","node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/tychei.js","node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/seedrandom.js","node_modules/@parcel/node-resolver-core/lib/_empty.js","util.ts","rozklad_w_okregach.ts","wykresy.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/auto/auto.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/dist/chart.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.animator.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.animation.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.animations.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.datasetController.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/controllers/controller.bar.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/controllers/controller.bubble.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/controllers/controller.doughnut.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/controllers/controller.line.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/controllers/controller.polarArea.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/controllers/controller.pie.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/controllers/controller.radar.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/controllers/controller.scatter.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.adapters.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.interaction.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.layouts.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/platform/platform.base.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/platform/platform.basic.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/platform/platform.dom.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/platform/index.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.element.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.scale.autoskip.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.scale.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.typedRegistry.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.registry.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.plugins.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.config.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.controller.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/elements/element.arc.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/elements/element.line.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/elements/element.point.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/elements/element.bar.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/plugins/plugin.colors.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/plugins/plugin.decimation.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/plugins/plugin.filler/filler.segment.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/plugins/plugin.filler/filler.helper.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/plugins/plugin.filler/filler.options.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/plugins/plugin.filler/filler.target.stack.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/plugins/plugin.filler/simpleArc.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/plugins/plugin.filler/filler.target.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/plugins/plugin.filler/filler.drawing.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/plugins/plugin.filler/index.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/plugins/plugin.legend.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/plugins/plugin.title.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/plugins/plugin.subtitle.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/plugins/plugin.tooltip.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/scales/scale.category.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/scales/scale.linearbase.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/scales/scale.linear.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/scales/scale.logarithmic.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/scales/scale.radialLinear.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/scales/scale.time.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/scales/scale.timeseries.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/index.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/dist/chunks/helpers.segment.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/helpers/helpers.core.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/helpers/helpers.math.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/helpers/helpers.collection.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/helpers/helpers.extras.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/helpers/helpers.easing.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/helpers/helpers.color.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.animations.defaults.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.layouts.defaults.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/helpers/helpers.intl.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.ticks.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.scale.defaults.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/core/core.defaults.js","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/helpers/helpers.canvas.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/helpers/helpers.options.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/helpers/helpers.config.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/helpers/helpers.curve.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/helpers/helpers.dom.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/helpers/helpers.interpolation.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/helpers/helpers.rtl.ts","node_modules/.pnpm/chart.js@4.4.0/node_modules/chart.js/src/helpers/helpers.segment.js","node_modules/.pnpm/@kurkle+color@0.3.2/node_modules/@kurkle/color/dist/color.esm.js","node_modules/.pnpm/color@4.2.3/node_modules/color/index.js","node_modules/.pnpm/color-string@1.9.1/node_modules/color-string/index.js","node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js","node_modules/.pnpm/simple-swizzle@0.2.2/node_modules/simple-swizzle/index.js","node_modules/.pnpm/is-arrayish@0.3.2/node_modules/is-arrayish/index.js","node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/index.js","node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/conversions.js","node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/route.js"],"sourcesContent":["function $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\nparcelRequire.register(\"geIQo\", function(module, exports) {\n\n$parcel$export(module.exports, \"KOLOR_PARTII\", () => $d0bdfc9e83895ac0$export$802aa3ab0f758505);\n$parcel$export(module.exports, \"sondaze\", () => $d0bdfc9e83895ac0$export$f97acfc33e365d7);\n$parcel$export(module.exports, \"sondazeDoSredniej\", () => $d0bdfc9e83895ac0$export$76701ce0616caa92);\n$parcel$export(module.exports, \"srednia\", () => $d0bdfc9e83895ac0$export$9aace05d0b7af991);\n$parcel$export(module.exports, \"sredniaSondazy\", () => $d0bdfc9e83895ac0$export$8d735048c0d75c97);\n$parcel$export(module.exports, \"okregi\", () => $d0bdfc9e83895ac0$export$df58dec3b5376b15);\n$parcel$export(module.exports, \"glosy2019\", () => $d0bdfc9e83895ac0$export$1697adf3f88eb3ce);\n\nvar $3i35a = parcelRequire(\"3i35a\");\nconst $d0bdfc9e83895ac0$export$802aa3ab0f758505 = {\n    PIS: \"rgb(38, 55, 120)\",\n    LEWICA: \"rgb(171,20,91)\",\n    KONF: \"rgb(0, 0, 0)\",\n    TD: \"rgb(220, 195, 16)\",\n    KO: \"rgb(0,68,149)\",\n    BIAŁY: \"rgb(255,255,255)\"\n};\nconst $d0bdfc9e83895ac0$export$f97acfc33e365d7 = {\n    IBRiS_20231010: {\n        PIS: 33.5,\n        KO: 28.0,\n        TD: 10.9,\n        LEWICA: 10.1,\n        KONF: 9.2\n    },\n    ewybory_20231010: {\n        PIS: 33.45,\n        KO: 30.85,\n        TD: 11.03,\n        LEWICA: 12.88,\n        KONF: 8.5\n    },\n    IPSOS_20231010: {\n        PIS: 36.0,\n        KO: 28.0,\n        TD: 8.0,\n        LEWICA: 8.0,\n        KONF: 9.0\n    },\n    Pollster_CAWI_20231007: {\n        PIS: 34.3,\n        KO: 30.0,\n        TD: 11.8,\n        LEWICA: 8.2,\n        KONF: 8.2\n    },\n    IBRiS_20231007: {\n        PIS: 34.6,\n        KO: 27.9,\n        TD: 7.6,\n        LEWICA: 11.4,\n        KONF: 7.7\n    },\n    Estymator_20231006: {\n        PIS: 36.9,\n        KO: 30.5,\n        TD: 9.4,\n        LEWICA: 9.3,\n        KONF: 9.3\n    },\n    // Opinia24_20231004_plus_niezdecydowani: {\n    //   PIS: 32.9,\n    //   KO: 31.1,\n    //   TD: 13.2,\n    //   LEWICA: 11.3,\n    //   KONF: 6.5,\n    // },\n    Opinia24_20231004: {\n        PIS: 30.0,\n        KO: 25.0,\n        TD: 6.0,\n        LEWICA: 9.0,\n        KONF: 5.0\n    },\n    IBRiS_20231004: {\n        PIS: 34.0,\n        KO: 28.9,\n        TD: 10.6,\n        LEWICA: 10.0,\n        KONF: 9.7\n    },\n    Kantar_20231004: {\n        PIS: 34.0,\n        KO: 30.0,\n        TD: 9.0,\n        LEWICA: 10.0,\n        KONF: 8.0\n    },\n    UnitedSurveys_20231002: {\n        PIS: 32.0,\n        KO: 28.2,\n        TD: 11.0,\n        LEWICA: 10.2,\n        KONF: 10.0\n    },\n    UnitedSurveys_20231001: {\n        PIS: 32.5,\n        KO: 26.4,\n        TD: 12.1,\n        LEWICA: 8.1,\n        KONF: 9.0\n    },\n    Estymator_20230930: {\n        PIS: 37.4,\n        KO: 30.6,\n        TD: 9.6,\n        LEWICA: 8.7,\n        KONF: 9.5\n    },\n    IBRiS_20230927: {\n        PIS: 35.1,\n        KO: 27.0,\n        TD: 10.4,\n        LEWICA: 10.1,\n        KONF: 9.5\n    },\n    IPSOS_20230925: {\n        PIS: 36.0,\n        KO: 29.0,\n        TD: 8.0,\n        LEWICA: 10,\n        KONF: 7.0\n    },\n    UnitedSurveys_20230924: {\n        PIS: 33.8,\n        KO: 28.1,\n        TD: 9.0,\n        LEWICA: 8.7,\n        KONF: 8.8\n    },\n    Estymator_20230923: {\n        PIS: 37.3,\n        KO: 29.8,\n        TD: 9.9,\n        LEWICA: 8.5,\n        KONF: 10.6\n    },\n    Pollster_20230922: {\n        PIS: 36.8,\n        KO: 30.4,\n        TD: 9.8,\n        LEWICA: 9.7,\n        KONF: 8.7\n    },\n    IBRiS_20230920: {\n        PIS: 35.1,\n        KO: 26.1,\n        TD: 9.2,\n        LEWICA: 9.1,\n        KONF: 9.9\n    }\n};\nconst $d0bdfc9e83895ac0$export$76701ce0616caa92 = {\n    IBRiS_20231010: $d0bdfc9e83895ac0$export$f97acfc33e365d7.IBRiS_20231010,\n    // ewybory_20231010: sondaze.ewybory_20231010,\n    IPSOS_20231010: $d0bdfc9e83895ac0$export$f97acfc33e365d7.IPSOS_20231010,\n    IBRiS_20231007: $d0bdfc9e83895ac0$export$f97acfc33e365d7.IBRiS_20231007,\n    Estymator_20231006: $d0bdfc9e83895ac0$export$f97acfc33e365d7.Estymator_20231006,\n    Opinia24_20231004: $d0bdfc9e83895ac0$export$f97acfc33e365d7.Opinia24_20231004,\n    IBRiS_20231004: $d0bdfc9e83895ac0$export$f97acfc33e365d7.IBRiS_20231004,\n    Kantar_20231004: $d0bdfc9e83895ac0$export$f97acfc33e365d7.Kantar_20231004\n};\nconst $d0bdfc9e83895ac0$export$9aace05d0b7af991 = {};\nconst $d0bdfc9e83895ac0$export$8d735048c0d75c97 = {};\nObject.entries($d0bdfc9e83895ac0$export$76701ce0616caa92).forEach(([sondaz, wynik])=>{\n    Object.entries(wynik).forEach(([partia, procent])=>$d0bdfc9e83895ac0$export$8d735048c0d75c97[partia] ? $d0bdfc9e83895ac0$export$8d735048c0d75c97[partia] += procent : $d0bdfc9e83895ac0$export$8d735048c0d75c97[partia] = procent);\n});\nconst $d0bdfc9e83895ac0$var$sumaProcentow = Object.values($d0bdfc9e83895ac0$export$8d735048c0d75c97).reduce((acc, curr)=>acc += curr, 0) / Object.entries($d0bdfc9e83895ac0$export$76701ce0616caa92).length;\nObject.entries($d0bdfc9e83895ac0$export$8d735048c0d75c97).forEach(([partia, procent])=>{\n    $d0bdfc9e83895ac0$export$9aace05d0b7af991[partia] = $d0bdfc9e83895ac0$export$8d735048c0d75c97[partia] / Object.entries($d0bdfc9e83895ac0$export$76701ce0616caa92).length;\n    $d0bdfc9e83895ac0$export$8d735048c0d75c97[partia] = $d0bdfc9e83895ac0$export$8d735048c0d75c97[partia] / Object.entries($d0bdfc9e83895ac0$export$76701ce0616caa92).length * (100 / $d0bdfc9e83895ac0$var$sumaProcentow);\n});\nconst $d0bdfc9e83895ac0$export$8eedfbb484d171c = {\n    PIS: 43.59,\n    KO: 27.4,\n    LEWICA: 12.56,\n    PSL: 8.55,\n    KONF: 6.81\n};\nconst $d0bdfc9e83895ac0$export$df58dec3b5376b15 = [\n    {\n        nr: 1,\n        miasto: \"Legnica\",\n        mandaty: 12,\n        glosy2019: 432436,\n        wynik2019: {\n            KO: 25.02,\n            KONF: 5.85,\n            PSL: 7.17,\n            PIS: 42.4,\n            LEWICA: 16.43\n        }\n    },\n    {\n        nr: 2,\n        miasto: \"Wałbrzych\",\n        mandaty: 8,\n        glosy2019: 283002,\n        wynik2019: {\n            KO: 32.09,\n            KONF: 5.42,\n            PSL: 7.25,\n            PIS: 40.54,\n            LEWICA: 12.35\n        }\n    },\n    {\n        nr: 3,\n        miasto: \"Wrocław\",\n        mandaty: 14,\n        glosy2019: 654455,\n        wynik2019: {\n            KO: 32.8,\n            KONF: 7.45,\n            PSL: 6.46,\n            PIS: 34.67,\n            LEWICA: 15.41\n        }\n    },\n    {\n        nr: 4,\n        miasto: \"Bydgoszcz\",\n        mandaty: 12,\n        glosy2019: 459982,\n        wynik2019: {\n            KO: 31.05,\n            KONF: 7.05,\n            PSL: 9.02,\n            PIS: 36.43,\n            LEWICA: 15.17\n        }\n    },\n    {\n        nr: 5,\n        miasto: \"Toruń\",\n        mandaty: 13,\n        glosy2019: 452330,\n        wynik2019: {\n            KO: 26.42,\n            KONF: 6.33,\n            PSL: 10.88,\n            PIS: 40.38,\n            LEWICA: 14.83\n        }\n    },\n    {\n        nr: 6,\n        miasto: \"Lublin\",\n        mandaty: 15,\n        glosy2019: 565597,\n        wynik2019: {\n            KO: 19.3,\n            KONF: 7.07,\n            PSL: 9.1,\n            PIS: 55.39,\n            LEWICA: 7.81\n        }\n    },\n    {\n        nr: 7,\n        miasto: \"Chełm\",\n        mandaty: 12,\n        glosy2019: 401318,\n        wynik2019: {\n            KO: 14.8,\n            KONF: 5.84,\n            PSL: 11.86,\n            PIS: 59.5,\n            LEWICA: 6.83\n        }\n    },\n    {\n        nr: 8,\n        miasto: \"Zielona G\\xf3ra\",\n        mandaty: 12,\n        glosy2019: 437917,\n        wynik2019: {\n            KO: 31.27,\n            KONF: 7.19,\n            PSL: 11.63,\n            PIS: 34.3,\n            LEWICA: 15.61\n        }\n    },\n    {\n        nr: 9,\n        miasto: \"Ł\\xf3dź\",\n        mandaty: 10,\n        glosy2019: 415540,\n        wynik2019: {\n            KO: 35.82,\n            KONF: 6.65,\n            PSL: 4.53,\n            PIS: 32.9,\n            LEWICA: 20.1\n        }\n    },\n    {\n        nr: 10,\n        miasto: \"Piotrk\\xf3w Trybunalski\",\n        mandaty: 9,\n        glosy2019: 346326,\n        wynik2019: {\n            KO: 15.64,\n            KONF: 6.76,\n            PSL: 10.44,\n            PIS: 56.21,\n            LEWICA: 10.95\n        }\n    },\n    {\n        nr: 11,\n        miasto: \"Sieradz\",\n        mandaty: 12,\n        glosy2019: 460239,\n        wynik2019: {\n            KO: 20.48,\n            KONF: 5.88,\n            PSL: 10.29,\n            PIS: 49.81,\n            LEWICA: 11.98\n        }\n    },\n    {\n        nr: 12,\n        miasto: \"Chrzan\\xf3w\",\n        mandaty: 8,\n        glosy2019: 316214,\n        wynik2019: {\n            KO: 23.04,\n            KONF: 7.06,\n            PSL: 7.9,\n            PIS: 53.48,\n            LEWICA: 8.51\n        }\n    },\n    {\n        nr: 13,\n        miasto: \"Krak\\xf3w\",\n        mandaty: 14,\n        glosy2019: 649287,\n        wynik2019: {\n            KO: 30.48,\n            KONF: 7.99,\n            PSL: 7.27,\n            PIS: 39.56,\n            LEWICA: 13.01\n        }\n    },\n    {\n        nr: 14,\n        miasto: \"Nowy Sącz\",\n        mandaty: 10,\n        glosy2019: 370199,\n        wynik2019: {\n            KO: 13.83,\n            KONF: 6.95,\n            PSL: 7.35,\n            PIS: 65.8,\n            LEWICA: 6.07\n        }\n    },\n    {\n        nr: 15,\n        miasto: \"Tarn\\xf3w\",\n        mandaty: 9,\n        glosy2019: 347088,\n        wynik2019: {\n            KO: 14.0,\n            KONF: 7.11,\n            PSL: 13.35,\n            PIS: 59.59,\n            LEWICA: 5.94\n        }\n    },\n    {\n        nr: 16,\n        miasto: \"Płock\",\n        mandaty: 10,\n        glosy2019: 370561,\n        wynik2019: {\n            KO: 16.85,\n            KONF: 5.24,\n            PSL: 15.17,\n            PIS: 52.45,\n            LEWICA: 8.76\n        }\n    },\n    {\n        nr: 17,\n        miasto: \"Radom\",\n        mandaty: 9,\n        glosy2019: 335009,\n        wynik2019: {\n            KO: 17.15,\n            KONF: 5.89,\n            PSL: 10.2,\n            PIS: 57.82,\n            LEWICA: 7.43\n        }\n    },\n    {\n        nr: 18,\n        miasto: \"Siedlce\",\n        mandaty: 12,\n        glosy2019: 452906,\n        wynik2019: {\n            KO: 13.94,\n            KONF: 6.49,\n            PSL: 11.94,\n            PIS: 59.76,\n            LEWICA: 6.45\n        }\n    },\n    {\n        nr: 19,\n        miasto: \"Warszawa I\",\n        mandaty: 20,\n        glosy2019: 1381917,\n        wynik2019: {\n            KO: 42.05,\n            KONF: 7.51,\n            PSL: 4.75,\n            PIS: 27.49,\n            LEWICA: 18.19\n        }\n    },\n    {\n        nr: 20,\n        miasto: \"Warszawa II\",\n        mandaty: 12,\n        glosy2019: 598727,\n        wynik2019: {\n            KO: 28.61,\n            KONF: 6.63,\n            PSL: 8.6,\n            PIS: 40.89,\n            LEWICA: 13.09\n        }\n    },\n    {\n        nr: 21,\n        miasto: \"Opole\",\n        mandaty: 11,\n        glosy2019: 406439,\n        wynik2019: {\n            KO: 26.71,\n            KONF: 5.7,\n            PSL: 10.31,\n            PIS: 37.64,\n            LEWICA: 11.74\n        }\n    },\n    {\n        nr: 22,\n        miasto: \"Krosno\",\n        mandaty: 11,\n        glosy2019: 390581,\n        wynik2019: {\n            KO: 15.94,\n            KONF: 6.81,\n            PSL: 7.85,\n            PIS: 63.36,\n            LEWICA: 6.04\n        }\n    },\n    {\n        nr: 23,\n        miasto: \"Rzesz\\xf3w\",\n        mandaty: 15,\n        glosy2019: 588786,\n        wynik2019: {\n            KO: 14.39,\n            KONF: 8.25,\n            PSL: 7.79,\n            PIS: 62.38,\n            LEWICA: 6.59\n        }\n    },\n    {\n        nr: 24,\n        miasto: \"Białystok\",\n        mandaty: 14,\n        glosy2019: 520578,\n        wynik2019: {\n            KO: 21.04,\n            KONF: 6.96,\n            PSL: 9.33,\n            PIS: 52.04,\n            LEWICA: 9.09\n        }\n    },\n    {\n        nr: 25,\n        miasto: \"Gdańsk\",\n        mandaty: 12,\n        glosy2019: 528829,\n        wynik2019: {\n            KO: 41.31,\n            KONF: 7.21,\n            PSL: 5.9,\n            PIS: 32.1,\n            LEWICA: 13.47\n        }\n    },\n    {\n        nr: 26,\n        miasto: \"Gdynia\",\n        mandaty: 14,\n        glosy2019: 580722,\n        wynik2019: {\n            KO: 35.85,\n            KONF: 7.3,\n            PSL: 7.94,\n            PIS: 36.43,\n            LEWICA: 12.47\n        }\n    },\n    {\n        nr: 27,\n        miasto: \"Bielsko-Biała\",\n        mandaty: 9,\n        glosy2019: 389256,\n        wynik2019: {\n            KO: 27.2,\n            KONF: 7.42,\n            PSL: 7.13,\n            PIS: 46.76,\n            LEWICA: 11.48\n        }\n    },\n    {\n        nr: 28,\n        miasto: \"Częstochowa\",\n        mandaty: 7,\n        glosy2019: 284517,\n        wynik2019: {\n            KO: 22.63,\n            KONF: 6.07,\n            PSL: 8.68,\n            PIS: 44.28,\n            LEWICA: 15.59\n        }\n    },\n    {\n        nr: 29,\n        miasto: \"Gliwice\",\n        mandaty: 9,\n        glosy2019: 340647,\n        wynik2019: {\n            KO: 32.61,\n            KONF: 7.67,\n            PSL: 5.99,\n            PIS: 37.75,\n            LEWICA: 13.38\n        }\n    },\n    {\n        nr: 30,\n        miasto: \"Rybnik\",\n        mandaty: 9,\n        glosy2019: 333836,\n        wynik2019: {\n            KO: 27.71,\n            KONF: 7.17,\n            PSL: 5.64,\n            PIS: 48.28,\n            LEWICA: 9.68\n        }\n    },\n    {\n        nr: 31,\n        miasto: \"Katowice\",\n        mandaty: 12,\n        glosy2019: 469633,\n        wynik2019: {\n            KO: 37.2,\n            KONF: 7.33,\n            PSL: 4.37,\n            PIS: 39.19,\n            LEWICA: 11.92\n        }\n    },\n    {\n        nr: 32,\n        miasto: \"Sosnowiec\",\n        mandaty: 9,\n        glosy2019: 335431,\n        wynik2019: {\n            KO: 29.66,\n            KONF: 6.45,\n            PSL: 4.85,\n            PIS: 37.13,\n            LEWICA: 21.9\n        }\n    },\n    {\n        nr: 33,\n        miasto: \"Kielce\",\n        mandaty: 16,\n        glosy2019: 569891,\n        wynik2019: {\n            KO: 16.65,\n            KONF: 5.95,\n            PSL: 9.88,\n            PIS: 55.18,\n            LEWICA: 9.95\n        }\n    },\n    {\n        nr: 34,\n        miasto: \"Elbląg\",\n        mandaty: 8,\n        glosy2019: 250819,\n        wynik2019: {\n            KO: 28.43,\n            KONF: 5.66,\n            PSL: 10.89,\n            PIS: 40.86,\n            LEWICA: 11.64\n        }\n    },\n    {\n        nr: 35,\n        miasto: \"Olsztyn\",\n        mandaty: 10,\n        glosy2019: 331684,\n        wynik2019: {\n            KO: 26.46,\n            KONF: 6.97,\n            PSL: 13.19,\n            PIS: 38.82,\n            LEWICA: 13.84\n        }\n    },\n    {\n        nr: 36,\n        miasto: \"Kalisz\",\n        mandaty: 12,\n        glosy2019: 459152,\n        wynik2019: {\n            KO: 24.72,\n            KONF: 6.57,\n            PSL: 12.8,\n            PIS: 42.48,\n            LEWICA: 13.43\n        }\n    },\n    {\n        nr: 37,\n        miasto: \"Konin\",\n        mandaty: 9,\n        glosy2019: 353041,\n        wynik2019: {\n            KO: 20.48,\n            KONF: 6.74,\n            PSL: 9.81,\n            PIS: 47.29,\n            LEWICA: 15.04\n        }\n    },\n    {\n        nr: 38,\n        miasto: \"Piła\",\n        mandaty: 9,\n        glosy2019: 349051,\n        wynik2019: {\n            KO: 30.6,\n            KONF: 6.62,\n            PSL: 13.86,\n            PIS: 35.64,\n            LEWICA: 13.28\n        }\n    },\n    {\n        nr: 39,\n        miasto: \"Poznań\",\n        mandaty: 10,\n        glosy2019: 514527,\n        wynik2019: {\n            KO: 45.38,\n            KONF: 6.61,\n            PSL: 6.2,\n            PIS: 25.33,\n            LEWICA: 16.49\n        }\n    },\n    {\n        nr: 40,\n        miasto: \"Koszalin\",\n        mandaty: 8,\n        glosy2019: 271711,\n        wynik2019: {\n            KO: 32.31,\n            KONF: 5.98,\n            PSL: 9.43,\n            PIS: 36.83,\n            LEWICA: 15.44\n        }\n    },\n    {\n        nr: 41,\n        miasto: \"Szczecin\",\n        mandaty: 12,\n        glosy2019: 470529,\n        wynik2019: {\n            KO: 35.71,\n            KONF: 6.53,\n            PSL: 7.4,\n            PIS: 35.11,\n            LEWICA: 15.25\n        }\n    }\n];\nconst $d0bdfc9e83895ac0$export$1697adf3f88eb3ce = [\n    [\n        108191,\n        25319,\n        31006,\n        183364,\n        71061\n    ],\n    [\n        90812,\n        15346,\n        20528,\n        114728,\n        34957\n    ],\n    [\n        214629,\n        48775,\n        42269,\n        226915,\n        100843\n    ],\n    [\n        142844,\n        32406,\n        41497,\n        167550,\n        69763\n    ],\n    [\n        119526,\n        28625,\n        49225,\n        182648,\n        67076\n    ],\n    [\n        109185,\n        40012,\n        51474,\n        313284,\n        44152\n    ],\n    [\n        59401,\n        23439,\n        47604,\n        238802,\n        27404\n    ],\n    [\n        136955,\n        31490,\n        50943,\n        150188,\n        68341\n    ],\n    [\n        148830,\n        27627,\n        18828,\n        136731,\n        83524\n    ],\n    [\n        54160,\n        23427,\n        36151,\n        194658,\n        37930\n    ],\n    [\n        94268,\n        27054,\n        47373,\n        229245,\n        55116\n    ],\n    [\n        72869,\n        22334,\n        24996,\n        169106,\n        26909\n    ],\n    [\n        197930,\n        51855,\n        47219,\n        256847,\n        84457\n    ],\n    [\n        51183,\n        25747,\n        27203,\n        243583,\n        22483\n    ],\n    [\n        48597,\n        24695,\n        46333,\n        206845,\n        20618\n    ],\n    [\n        62429,\n        19405,\n        56227,\n        194371,\n        32448\n    ],\n    [\n        57449,\n        19724,\n        34185,\n        193709,\n        24884\n    ],\n    [\n        63124,\n        29390,\n        54085,\n        270641,\n        29235\n    ],\n    [\n        581077,\n        103843,\n        65683,\n        379880,\n        251434\n    ],\n    [\n        171286,\n        39675,\n        51484,\n        244823,\n        78348\n    ],\n    [\n        108570,\n        23176,\n        41901,\n        152999,\n        47699\n    ],\n    [\n        62246,\n        26615,\n        30655,\n        247488,\n        23577\n    ],\n    [\n        84703,\n        48600,\n        45868,\n        367268,\n        38817\n    ],\n    [\n        109527,\n        36207,\n        48566,\n        270888,\n        47342\n    ],\n    [\n        218484,\n        38153,\n        31203,\n        169753,\n        71236\n    ],\n    [\n        208208,\n        42364,\n        46132,\n        211582,\n        72436\n    ],\n    [\n        105876,\n        28900,\n        27752,\n        182027,\n        44701\n    ],\n    [\n        64374,\n        17278,\n        24704,\n        125990,\n        44354\n    ],\n    [\n        111078,\n        26114,\n        20408,\n        128579,\n        45583\n    ],\n    [\n        92493,\n        23939,\n        18816,\n        161160,\n        32300\n    ],\n    [\n        174683,\n        34416,\n        20512,\n        184030,\n        55992\n    ],\n    [\n        99499,\n        21650,\n        16263,\n        124553,\n        73466\n    ],\n    [\n        94880,\n        33895,\n        56289,\n        314455,\n        56699\n    ],\n    [\n        71320,\n        14187,\n        27319,\n        102478,\n        29196\n    ],\n    [\n        87780,\n        23134,\n        43758,\n        128760,\n        45912\n    ],\n    [\n        113489,\n        30177,\n        58759,\n        195053,\n        61674\n    ],\n    [\n        72295,\n        23810,\n        34620,\n        166965,\n        53090\n    ],\n    [\n        106810,\n        23123,\n        48371,\n        124392,\n        46355\n    ],\n    [\n        233474,\n        34024,\n        31875,\n        130319,\n        84835\n    ],\n    [\n        87799,\n        16259,\n        25632,\n        100078,\n        41943\n    ],\n    [\n        168022,\n        30744,\n        34807,\n        165200,\n        71756\n    ]\n];\nconst $d0bdfc9e83895ac0$var$glosy2019Procent = $d0bdfc9e83895ac0$export$1697adf3f88eb3ce.map((arr)=>{\n    const dzielnik = (arr[0] + arr[1] + arr[2] + arr[3] + arr[4]) / 100;\n    return {\n        KO: arr[0] / dzielnik,\n        KONF: arr[1] / dzielnik,\n        PSL: arr[2] / dzielnik,\n        PIS: arr[3] / dzielnik,\n        SLD: arr[4] / dzielnik\n    };\n});\nconst $d0bdfc9e83895ac0$export$e64acc17a7f4c842 = {};\nlet $d0bdfc9e83895ac0$var$i = 0;\n$d0bdfc9e83895ac0$var$glosy2019Procent.forEach((wynik)=>{\n    $d0bdfc9e83895ac0$export$e64acc17a7f4c842[$d0bdfc9e83895ac0$export$df58dec3b5376b15[$d0bdfc9e83895ac0$var$i].miasto] = {\n        KO: $d0bdfc9e83895ac0$export$1697adf3f88eb3ce[$d0bdfc9e83895ac0$var$i][0],\n        KONF: $d0bdfc9e83895ac0$export$1697adf3f88eb3ce[$d0bdfc9e83895ac0$var$i][1],\n        PSL: $d0bdfc9e83895ac0$export$1697adf3f88eb3ce[$d0bdfc9e83895ac0$var$i][2],\n        PIS: $d0bdfc9e83895ac0$export$1697adf3f88eb3ce[$d0bdfc9e83895ac0$var$i][3],\n        SLD: $d0bdfc9e83895ac0$export$1697adf3f88eb3ce[$d0bdfc9e83895ac0$var$i][4]\n    };\n    (0, $3i35a.PodzialMandatowWOkregu)(wynik, $d0bdfc9e83895ac0$export$df58dec3b5376b15[$d0bdfc9e83895ac0$var$i], {\n        log: true\n    });\n    $d0bdfc9e83895ac0$var$i++;\n});\n\n});\nparcelRequire.register(\"3i35a\", function(module, exports) {\n\n$parcel$export(module.exports, \"NaPolDemo\", () => $9bc43309e06c2764$export$c7f05eb85d8ce4ff);\n$parcel$export(module.exports, \"NaDemo\", () => $9bc43309e06c2764$export$249f49cfde10ec4a);\n$parcel$export(module.exports, \"PoparcieWOkregu\", () => $9bc43309e06c2764$export$78b00e1dcefd3798);\n$parcel$export(module.exports, \"PodzialMandatowKraj\", () => $9bc43309e06c2764$export$ba59b43972503164);\n$parcel$export(module.exports, \"PodzialMandatowWOkregu\", () => $9bc43309e06c2764$export$d6b31143b10bb361);\n$parcel$export(module.exports, \"NormalizujWynik\", () => $9bc43309e06c2764$export$51a1424039638d72);\n$parcel$export(module.exports, \"RozkladPrawdopodobienstwaWOkregu\", () => $9bc43309e06c2764$export$cf1782a3046d6a77);\n\nvar $geIQo = parcelRequire(\"geIQo\");\n\nvar $cWeek = parcelRequire(\"cWeek\");\n\nvar $iXaHu = parcelRequire(\"iXaHu\");\n\nvar $9HmlY = parcelRequire(\"9HmlY\");\n\nvar $8OXs6 = parcelRequire(\"8OXs6\");\n// Do jakich wartości +- od środka uwzględniać wartości, żeby wykres nie był zbyt szeroki.\nconst $9bc43309e06c2764$var$ZAKRES_DOL = 2.5;\nconst $9bc43309e06c2764$var$ZAKRES_GORA = 3;\nfunction $9bc43309e06c2764$export$c7f05eb85d8ce4ff(wynik) {\n    return {\n        KO: wynik.KO,\n        LEWICA: wynik.LEWICA || 0,\n        TD: wynik.TD || 0,\n        NIEDEMO: wynik.PIS + (wynik.KONF || 0)\n    };\n}\nfunction $9bc43309e06c2764$export$249f49cfde10ec4a(wynik) {\n    return {\n        DEMO: wynik.KO + (wynik.LEWICA || 0) + (wynik.TD || 0),\n        NIEDEMO: wynik.PIS + (wynik.KONF || 0)\n    };\n}\nlet $9bc43309e06c2764$var$glosyTD = 0;\nlet $9bc43309e06c2764$var$glosyMnoznikTD = 0;\nfunction $9bc43309e06c2764$export$78b00e1dcefd3798(wynik, okreg) {\n    const wynikWOkregu = {};\n    const odchylenieWOkregu = {};\n    for (const [partia, procent] of Object.entries(wynik)){\n        wynikWOkregu[partia] = procent * (0, $8OXs6.ROZKLAD)[partia][okreg.nr - 1];\n        odchylenieWOkregu[partia] = $9bc43309e06c2764$export$f43f50db268314fa(partia, procent, okreg.nr);\n    }\n    return {\n        wynikWOkregu: wynikWOkregu,\n        odchylenieWOkregu: odchylenieWOkregu\n    };\n}\nfunction $9bc43309e06c2764$export$ba59b43972503164(wynik) {\n    $9bc43309e06c2764$var$glosyTD = 0;\n    $9bc43309e06c2764$var$glosyMnoznikTD = 0;\n    const mandatyWKraju = {\n        PIS: 0,\n        KO: 0,\n        LEWICA: 0,\n        TD: 0,\n        KONF: 0\n    };\n    for (const okreg of (0, $geIQo.okregi)){\n        const wynikWOkregu = $9bc43309e06c2764$export$78b00e1dcefd3798(wynik, okreg).wynikWOkregu;\n        const mandatyWOkregu = $9bc43309e06c2764$export$d6b31143b10bb361(wynikWOkregu, okreg);\n        for (const [partia, mandaty] of Object.entries(mandatyWOkregu))mandatyWKraju[partia] += mandaty;\n    }\n    return mandatyWKraju;\n}\nfunction $9bc43309e06c2764$export$d6b31143b10bb361(wynik, okreg, options) {\n    const dhont = [];\n    for (const [partia, procent] of Object.entries(wynik))for(let i = 1; i <= 12; i++)dhont.push({\n        partia: partia,\n        iloraz: procent / i,\n        nrMandatu: i\n    });\n    const posortowanyDhont = dhont.sort((a, b)=>{\n        return b.iloraz - a.iloraz;\n    });\n    const ostatniWzietyMandat = posortowanyDhont[okreg.mandaty - 1];\n    const pierwszyNiewzietyMandat = posortowanyDhont[okreg.mandaty];\n    const glosyWOkregu2019 = (0, $geIQo.glosy2019)[okreg.nr - 1].reduce((accumulator, currentValue)=>{\n        return accumulator + currentValue;\n    }, 0);\n    const podzial = posortowanyDhont.slice(0, okreg.mandaty).map((x)=>x.partia).reduce((acc, cur)=>{\n        acc[cur] ? acc[cur]++ : acc[cur] = 1;\n        return acc;\n    }, {});\n    podzial.cenaMandatu = Math.round(ostatniWzietyMandat.iloraz / 100 * glosyWOkregu2019);\n    // Opcjonalna sekcja\n    for (const d of dhont.filter((value)=>value.iloraz + 0.001 > ostatniWzietyMandat.iloraz)){\n        const glosy = d.iloraz * d.nrMandatu;\n        const resztaUlamek = Math.round(10000 * (glosy % ostatniWzietyMandat.iloraz) / ostatniWzietyMandat.iloraz) / 1000;\n        console.log(wynik, okreg, glosy, ostatniWzietyMandat.iloraz, resztaUlamek);\n        if (!podzial[`${d.partia}_zagrozenie`]) podzial[`${d.partia}_zagrozenie`] = resztaUlamek < 0.20 && resztaUlamek > 0;\n        if (!podzial[`${d.partia}_ostatnie`]) podzial[`${d.partia}_ostatnie`] = resztaUlamek === 0;\n        if (!podzial[`${d.partia}_dawca`]) podzial[`${d.partia}_dawca`] = resztaUlamek < 0.75 && resztaUlamek > 0.25;\n    }\n    for (const d of dhont.filter((value)=>value.iloraz < ostatniWzietyMandat.iloraz)){\n        const glosy = d.iloraz * d.nrMandatu;\n        console.log(wynik, okreg, glosy, ostatniWzietyMandat.iloraz);\n        if (!podzial[`${d.partia}_szansa`]) podzial[`${d.partia}_szansa`] = glosy % ostatniWzietyMandat.iloraz / ostatniWzietyMandat.iloraz > 0.8;\n    }\n    // if (options?.log) {\n    //   console.log(\n    //     `W okręgu ${okreg.miasto} różnica głosów potrzebna żeby zmienić wynik wynosiła ${roznica}. Liczymy to jako różnicę między ostatnim wprowadzonym posłem (mandat numer #${ostatniWzietyMandat.nrMandatu} \n    //     dla ${ostatniWzietyMandat.partia}) a pierwszym niebiorącym miejscem (byłby to mandat #${pierwszyNiewzietyMandat.nrMandatu} \n    //     dla ${pierwszyNiewzietyMandat.partia}). Wyliczamy to dzieląc ilorazy (${ilorazBioracy} /\n    //     ${ilorazNiebioracy}) i mnożąc przez ${pierwszyNiewzietyMandat.nrMandatu}, bo byłby to mandat numer ${pierwszyNiewzietyMandat.nrMandatu} dla ${pierwszyNiewzietyMandat.partia} w tym okręgu.`\n    //   );\n    // }\n    return podzial;\n}\nfunction $9bc43309e06c2764$var$czestoscNaProcentSymulacji(value) {\n    return (Math.round(1000 * (value / (0, $cWeek.ILE_SYMULACJI))) / 10).toString() + \"%\";\n}\nfunction $9bc43309e06c2764$export$f43f50db268314fa(partia, procent, okreg) {\n    // https://chat.openai.com/share/30b1d901-30b1-46bb-af91-a831affbc3e7\n    const bladProporcji = Math.sqrt(procent / 100 * (1 - procent / 100) / (1000 * Object.entries((0, $geIQo.sondazeDoSredniej)).length));\n    // Mnożymy przez sqrt(5), żeby przeliczyć bląd statystyczny z wykresu na odchylenie standardowe. Potem przeliczamy na punkty procentowe.\n    const bladOdchyleniaWRegionie = (0, $8OXs6.ROZKLAD)[`${partia}_BLAD`][okreg - 1] * Math.sqrt(5) * (procent / 100);\n    // return (100 * bladProporcji) + (ROZKLAD[`${partia}_BLAD`][okreg - 1] * Math.sqrt(5));\n    // sumowanie odchylen standardowych: https://chat.openai.com/share/81cdfe04-09b5-45b6-8624-b3d402b12a60\n    return Math.sqrt(100 * bladProporcji * (100 * bladProporcji) + bladOdchyleniaWRegionie * bladOdchyleniaWRegionie);\n}\nfunction $9bc43309e06c2764$export$51a1424039638d72(wynik) {\n    const suma = wynik.KO + wynik.PIS + wynik.TD + wynik.KONF + wynik.LEWICA;\n    const mnożnik = 100 / suma;\n    return {\n        PIS: wynik.PIS * mnożnik,\n        KO: wynik.KO * mnożnik,\n        TD: wynik.TD * mnożnik,\n        KONF: wynik.KONF * mnożnik,\n        LEWICA: wynik.LEWICA * mnożnik\n    };\n}\nfunction $9bc43309e06c2764$export$cf1782a3046d6a77(wynik, okreg) {\n    const { wynikWOkregu: wynikWOkregu, odchylenieWOkregu: odchylenieWOkregu } = $9bc43309e06c2764$export$78b00e1dcefd3798(wynik, okreg);\n    const procentyWOkreguSrednia = $9bc43309e06c2764$export$51a1424039638d72(wynikWOkregu);\n    const rozklad = {};\n    const rozkladDemo = {};\n    const histogram = {};\n    const minimumMandatow = {\n        KO: 100,\n        TD: 100,\n        LEWICA: 100\n    };\n    const zagrozoneMandaty = {\n        KO: 0,\n        TD: 0,\n        LEWICA: 0\n    };\n    const potencjalneMandaty = {\n        KO: 0,\n        TD: 0,\n        LEWICA: 0\n    };\n    const ostatnieMandaty = {\n        KO: 0,\n        TD: 0,\n        LEWICA: 0\n    };\n    const dawcyGlosow = {\n        KO: 0,\n        TD: 0,\n        LEWICA: 0\n    };\n    const bucketFn = (num, bucket)=>Math.round(num * bucket) / bucket;\n    for(let i = 1; i <= (0, $cWeek.ILE_SYMULACJI); i++){\n        // Losowanie poparcia dla partii\n        let glosyWOkreguLosoweUncapped = {};\n        for (const [partia, procent] of Object.entries(procentyWOkreguSrednia)){\n            const wynikLosowyUncapped = Math.max((0, $iXaHu.default).normal(procent, odchylenieWOkregu[partia])(), 0);\n            // Przytnijmy procent głosów do +- ZAKRES od wartości oczekiwanej, ale nie mniej niż zero procent głosów :)\n            glosyWOkreguLosoweUncapped[partia] = wynikLosowyUncapped;\n        }\n        glosyWOkreguLosoweUncapped = $9bc43309e06c2764$export$51a1424039638d72(glosyWOkreguLosoweUncapped);\n        let glosyWOkreguLosoweCapped = {};\n        for (const [partia, procent] of Object.entries(glosyWOkreguLosoweUncapped)){\n            // Musimy używać tego samego odchylenia w każdej symulacji do cappowania\n            const procentOczekiwany = procentyWOkreguSrednia[partia];\n            const stddev = odchylenieWOkregu[partia];\n            const wynikLosowyCapped = bucketFn(Math.max(Math.min(procent, procentOczekiwany + stddev * $9bc43309e06c2764$var$ZAKRES_GORA), Math.max(procentOczekiwany - stddev * $9bc43309e06c2764$var$ZAKRES_DOL, 0)), 5);\n            glosyWOkreguLosoweCapped[partia] = wynikLosowyCapped;\n        }\n        // Podział mandatów\n        const mandatyWOkregu = $9bc43309e06c2764$export$d6b31143b10bb361(glosyWOkreguLosoweUncapped, okreg);\n        // info dla wykresów\n        minimumMandatow.KO > (mandatyWOkregu.KO || 0) && (minimumMandatow.KO = mandatyWOkregu.KO || 0);\n        minimumMandatow.LEWICA > (mandatyWOkregu.LEWICA || 0) && (minimumMandatow.LEWICA = mandatyWOkregu.LEWICA || 0);\n        minimumMandatow.TD > (mandatyWOkregu.TD || 0) && (minimumMandatow.TD = mandatyWOkregu.TD || 0);\n        const str = (0, $9HmlY.sortedStringify)($9bc43309e06c2764$export$c7f05eb85d8ce4ff(mandatyWOkregu));\n        const strDemo = (0, $9HmlY.sortedStringify)($9bc43309e06c2764$export$249f49cfde10ec4a(mandatyWOkregu));\n        rozklad[str] ? rozklad[str]++ : rozklad[str] = 1;\n        rozkladDemo[strDemo] ? rozkladDemo[strDemo]++ : rozkladDemo[strDemo] = 1;\n        // Zapisanie mandatów w histogramie\n        for (const [partia, procent] of Object.entries(glosyWOkreguLosoweCapped)){\n            if (!histogram[partia]) histogram[partia] = {};\n            if (!histogram[partia][String(procent)]) histogram[partia][String(procent)] = {};\n            // Dodajemy czestosc dla danej ilości mandatów dla danego procentu ze wszystkich symulacji.\n            const mandaty = String(mandatyWOkregu[partia] || 0);\n            histogram[partia][String(procent)][mandaty] ? histogram[partia][String(procent)][mandaty] += 1 : histogram[partia][String(procent)][mandaty] = 1;\n        }\n        // Liczenie sytuacji zagrożenia/szansy\n        if (mandatyWOkregu.KO_zagrozenie) zagrozoneMandaty.KO++;\n        if (mandatyWOkregu.TD_zagrozenie) zagrozoneMandaty.TD++;\n        if (mandatyWOkregu.LEWICA_zagrozenie) zagrozoneMandaty.LEWICA++;\n        if (mandatyWOkregu.KO_szansa) potencjalneMandaty.KO++;\n        if (mandatyWOkregu.TD_szansa) potencjalneMandaty.TD++;\n        if (mandatyWOkregu.LEWICA_szansa) potencjalneMandaty.LEWICA++;\n        if (mandatyWOkregu.KO_dawca) dawcyGlosow.KO++;\n        if (mandatyWOkregu.TD_dawca) dawcyGlosow.TD++;\n        if (mandatyWOkregu.LEWICA_dawca) dawcyGlosow.LEWICA++;\n        if (mandatyWOkregu.KO_ostatnie) ostatnieMandaty.KO++;\n        if (mandatyWOkregu.TD_ostatnie) ostatnieMandaty.TD++;\n        if (mandatyWOkregu.LEWICA_ostatnie) ostatnieMandaty.LEWICA++;\n    } // end of ILE_SYMULACJI loop\n    const wykresRozkladu = {};\n    (0, $9HmlY.sortObjectByValues)(rozklad).slice(0, 12).forEach(({ key: key, value: value })=>{\n        wykresRozkladu[$9bc43309e06c2764$var$czestoscNaProcentSymulacji(value)] = JSON.parse(key);\n    });\n    const wykresRozkladuDemo = {};\n    (0, $9HmlY.sortObjectByValues)(rozkladDemo).slice(0, 3).forEach(({ key: key, value: value })=>{\n        wykresRozkladuDemo[$9bc43309e06c2764$var$czestoscNaProcentSymulacji(value)] = JSON.parse(key);\n    });\n    return {\n        procentyWOkreguSrednia: procentyWOkreguSrednia,\n        odchylenieWOkregu: odchylenieWOkregu,\n        wykresRozkladu: wykresRozkladu,\n        wykresRozkladuDemo: wykresRozkladuDemo,\n        histogram: histogram,\n        // W Warszawie mamy b. szeroki zakres możliwości, szczególnie dla KO i Lewicy, podbijamy więc tam minimalne mandaty, żeby wykres wyglądał lepiej\n        minimumMandatow: {\n            ...minimumMandatow,\n            KO: okreg.nr === 19 ? 8 : minimumMandatow.KO,\n            LEWICA: okreg.nr === 19 ? 2 : minimumMandatow.LEWICA\n        },\n        zagrozoneMandaty: zagrozoneMandaty,\n        potencjalneMandaty: potencjalneMandaty,\n        ostatnieMandaty: ostatnieMandaty,\n        dawcyGlosow: dawcyGlosow\n    };\n}\n\n});\nparcelRequire.register(\"cWeek\", function(module, exports) {\n\n$parcel$export(module.exports, \"ILE_SYMULACJI\", () => $565b4f3f01e0b40a$export$f88c97427ae2a295);\nconst $565b4f3f01e0b40a$export$f88c97427ae2a295 = 1;\n\n});\n\nparcelRequire.register(\"iXaHu\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $dcc60992372e5fa5$export$2e2bcd8739ae039);\n\nvar $ftPHE = parcelRequire(\"ftPHE\");\nfunction $dcc60992372e5fa5$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, $dcc60992372e5fa5$var$_toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction $dcc60992372e5fa5$var$_createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) $dcc60992372e5fa5$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $dcc60992372e5fa5$var$_defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction $dcc60992372e5fa5$var$_inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    $dcc60992372e5fa5$var$_setPrototypeOf(subClass, superClass);\n}\nfunction $dcc60992372e5fa5$var$_setPrototypeOf(o, p) {\n    $dcc60992372e5fa5$var$_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return $dcc60992372e5fa5$var$_setPrototypeOf(o, p);\n}\nfunction $dcc60992372e5fa5$var$_toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction $dcc60992372e5fa5$var$_toPropertyKey(arg) {\n    var key = $dcc60992372e5fa5$var$_toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nvar $dcc60992372e5fa5$export$7492a095b4ff4e68 = /*#__PURE__*/ function() {\n    function RNG() {}\n    var _proto = RNG.prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _proto._seed = function _seed(seed, _opts) {\n        // TODO: add entropy and stuff\n        if (seed === (seed || 0)) return seed;\n        else {\n            var strSeed = \"\" + seed;\n            var s = 0;\n            for(var k = 0; k < strSeed.length; ++k)s ^= strSeed.charCodeAt(k) | 0;\n            return s;\n        }\n    };\n    return RNG;\n}();\nvar $dcc60992372e5fa5$var$RNGFunction = /*#__PURE__*/ function(_RNG) {\n    $dcc60992372e5fa5$var$_inheritsLoose(RNGFunction, _RNG);\n    function RNGFunction(thunk, opts) {\n        var _this;\n        _this = _RNG.call(this) || this;\n        _this._rng = void 0;\n        _this.seed(thunk, opts);\n        return _this;\n    }\n    var _proto = RNGFunction.prototype;\n    _proto.next = function next() {\n        return this._rng();\n    };\n    _proto.seed = function seed(thunk, _opts) {\n        this._rng = thunk;\n    };\n    _proto.clone = function clone(_, opts) {\n        return new RNGFunction(this._rng, opts);\n    };\n    $dcc60992372e5fa5$var$_createClass(RNGFunction, [\n        {\n            key: \"name\",\n            get: function get() {\n                return \"function\";\n            }\n        }\n    ]);\n    return RNGFunction;\n}($dcc60992372e5fa5$export$7492a095b4ff4e68);\n/**\r\n * Construct an RNG with variable inputs. Used in calls to Random constructor\r\n * @param {...*} args - Distribution-specific arguments\r\n * @return RNG\r\n *\r\n * @example\r\n * new Random(RNGFactory(...args))\r\n */ var $dcc60992372e5fa5$export$e6cb7150fd4ac6e7 = function() {\n    var args = [].slice.call(arguments);\n    var _args = args, _args$ = _args[0], arg0 = _args$ === void 0 ? \"default\" : _args$;\n    switch(typeof arg0){\n        case \"object\":\n            if (arg0 instanceof $dcc60992372e5fa5$export$7492a095b4ff4e68) return arg0;\n            break;\n        case \"function\":\n            return new $dcc60992372e5fa5$var$RNGFunction(arg0);\n        case \"number\":\n        case \"string\":\n        default:\n            return new $dcc60992372e5fa5$var$RNGFunction((0, (/*@__PURE__*/$parcel$interopDefault($ftPHE))).apply(void 0, args));\n    }\n    throw new Error('invalid RNG \"' + arg0 + '\"');\n};\nvar $dcc60992372e5fa5$var$uniform = function(random, min, max) {\n    if (min === void 0) min = 0;\n    if (max === void 0) max = 1;\n    return function() {\n        return random.next() * (max - min) + min;\n    };\n};\nfunction $dcc60992372e5fa5$var$numberValidator(num) {\n    return new $dcc60992372e5fa5$var$NumberValidator(num);\n}\nvar $dcc60992372e5fa5$var$NumberValidator = function NumberValidator(num) {\n    var _this = this;\n    this.n = void 0;\n    this.isInt = function() {\n        if (Number.isInteger(_this.n)) return _this;\n        throw new Error(\"Expected number to be an integer, got \" + _this.n);\n    };\n    this.isPositive = function() {\n        if (_this.n > 0) return _this;\n        throw new Error(\"Expected number to be positive, got \" + _this.n);\n    };\n    this.lessThan = function(v) {\n        if (_this.n < v) return _this;\n        throw new Error(\"Expected number to be less than \" + v + \", got \" + _this.n);\n    };\n    this.greaterThanOrEqual = function(v) {\n        if (_this.n >= v) return _this;\n        throw new Error(\"Expected number to be greater than or equal to \" + v + \", got \" + _this.n);\n    };\n    this.greaterThan = function(v) {\n        if (_this.n > v) return _this;\n        throw new Error(\"Expected number to be greater than \" + v + \", got \" + _this.n);\n    };\n    this.n = num;\n};\nvar $dcc60992372e5fa5$var$uniformInt = function(random, min, max) {\n    if (min === void 0) min = 0;\n    if (max === void 0) max = 1;\n    if (max === undefined) {\n        max = min === undefined ? 1 : min;\n        min = 0;\n    }\n    $dcc60992372e5fa5$var$numberValidator(min).isInt();\n    $dcc60992372e5fa5$var$numberValidator(max).isInt();\n    return function() {\n        return Math.floor(random.next() * (max - min + 1) + min);\n    };\n};\nvar $dcc60992372e5fa5$var$uniformBoolean = function(random) {\n    return function() {\n        return random.next() >= 0.5;\n    };\n};\nvar $dcc60992372e5fa5$var$normal = function(random, mu, sigma) {\n    if (mu === void 0) mu = 0;\n    if (sigma === void 0) sigma = 1;\n    return function() {\n        var x, y, r;\n        do {\n            x = random.next() * 2 - 1;\n            y = random.next() * 2 - 1;\n            r = x * x + y * y;\n        }while (!r || r > 1);\n        return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\n    };\n};\nvar $dcc60992372e5fa5$var$logNormal = function(random, mu, sigma) {\n    if (mu === void 0) mu = 0;\n    if (sigma === void 0) sigma = 1;\n    var normal = random.normal(mu, sigma);\n    return function() {\n        return Math.exp(normal());\n    };\n};\nvar $dcc60992372e5fa5$var$bernoulli = function(random, p) {\n    if (p === void 0) p = 0.5;\n    $dcc60992372e5fa5$var$numberValidator(p).greaterThanOrEqual(0).lessThan(1);\n    return function() {\n        return Math.floor(random.next() + p);\n    };\n};\nvar $dcc60992372e5fa5$var$binomial = function(random, n, p) {\n    if (n === void 0) n = 1;\n    if (p === void 0) p = 0.5;\n    $dcc60992372e5fa5$var$numberValidator(n).isInt().isPositive();\n    $dcc60992372e5fa5$var$numberValidator(p).greaterThanOrEqual(0).lessThan(1);\n    return function() {\n        var i = 0;\n        var x = 0;\n        while(i++ < n)if (random.next() < p) x++;\n        return x;\n    };\n};\nvar $dcc60992372e5fa5$var$geometric = function(random, p) {\n    if (p === void 0) p = 0.5;\n    $dcc60992372e5fa5$var$numberValidator(p).greaterThan(0).lessThan(1);\n    var invLogP = 1.0 / Math.log(1.0 - p);\n    return function() {\n        return Math.floor(1 + Math.log(random.next()) * invLogP);\n    };\n};\nvar $dcc60992372e5fa5$var$logFactorialTable = [\n    0.0,\n    0.0,\n    0.69314718055994529,\n    1.791759469228055,\n    3.1780538303479458,\n    4.7874917427820458,\n    6.5792512120101012,\n    8.5251613610654147,\n    10.604602902745251,\n    12.801827480081469\n];\nvar $dcc60992372e5fa5$var$logFactorial = function logFactorial(k) {\n    return $dcc60992372e5fa5$var$logFactorialTable[k];\n};\nvar $dcc60992372e5fa5$var$logSqrt2PI = 0.91893853320467267;\nvar $dcc60992372e5fa5$var$poisson = function(random, lambda) {\n    if (lambda === void 0) lambda = 1;\n    $dcc60992372e5fa5$var$numberValidator(lambda).isPositive();\n    if (lambda < 10) {\n        // inversion method\n        var expMean = Math.exp(-lambda);\n        return function() {\n            var p = expMean;\n            var x = 0;\n            var u = random.next();\n            while(u > p){\n                u = u - p;\n                p = lambda * p / ++x;\n            }\n            return x;\n        };\n    } else {\n        // generative method\n        var smu = Math.sqrt(lambda);\n        var b = 0.931 + 2.53 * smu;\n        var a = -0.059 + 0.02483 * b;\n        var invAlpha = 1.1239 + 1.1328 / (b - 3.4);\n        var vR = 0.9277 - 3.6224 / (b - 2);\n        return function() {\n            while(true){\n                var u = void 0;\n                var v = random.next();\n                if (v <= 0.86 * vR) {\n                    u = v / vR - 0.43;\n                    return Math.floor((2 * a / (0.5 - Math.abs(u)) + b) * u + lambda + 0.445);\n                }\n                if (v >= vR) u = random.next() - 0.5;\n                else {\n                    u = v / vR - 0.93;\n                    u = (u < 0 ? -0.5 : 0.5) - u;\n                    v = random.next() * vR;\n                }\n                var us = 0.5 - Math.abs(u);\n                if (us < 0.013 && v > us) continue;\n                var k = Math.floor((2 * a / us + b) * u + lambda + 0.445);\n                v = v * invAlpha / (a / (us * us) + b);\n                if (k >= 10) {\n                    var t = (k + 0.5) * Math.log(lambda / k) - lambda - $dcc60992372e5fa5$var$logSqrt2PI + k - (1 / 12.0 - (1 / 360.0 - 1 / (1260.0 * k * k)) / (k * k)) / k;\n                    if (Math.log(v * smu) <= t) return k;\n                } else if (k >= 0) {\n                    var _logFactorial;\n                    var f = (_logFactorial = $dcc60992372e5fa5$var$logFactorial(k)) != null ? _logFactorial : 0;\n                    if (Math.log(v) <= k * Math.log(lambda) - lambda - f) return k;\n                }\n            }\n        };\n    }\n};\nvar $dcc60992372e5fa5$var$exponential = function(random, lambda) {\n    if (lambda === void 0) lambda = 1;\n    $dcc60992372e5fa5$var$numberValidator(lambda).isPositive();\n    return function() {\n        return -Math.log(1 - random.next()) / lambda;\n    };\n};\nvar $dcc60992372e5fa5$var$irwinHall = function(random, n) {\n    if (n === void 0) n = 1;\n    $dcc60992372e5fa5$var$numberValidator(n).isInt().greaterThanOrEqual(0);\n    return function() {\n        var sum = 0;\n        for(var i = 0; i < n; ++i)sum += random.next();\n        return sum;\n    };\n};\nvar $dcc60992372e5fa5$var$bates = function(random, n) {\n    if (n === void 0) n = 1;\n    $dcc60992372e5fa5$var$numberValidator(n).isInt().isPositive();\n    var irwinHall = random.irwinHall(n);\n    return function() {\n        return irwinHall() / n;\n    };\n};\nvar $dcc60992372e5fa5$var$pareto = function(random, alpha) {\n    if (alpha === void 0) alpha = 1;\n    $dcc60992372e5fa5$var$numberValidator(alpha).greaterThanOrEqual(0);\n    var invAlpha = 1.0 / alpha;\n    return function() {\n        return 1.0 / Math.pow(1.0 - random.next(), invAlpha);\n    };\n};\nvar $dcc60992372e5fa5$var$RNGMathRandom = /*#__PURE__*/ function(_RNG) {\n    $dcc60992372e5fa5$var$_inheritsLoose(RNGMathRandom, _RNG);\n    function RNGMathRandom() {\n        return _RNG.apply(this, arguments) || this;\n    }\n    var _proto = RNGMathRandom.prototype;\n    _proto.next = function next() {\n        return Math.random();\n    };\n    _proto.seed = function seed(_seed, _opts) {\n    // intentionally empty\n    };\n    _proto.clone = function clone() {\n        return new RNGMathRandom();\n    };\n    $dcc60992372e5fa5$var$_createClass(RNGMathRandom, [\n        {\n            key: \"name\",\n            get: function get() {\n                return \"default\";\n            }\n        }\n    ]);\n    return RNGMathRandom;\n}($dcc60992372e5fa5$export$7492a095b4ff4e68);\n/**\r\n * Seedable random number generator supporting many common distributions.\r\n *\r\n * Defaults to Math.random as its underlying pseudorandom number generator.\r\n *\r\n * @name Random\r\n * @class\r\n *\r\n * @param {RNG|function} [rng=Math.random] - Underlying pseudorandom number generator.\r\n */ var $dcc60992372e5fa5$export$a92776769f460054 = /*#__PURE__*/ function() {\n    function Random(rng) {\n        var _this = this;\n        this._rng = void 0;\n        this._patch = void 0;\n        this._cache = {};\n        this.next = function() {\n            return _this._rng.next();\n        };\n        this[\"float\"] = function(min, max) {\n            return _this.uniform(min, max)();\n        };\n        this[\"int\"] = function(min, max) {\n            return _this.uniformInt(min, max)();\n        };\n        this.integer = function(min, max) {\n            return _this.uniformInt(min, max)();\n        };\n        this.bool = function() {\n            return _this.uniformBoolean()();\n        };\n        this[\"boolean\"] = function() {\n            return _this.uniformBoolean()();\n        };\n        this.uniform = function(min, max) {\n            return _this._memoize(\"uniform\", $dcc60992372e5fa5$var$uniform, min, max);\n        };\n        this.uniformInt = function(min, max) {\n            return _this._memoize(\"uniformInt\", $dcc60992372e5fa5$var$uniformInt, min, max);\n        };\n        this.uniformBoolean = function() {\n            return _this._memoize(\"uniformBoolean\", $dcc60992372e5fa5$var$uniformBoolean);\n        };\n        this.normal = function(mu, sigma) {\n            return $dcc60992372e5fa5$var$normal(_this, mu, sigma);\n        };\n        this.logNormal = function(mu, sigma) {\n            return $dcc60992372e5fa5$var$logNormal(_this, mu, sigma);\n        };\n        this.bernoulli = function(p) {\n            return $dcc60992372e5fa5$var$bernoulli(_this, p);\n        };\n        this.binomial = function(n, p) {\n            return $dcc60992372e5fa5$var$binomial(_this, n, p);\n        };\n        this.geometric = function(p) {\n            return $dcc60992372e5fa5$var$geometric(_this, p);\n        };\n        this.poisson = function(lambda) {\n            return $dcc60992372e5fa5$var$poisson(_this, lambda);\n        };\n        this.exponential = function(lambda) {\n            return $dcc60992372e5fa5$var$exponential(_this, lambda);\n        };\n        this.irwinHall = function(n) {\n            return $dcc60992372e5fa5$var$irwinHall(_this, n);\n        };\n        this.bates = function(n) {\n            return $dcc60992372e5fa5$var$bates(_this, n);\n        };\n        this.pareto = function(alpha) {\n            return $dcc60992372e5fa5$var$pareto(_this, alpha);\n        };\n        if (rng && rng instanceof $dcc60992372e5fa5$export$7492a095b4ff4e68) this.use(rng);\n        else this.use(new $dcc60992372e5fa5$var$RNGMathRandom());\n        this._cache = {};\n    }\n    /**\r\n   * @member {RNG} Underlying pseudo-random number generator\r\n   */ var _proto = Random.prototype;\n    /**\r\n   * Creates a new `Random` instance, optionally specifying parameters to\r\n   * set a new seed.\r\n   *\r\n   * @see RNG.clone\r\n   *\r\n   * @param {string} [seed] - Optional seed for new RNG.\r\n   * @param {object} [opts] - Optional config for new RNG options.\r\n   * @return {Random}\r\n   */ _proto.clone = function clone() {\n        var args = [].slice.call(arguments);\n        if (args.length) return new Random($dcc60992372e5fa5$export$e6cb7150fd4ac6e7.apply(void 0, args));\n        else return new Random(this.rng.clone());\n    } /**\r\n   * Sets the underlying pseudorandom number generator used via\r\n   * either an instance of `seedrandom`, a custom instance of RNG\r\n   * (for PRNG plugins), or a string specifying the PRNG to use\r\n   * along with an optional `seed` and `opts` to initialize the\r\n   * RNG.\r\n   *\r\n   * @example\r\n   * import random from 'random'\r\n   *\r\n   * random.use('example_seedrandom_string')\r\n   * // or\r\n   * random.use(seedrandom('kittens'))\r\n   * // or\r\n   * random.use(Math.random)\r\n   *\r\n   * @param {...*} args\r\n   */ ;\n    _proto.use = function use() {\n        this._rng = $dcc60992372e5fa5$export$e6cb7150fd4ac6e7.apply(void 0, [].slice.call(arguments));\n    } /**\r\n   * Patches `Math.random` with this Random instance's PRNG.\r\n   */ ;\n    _proto.patch = function patch() {\n        if (this._patch) throw new Error(\"Math.random already patched\");\n        this._patch = Math.random;\n        Math.random = this.uniform();\n    } /**\r\n   * Restores a previously patched `Math.random` to its original value.\r\n   */ ;\n    _proto.unpatch = function unpatch() {\n        if (this._patch) {\n            Math.random = this._patch;\n            delete this._patch;\n        }\n    } /**\r\n   * Convenience wrapper around `this.rng.next()`\r\n   *\r\n   * Returns a floating point number in [0, 1).\r\n   *\r\n   * @return {number}\r\n   */ ;\n    /**\r\n   * Returns an item chosen uniformly at trandom from the given array.\r\n   *\r\n   * Convence wrapper around `random.uniformInt()`\r\n   *\r\n   * @param {Array<T>} [array] - Lower bound (integer, inclusive)\r\n   * @return {T | undefined}\r\n   */ _proto.choice = function choice(array) {\n        if (!Array.isArray(array)) throw new Error(\"Random.choice expected input to be an array, got \" + typeof array);\n        var length = array == null ? void 0 : array.length;\n        if (length > 0) {\n            var index = this.uniformInt(0, length - 1)();\n            return array[index];\n        } else return undefined;\n    } /**\r\n   * Generates a [Continuous uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)).\r\n   *\r\n   * @param {number} [min=0] - Lower bound (float, inclusive)\r\n   * @param {number} [max=1] - Upper bound (float, exclusive)\r\n   * @return {function}\r\n   */ ;\n    // --------------------------------------------------------------------------\n    // Internal\n    // --------------------------------------------------------------------------\n    /**\r\n   * Memoizes distributions to ensure they're only created when necessary.\r\n   *\r\n   * Returns a thunk which that returns independent, identically distributed\r\n   * samples from the specified distribution.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {string} label - Name of distribution\r\n   * @param {function} getter - Function which generates a new distribution\r\n   * @param {...*} args - Distribution-specific arguments\r\n   *\r\n   * @return {function}\r\n   */ _proto._memoize = function _memoize(label, getter) {\n        var args = [].slice.call(arguments, 2);\n        var key = \"\" + args.join(\";\");\n        var value = this._cache[label];\n        if (value === undefined || value.key !== key) {\n            value = {\n                key: key,\n                distribution: getter.apply(void 0, [\n                    this\n                ].concat(args))\n            };\n            this._cache[label] = value;\n        }\n        return value.distribution;\n    };\n    $dcc60992372e5fa5$var$_createClass(Random, [\n        {\n            key: \"rng\",\n            get: function get() {\n                return this._rng;\n            }\n        }\n    ]);\n    return Random;\n}();\n// defaults to Math.random as its RNG\nvar $dcc60992372e5fa5$export$2e2bcd8739ae039 = new $dcc60992372e5fa5$export$a92776769f460054();\n\n});\nparcelRequire.register(\"ftPHE\", function(module, exports) {\n// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\n\nvar $1NWL6 = parcelRequire(\"1NWL6\");\n\nvar $8FlDu = parcelRequire(\"8FlDu\");\n\nvar $1rFi6 = parcelRequire(\"1rFi6\");\n\nvar $iDdZD = parcelRequire(\"iDdZD\");\n\nvar $bDA0X = parcelRequire(\"bDA0X\");\n\nvar $oBon1 = parcelRequire(\"oBon1\");\n\nvar $layLz = parcelRequire(\"layLz\");\n$layLz.alea = $1NWL6;\n$layLz.xor128 = $8FlDu;\n$layLz.xorwow = $1rFi6;\n$layLz.xorshift7 = $iDdZD;\n$layLz.xor4096 = $bDA0X;\n$layLz.tychei = $oBon1;\nmodule.exports = $layLz;\n\n});\nparcelRequire.register(\"1NWL6\", function(module, exports) {\n// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n(function(global, module1, define1) {\n    function Alea(seed) {\n        var me = this, mash = Mash();\n        me.next = function() {\n            var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n            me.s0 = me.s1;\n            me.s1 = me.s2;\n            return me.s2 = t - (me.c = t | 0);\n        };\n        // Apply the seeding algorithm from Baagoe.\n        me.c = 1;\n        me.s0 = mash(\" \");\n        me.s1 = mash(\" \");\n        me.s2 = mash(\" \");\n        me.s0 -= mash(seed);\n        if (me.s0 < 0) me.s0 += 1;\n        me.s1 -= mash(seed);\n        if (me.s1 < 0) me.s1 += 1;\n        me.s2 -= mash(seed);\n        if (me.s2 < 0) me.s2 += 1;\n        mash = null;\n    }\n    function copy(f, t) {\n        t.c = f.c;\n        t.s0 = f.s0;\n        t.s1 = f.s1;\n        t.s2 = f.s2;\n        return t;\n    }\n    function impl(seed, opts) {\n        var xg = new Alea(seed), state = opts && opts.state, prng = xg.next;\n        prng.int32 = function() {\n            return xg.next() * 0x100000000 | 0;\n        };\n        prng.double = function() {\n            return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n        };\n        prng.quick = prng;\n        if (state) {\n            if (typeof state == \"object\") copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    function Mash() {\n        var n = 0xefc8249d;\n        var mash = function(data) {\n            data = String(data);\n            for(var i = 0; i < data.length; i++){\n                n += data.charCodeAt(i);\n                var h = 0.02519603282416938 * n;\n                n = h >>> 0;\n                h -= n;\n                h *= n;\n                n = h >>> 0;\n                h -= n;\n                n += h * 0x100000000; // 2^32\n            }\n            return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n        };\n        return mash;\n    }\n    if (module1 && module1.exports) module1.exports = impl;\n    else if (define1 && define1.amd) define1(function() {\n        return impl;\n    });\n    else this.alea = impl;\n})(this, module, typeof define == \"function\" && define // present with an AMD loader\n);\n\n});\n\nparcelRequire.register(\"8FlDu\", function(module, exports) {\n// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n(function(global, module1, define1) {\n    function XorGen(seed) {\n        var me = this, strseed = \"\";\n        me.x = 0;\n        me.y = 0;\n        me.z = 0;\n        me.w = 0;\n        // Set up generator function.\n        me.next = function() {\n            var t = me.x ^ me.x << 11;\n            me.x = me.y;\n            me.y = me.z;\n            me.z = me.w;\n            return me.w ^= me.w >>> 19 ^ t ^ t >>> 8;\n        };\n        if (seed === (seed | 0)) // Integer seed.\n        me.x = seed;\n        else // String seed.\n        strseed += seed;\n        // Mix in string seed, then discard an initial batch of 64 values.\n        for(var k = 0; k < strseed.length + 64; k++){\n            me.x ^= strseed.charCodeAt(k) | 0;\n            me.next();\n        }\n    }\n    function copy(f, t) {\n        t.x = f.x;\n        t.y = f.y;\n        t.z = f.z;\n        t.w = f.w;\n        return t;\n    }\n    function impl(seed, opts) {\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n            return (xg.next() >>> 0) / 0x100000000;\n        };\n        prng.double = function() {\n            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;\n            while (result === 0);\n            return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n            if (typeof state == \"object\") copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    if (module1 && module1.exports) module1.exports = impl;\n    else if (define1 && define1.amd) define1(function() {\n        return impl;\n    });\n    else this.xor128 = impl;\n})(this, module, typeof define == \"function\" && define // present with an AMD loader\n);\n\n});\n\nparcelRequire.register(\"1rFi6\", function(module, exports) {\n// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n(function(global, module1, define1) {\n    function XorGen(seed) {\n        var me = this, strseed = \"\";\n        // Set up generator function.\n        me.next = function() {\n            var t = me.x ^ me.x >>> 2;\n            me.x = me.y;\n            me.y = me.z;\n            me.z = me.w;\n            me.w = me.v;\n            return (me.d = me.d + 362437 | 0) + (me.v = me.v ^ me.v << 4 ^ (t ^ t << 1)) | 0;\n        };\n        me.x = 0;\n        me.y = 0;\n        me.z = 0;\n        me.w = 0;\n        me.v = 0;\n        if (seed === (seed | 0)) // Integer seed.\n        me.x = seed;\n        else // String seed.\n        strseed += seed;\n        // Mix in string seed, then discard an initial batch of 64 values.\n        for(var k = 0; k < strseed.length + 64; k++){\n            me.x ^= strseed.charCodeAt(k) | 0;\n            if (k == strseed.length) me.d = me.x << 10 ^ me.x >>> 4;\n            me.next();\n        }\n    }\n    function copy(f, t) {\n        t.x = f.x;\n        t.y = f.y;\n        t.z = f.z;\n        t.w = f.w;\n        t.v = f.v;\n        t.d = f.d;\n        return t;\n    }\n    function impl(seed, opts) {\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n            return (xg.next() >>> 0) / 0x100000000;\n        };\n        prng.double = function() {\n            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;\n            while (result === 0);\n            return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n            if (typeof state == \"object\") copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    if (module1 && module1.exports) module1.exports = impl;\n    else if (define1 && define1.amd) define1(function() {\n        return impl;\n    });\n    else this.xorwow = impl;\n})(this, module, typeof define == \"function\" && define // present with an AMD loader\n);\n\n});\n\nparcelRequire.register(\"iDdZD\", function(module, exports) {\n// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n(function(global, module1, define1) {\n    function XorGen(seed) {\n        var me = this;\n        // Set up generator function.\n        me.next = function() {\n            // Update xor generator.\n            var X = me.x, i = me.i, t, v, w;\n            t = X[i];\n            t ^= t >>> 7;\n            v = t ^ t << 24;\n            t = X[i + 1 & 7];\n            v ^= t ^ t >>> 10;\n            t = X[i + 3 & 7];\n            v ^= t ^ t >>> 3;\n            t = X[i + 4 & 7];\n            v ^= t ^ t << 7;\n            t = X[i + 7 & 7];\n            t = t ^ t << 13;\n            v ^= t ^ t << 9;\n            X[i] = v;\n            me.i = i + 1 & 7;\n            return v;\n        };\n        function init(me, seed) {\n            var j, w, X = [];\n            if (seed === (seed | 0)) // Seed state array using a 32-bit integer.\n            w = X[0] = seed;\n            else {\n                // Seed state using a string.\n                seed = \"\" + seed;\n                for(j = 0; j < seed.length; ++j)X[j & 7] = X[j & 7] << 15 ^ seed.charCodeAt(j) + X[j + 1 & 7] << 13;\n            }\n            // Enforce an array length of 8, not all zeroes.\n            while(X.length < 8)X.push(0);\n            for(j = 0; j < 8 && X[j] === 0; ++j);\n            if (j == 8) w = X[7] = -1;\n            else w = X[j];\n            me.x = X;\n            me.i = 0;\n            // Discard an initial 256 values.\n            for(j = 256; j > 0; --j)me.next();\n        }\n        init(me, seed);\n    }\n    function copy(f, t) {\n        t.x = f.x.slice();\n        t.i = f.i;\n        return t;\n    }\n    function impl(seed, opts) {\n        if (seed == null) seed = +new Date;\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n            return (xg.next() >>> 0) / 0x100000000;\n        };\n        prng.double = function() {\n            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;\n            while (result === 0);\n            return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n            if (state.x) copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    if (module1 && module1.exports) module1.exports = impl;\n    else if (define1 && define1.amd) define1(function() {\n        return impl;\n    });\n    else this.xorshift7 = impl;\n})(this, module, typeof define == \"function\" && define // present with an AMD loader\n);\n\n});\n\nparcelRequire.register(\"bDA0X\", function(module, exports) {\n// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n(function(global, module1, define1) {\n    function XorGen(seed) {\n        var me = this;\n        // Set up generator function.\n        me.next = function() {\n            var w = me.w, X = me.X, i = me.i, t, v;\n            // Update Weyl generator.\n            me.w = w = w + 0x61c88647 | 0;\n            // Update xor generator.\n            v = X[i + 34 & 127];\n            t = X[i = i + 1 & 127];\n            v ^= v << 13;\n            t ^= t << 17;\n            v ^= v >>> 15;\n            t ^= t >>> 12;\n            // Update Xor generator array state.\n            v = X[i] = v ^ t;\n            me.i = i;\n            // Result is the combination.\n            return v + (w ^ w >>> 16) | 0;\n        };\n        function init(me, seed) {\n            var t, v, i, j, w, X = [], limit = 128;\n            if (seed === (seed | 0)) {\n                // Numeric seeds initialize v, which is used to generates X.\n                v = seed;\n                seed = null;\n            } else {\n                // String seeds are mixed into v and X one character at a time.\n                seed = seed + \"\\x00\";\n                v = 0;\n                limit = Math.max(limit, seed.length);\n            }\n            // Initialize circular array and weyl value.\n            for(i = 0, j = -32; j < limit; ++j){\n                // Put the unicode characters into the array, and shuffle them.\n                if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n                // After 32 shuffles, take v as the starting w value.\n                if (j === 0) w = v;\n                v ^= v << 10;\n                v ^= v >>> 15;\n                v ^= v << 4;\n                v ^= v >>> 13;\n                if (j >= 0) {\n                    w = w + 0x61c88647 | 0; // Weyl.\n                    t = X[j & 127] ^= v + w; // Combine xor and weyl to init array.\n                    i = 0 == t ? i + 1 : 0; // Count zeroes.\n                }\n            }\n            // We have detected all zeroes; make the key nonzero.\n            if (i >= 128) X[(seed && seed.length || 0) & 127] = -1;\n            // Run the generator 512 times to further mix the state before using it.\n            // Factoring this as a function slows the main generator, so it is just\n            // unrolled here.  The weyl generator is not advanced while warming up.\n            i = 127;\n            for(j = 512; j > 0; --j){\n                v = X[i + 34 & 127];\n                t = X[i = i + 1 & 127];\n                v ^= v << 13;\n                t ^= t << 17;\n                v ^= v >>> 15;\n                t ^= t >>> 12;\n                X[i] = v ^ t;\n            }\n            // Storing state as object members is faster than using closure variables.\n            me.w = w;\n            me.X = X;\n            me.i = i;\n        }\n        init(me, seed);\n    }\n    function copy(f, t) {\n        t.i = f.i;\n        t.w = f.w;\n        t.X = f.X.slice();\n        return t;\n    }\n    function impl(seed, opts) {\n        if (seed == null) seed = +new Date;\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n            return (xg.next() >>> 0) / 0x100000000;\n        };\n        prng.double = function() {\n            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;\n            while (result === 0);\n            return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n            if (state.X) copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    if (module1 && module1.exports) module1.exports = impl;\n    else if (define1 && define1.amd) define1(function() {\n        return impl;\n    });\n    else this.xor4096 = impl;\n})(this, module, typeof define == \"function\" && define // present with an AMD loader\n);\n\n});\n\nparcelRequire.register(\"oBon1\", function(module, exports) {\n// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n(function(global, module1, define1) {\n    function XorGen(seed) {\n        var me = this, strseed = \"\";\n        // Set up generator function.\n        me.next = function() {\n            var b = me.b, c = me.c, d = me.d, a = me.a;\n            b = b << 25 ^ b >>> 7 ^ c;\n            c = c - d | 0;\n            d = d << 24 ^ d >>> 8 ^ a;\n            a = a - b | 0;\n            me.b = b = b << 20 ^ b >>> 12 ^ c;\n            me.c = c = c - d | 0;\n            me.d = d << 16 ^ c >>> 16 ^ a;\n            return me.a = a - b | 0;\n        };\n        /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */ me.a = 0;\n        me.b = 0;\n        me.c = -1640531527;\n        me.d = 1367130551;\n        if (seed === Math.floor(seed)) {\n            // Integer seed.\n            me.a = seed / 0x100000000 | 0;\n            me.b = seed | 0;\n        } else // String seed.\n        strseed += seed;\n        // Mix in string seed, then discard an initial batch of 64 values.\n        for(var k = 0; k < strseed.length + 20; k++){\n            me.b ^= strseed.charCodeAt(k) | 0;\n            me.next();\n        }\n    }\n    function copy(f, t) {\n        t.a = f.a;\n        t.b = f.b;\n        t.c = f.c;\n        t.d = f.d;\n        return t;\n    }\n    function impl(seed, opts) {\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n            return (xg.next() >>> 0) / 0x100000000;\n        };\n        prng.double = function() {\n            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;\n            while (result === 0);\n            return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n            if (typeof state == \"object\") copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    if (module1 && module1.exports) module1.exports = impl;\n    else if (define1 && define1.amd) define1(function() {\n        return impl;\n    });\n    else this.tychei = impl;\n})(this, module, typeof define == \"function\" && define // present with an AMD loader\n);\n\n});\n\nparcelRequire.register(\"layLz\", function(module, exports) {\n\n/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/ (function(global, pool, math) {\n    //\n    // The following constants are related to IEEE 754 limits.\n    //\n    var width = 256, chunks = 6, digits = 52, rngname = \"random\", startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width - 1, nodecrypto; // node.js crypto module, initialized at the bottom.\n    //\n    // seedrandom()\n    // This is the seedrandom function described above.\n    //\n    function seedrandom(seed, options, callback) {\n        var key = [];\n        options = options == true ? {\n            entropy: true\n        } : options || {};\n        // Flatten the seed string or build one from local entropy if needed.\n        var shortseed = mixkey(flatten(options.entropy ? [\n            seed,\n            tostring(pool)\n        ] : seed == null ? autoseed() : seed, 3), key);\n        // Use the seed to initialize an ARC4 generator.\n        var arc4 = new ARC4(key);\n        // This function returns a random double in [0, 1) that contains\n        // randomness in every bit of the mantissa of the IEEE 754 value.\n        var prng = function() {\n            var n = arc4.g(chunks), d = startdenom, x = 0; //   and no 'extra last byte'.\n            while(n < significance){\n                n = (n + x) * width; //   shifting numerator and\n                d *= width; //   denominator and generating a\n                x = arc4.g(1); //   new least-significant-byte.\n            }\n            while(n >= overflow){\n                n /= 2; //   last byte, shift everything\n                d /= 2; //   right using integer math until\n                x >>>= 1; //   we have exactly the desired bits.\n            }\n            return (n + x) / d; // Form the number within [0, 1).\n        };\n        prng.int32 = function() {\n            return arc4.g(4) | 0;\n        };\n        prng.quick = function() {\n            return arc4.g(4) / 0x100000000;\n        };\n        prng.double = prng;\n        // Mix the randomness into accumulated entropy.\n        mixkey(tostring(arc4.S), pool);\n        // Calling convention: what to return as a function of prng, seed, is_math.\n        return (options.pass || callback || function(prng, seed, is_math_call, state) {\n            if (state) {\n                // Load the arc4 state from the given state if it has an S array.\n                if (state.S) copy(state, arc4);\n                // Only provide the .state method if requested via options.state.\n                prng.state = function() {\n                    return copy(arc4, {});\n                };\n            }\n            // If called as a method of Math (Math.seedrandom()), mutate\n            // Math.random because that is how seedrandom.js has worked since v1.0.\n            if (is_math_call) {\n                math[rngname] = prng;\n                return seed;\n            } else return prng;\n        })(prng, shortseed, \"global\" in options ? options.global : this == math, options.state);\n    }\n    //\n    // ARC4\n    //\n    // An ARC4 implementation.  The constructor takes a key in the form of\n    // an array of at most (width) integers that should be 0 <= x < (width).\n    //\n    // The g(count) method returns a pseudorandom integer that concatenates\n    // the next (count) outputs from ARC4.  Its return value is a number x\n    // that is in the range 0 <= x < (width ^ count).\n    //\n    function ARC4(key) {\n        var t, keylen = key.length, me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n        // The empty key [] is treated as [0].\n        if (!keylen) key = [\n            keylen++\n        ];\n        // Set up S using the standard key scheduling algorithm.\n        while(i < width)s[i] = i++;\n        for(i = 0; i < width; i++){\n            s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];\n            s[j] = t;\n        }\n        // The \"g\" method returns the next (count) outputs as one number.\n        (me.g = function(count) {\n            // Using instance members instead of closure state nearly doubles speed.\n            var t, r = 0, i = me.i, j = me.j, s = me.S;\n            while(count--){\n                t = s[i = mask & i + 1];\n                r = r * width + s[mask & (s[i] = s[j = mask & j + t]) + (s[j] = t)];\n            }\n            me.i = i;\n            me.j = j;\n            return r;\n        // For robust unpredictability, the function call below automatically\n        // discards an initial batch of values.  This is called RC4-drop[256].\n        // See http://google.com/search?q=rsa+fluhrer+response&btnI\n        })(width);\n    }\n    //\n    // copy()\n    // Copies internal state of ARC4 to or from a plain object.\n    //\n    function copy(f, t) {\n        t.i = f.i;\n        t.j = f.j;\n        t.S = f.S.slice();\n        return t;\n    }\n    //\n    // flatten()\n    // Converts an object tree to nested arrays of strings.\n    //\n    function flatten(obj, depth) {\n        var result = [], typ = typeof obj, prop;\n        if (depth && typ == \"object\") {\n            for(prop in obj)try {\n                result.push(flatten(obj[prop], depth - 1));\n            } catch (e) {}\n        }\n        return result.length ? result : typ == \"string\" ? obj : obj + \"\\x00\";\n    }\n    //\n    // mixkey()\n    // Mixes a string seed into a key that is an array of integers, and\n    // returns a shortened string seed that is equivalent to the result key.\n    //\n    function mixkey(seed, key) {\n        var stringseed = seed + \"\", smear, j = 0;\n        while(j < stringseed.length)key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);\n        return tostring(key);\n    }\n    //\n    // autoseed()\n    // Returns an object for autoseeding, using window.crypto and Node crypto\n    // module if available.\n    //\n    function autoseed() {\n        try {\n            var out;\n            if (nodecrypto && (out = nodecrypto.randomBytes)) // The use of 'out' to remember randomBytes makes tight minified code.\n            out = out(width);\n            else {\n                out = new Uint8Array(width);\n                (global.crypto || global.msCrypto).getRandomValues(out);\n            }\n            return tostring(out);\n        } catch (e) {\n            var browser = global.navigator, plugins = browser && browser.plugins;\n            return [\n                +new Date,\n                global,\n                plugins,\n                global.screen,\n                tostring(pool)\n            ];\n        }\n    }\n    //\n    // tostring()\n    // Converts an array of charcodes to a string\n    //\n    function tostring(a) {\n        return String.fromCharCode.apply(0, a);\n    }\n    //\n    // When seedrandom.js is loaded, we immediately mix a few bits\n    // from the built-in RNG into the entropy pool.  Because we do\n    // not want to interfere with deterministic PRNG state later,\n    // seedrandom will not call math.random on its own again after\n    // initialization.\n    //\n    mixkey(math.random(), pool);\n    //\n    // Nodejs and AMD support: export the implementation as a module using\n    // either convention.\n    //\n    if (0, module.exports) {\n        module.exports = seedrandom;\n        // When in node.js, try using crypto package for autoseeding.\n        try {\n            nodecrypto = (parcelRequire(\"kjyEk\"));\n        } catch (ex) {}\n    } else if (typeof define == \"function\" && define.amd) define(function() {\n        return seedrandom;\n    });\n    else // When included as a plain script, set up Math.seedrandom global.\n    math[\"seed\" + rngname] = seedrandom;\n// End anonymous scope, and pass initial values.\n})(// global: `self` in browsers (including strict mode and web workers),\n// otherwise `this` in Node and other environments\ntypeof self !== \"undefined\" ? self : module.exports, [], Math // math: package containing random, pow, and seedrandom\n);\n\n});\nparcelRequire.register(\"kjyEk\", function(module, exports) {\n\"use strict\";\n\n});\n\n\n\n\nparcelRequire.register(\"9HmlY\", function(module, exports) {\n\n$parcel$export(module.exports, \"sortedStringify\", () => $b21b317d60618aca$export$637321ccaed74326);\n$parcel$export(module.exports, \"sortObjectByValues\", () => $b21b317d60618aca$export$8ac25fd097dcfc2);\nfunction $b21b317d60618aca$export$637321ccaed74326(wynik) {\n    const sortedObj = {};\n    Object.keys(wynik).sort().forEach((key)=>{\n        sortedObj[key] = wynik[key];\n    });\n    return JSON.stringify(sortedObj);\n}\nfunction $b21b317d60618aca$export$8ac25fd097dcfc2(obj) {\n    // Convert the object to an array of key-value pairs\n    const keyValueArray = Object.entries(obj);\n    // Sort the array based on the values (ascending order)\n    return keyValueArray.sort((a, b)=>b[1] - a[1]).map(([key, value])=>{\n        return {\n            key: key,\n            value: value\n        };\n    });\n}\n\n});\n\nparcelRequire.register(\"8OXs6\", function(module, exports) {\n\n$parcel$export(module.exports, \"ROZKLAD\", () => $dd9e9330ab7ef6b5$export$3ef61f55ef8769bb);\n// Źródło:\n// https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=592625443&range=AI4:AI44,\n// import { Partia, Partie, sondaz_uliczny } from \"./sondaz_uliczny\";\n// const TD = Object.entries(sondaz_uliczny).map(([okreg, partie]) => {\n//   return partie['TD'].poparcie\n// });\n// console.log(TD);\nconst $dd9e9330ab7ef6b5$export$3ef61f55ef8769bb = {\n    LEWICA: [\n        0.0282571335,\n        0.01488150667,\n        0.0478222815,\n        0.02984793983,\n        0.029476448,\n        0.0180548925,\n        0.010392221,\n        0.02975490417,\n        0.03759809833,\n        0.01542527167,\n        0.0236883605,\n        0.01100846683,\n        0.0397647275,\n        0.0091506275,\n        0.007909908333,\n        0.014014961,\n        0.008859429833,\n        0.010201509,\n        0.118083528,\n        0.03675424117,\n        0.020347473,\n        0.008839666333,\n        0.0155574055,\n        0.017031283,\n        0.032726717,\n        0.03074119817,\n        0.020098175,\n        0.0194996075,\n        0.01982511017,\n        0.01285778183,\n        0.02496772,\n        0.032462213,\n        0.0220234625,\n        0.0126734095,\n        0.01999657117,\n        0.02434270517,\n        0.021791153,\n        0.01856165517,\n        0.0379657795,\n        0.01779259133,\n        0.02895186617\n    ],\n    // https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=592625443&range=AN4:AN44,\n    LEWICA_BLAD: [\n        5.44,\n        4.35,\n        9.6,\n        7.9,\n        7.12,\n        3.38,\n        7.34,\n        3.42,\n        7.25,\n        3.99,\n        5.89,\n        3.0,\n        6.74,\n        3.41,\n        3.53,\n        6.97,\n        6.73,\n        5.94,\n        9.39,\n        8.1,\n        1.61,\n        5.79,\n        2.92,\n        7.77,\n        5.7,\n        2.09,\n        3.51,\n        8.74,\n        2.27,\n        5.02,\n        3.17,\n        5.67,\n        6.45,\n        4.54,\n        3.6,\n        6.46,\n        8.97,\n        7.86,\n        6.82,\n        5.23,\n        3.79\n    ],\n    // https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=1383721529&range=U3:U43,\n    KO: [\n        0.02095042333,\n        0.01835469433,\n        0.04189383883,\n        0.02857291333,\n        0.02348052333,\n        0.02197197817,\n        0.01186840483,\n        0.02720124583,\n        0.0292574625,\n        0.01053707333,\n        0.0189868865,\n        0.01425199983,\n        0.03839594083,\n        0.009164819667,\n        0.008615772,\n        0.01198455117,\n        0.01145744533,\n        0.01229867283,\n        0.1181621912,\n        0.0343164895,\n        0.02074295667,\n        0.01193354767,\n        0.01593256617,\n        0.0210371165,\n        0.0441507985,\n        0.04206959417,\n        0.020244877,\n        0.01245059417,\n        0.02117911833,\n        0.01750180833,\n        0.034037158,\n        0.01911514317,\n        0.019047872,\n        0.01428191817,\n        0.017092405,\n        0.02281050867,\n        0.01443454267,\n        0.02173799933,\n        0.047433574,\n        0.01732140367,\n        0.03372117283\n    ],\n    // https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=1383721529&range=X3:X43,\n    KO_BLAD: [\n        2.38,\n        4.81,\n        2.31,\n        6.08,\n        5.05,\n        1.21,\n        1.82,\n        2.96,\n        5.81,\n        1.72,\n        4.21,\n        1.47,\n        3.91,\n        6.86,\n        6.03,\n        2.58,\n        1.74,\n        1.66,\n        6.52,\n        2.43,\n        3.08,\n        2.44,\n        3.1,\n        2.78,\n        6.05,\n        3.14,\n        2.42,\n        3.58,\n        3.46,\n        5.66,\n        4.79,\n        1.11,\n        1.82,\n        4.67,\n        2.93,\n        2.28,\n        1.65,\n        4.96,\n        4.83,\n        5.98,\n        3.32\n    ],\n    // TRZEBA POSORTOWAĆ ARKUSZ!!!\n    // https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=1231789773&range=R4:R44,\n    TD: [\n        0.022415876,\n        0.0140898335,\n        0.03175889317,\n        0.0283710235,\n        0.02891201475,\n        0.026946886,\n        0.022047627,\n        0.03287808558,\n        0.01753570292,\n        0.01884171267,\n        0.02608876458,\n        0.01569827233,\n        0.03346774583,\n        0.0150046695,\n        0.02292685725,\n        0.02517498925,\n        0.01684268933,\n        0.02528291583,\n        0.05741305392,\n        0.03330098842,\n        0.02768583583,\n        0.0156986055,\n        0.0244913335,\n        0.03222947392,\n        0.02653349625,\n        0.033979463,\n        0.02036296842,\n        0.01573798425,\n        0.017095344,\n        0.01606130233,\n        0.02022854192,\n        0.01415383625,\n        0.02527398442,\n        0.01563157683,\n        0.02427266483,\n        0.03357863792,\n        0.02057061317,\n        0.02859777067,\n        0.0285236385,\n        0.01738948992,\n        0.02690483617\n    ],\n    // stały\n    TD_BLAD: [\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7\n    ],\n    // https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=418600979&range=V3:V43,\n    PIS: [\n        0.02289047833,\n        0.014539447,\n        0.02776369267,\n        0.02131711167,\n        0.02294950533,\n        0.03838390783,\n        0.02973062217,\n        0.01900597067,\n        0.01591571983,\n        0.02408826683,\n        0.02904836917,\n        0.02130995067,\n        0.0311625805,\n        0.02963938367,\n        0.02562634467,\n        0.02475671167,\n        0.02382695067,\n        0.033949261,\n        0.04304594533,\n        0.02970509583,\n        0.01980732767,\n        0.03061604567,\n        0.04447523967,\n        0.03270840817,\n        0.02036073383,\n        0.02608811483,\n        0.0227350815,\n        0.0159613145,\n        0.016143496,\n        0.02084102017,\n        0.02295180183,\n        0.01589586733,\n        0.04070432767,\n        0.013169903,\n        0.01636291267,\n        0.02526424917,\n        0.02164847417,\n        0.01629085967,\n        0.01578302817,\n        0.012774997,\n        0.02076148367\n    ],\n    // https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=418600979&range=X3:X43,\n    PIS_BLAD: [\n        1.25,\n        2.27,\n        2.65,\n        3.22,\n        1.73,\n        6.49,\n        10.69,\n        2.54,\n        2.74,\n        8.62,\n        6.18,\n        1.37,\n        7.92,\n        5.76,\n        3.48,\n        5.35,\n        7.48,\n        8.33,\n        7.79,\n        4.64,\n        3.03,\n        4.2,\n        3.39,\n        3.23,\n        3.62,\n        3.23,\n        5.0,\n        2.05,\n        4.8,\n        3.58,\n        5.93,\n        3.25,\n        6.75,\n        3.18,\n        2.45,\n        3.75,\n        5.87,\n        3.43,\n        6.49,\n        2.91,\n        2.37\n    ],\n    // https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=173675036&range=W3:W43,\n    KONF: [\n        0.02060562967,\n        0.01229549835,\n        0.03603269929,\n        0.02187492114,\n        0.022931464,\n        0.03703330869,\n        0.02519996845,\n        0.02217074937,\n        0.01722519479,\n        0.01994023364,\n        0.02252087825,\n        0.02050570213,\n        0.03539542744,\n        0.02552712404,\n        0.02291576829,\n        0.01795242761,\n        0.01920071307,\n        0.02779108581,\n        0.05962854781,\n        0.02940181365,\n        0.02027409076,\n        0.02730411279,\n        0.04747821146,\n        0.03286621146,\n        0.0258593653,\n        0.03152217595,\n        0.0235678845,\n        0.01403419925,\n        0.01896100225,\n        0.02215147004,\n        0.02308606074,\n        0.01587827245,\n        0.03247476995,\n        0.01196144868,\n        0.01944236486,\n        0.0257290283,\n        0.01804960345,\n        0.01795606471,\n        0.02234484537,\n        0.01189939569,\n        0.02101026617\n    ],\n    // https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=173675036&range=Z3:Z43,\n    KONF_BLAD: [\n        1.14,\n        3.14,\n        6.32,\n        4.99,\n        7.07,\n        13.57,\n        20.14,\n        3.12,\n        2.92,\n        6.45,\n        2.25,\n        10.94,\n        13.54,\n        15.52,\n        13.43,\n        2.83,\n        7.4,\n        14.28,\n        11.92,\n        3.44,\n        3.64,\n        18.1,\n        12.97,\n        10.15,\n        8.59,\n        3.48,\n        4.35,\n        9.07,\n        11.42,\n        5.82,\n        12.97,\n        2.62,\n        3.15,\n        8.41,\n        2.01,\n        1.66,\n        6.39,\n        4.99,\n        7.92,\n        7.85,\n        7.46\n    ]\n};\n\n});\n\n\n\nparcelRequire.register(\"aokan\", function(module, exports) {\n\n$parcel$export(module.exports, \"rysujWynikWyborow\", () => $75354d900d52c58f$export$a36ee161a0d45cdf);\n$parcel$export(module.exports, \"odmianaSlowaMandat\", () => $75354d900d52c58f$export$2c8fd381c328f0c2);\n$parcel$export(module.exports, \"rysujHistogram\", () => $75354d900d52c58f$export$7a22f047cf18a648);\n\nvar $geIQo = parcelRequire(\"geIQo\");\n\nvar $cWeek = parcelRequire(\"cWeek\");\n\nvar $a4zWM = parcelRequire(\"a4zWM\");\n\nvar $h5k33 = parcelRequire(\"h5k33\");\nfunction $75354d900d52c58f$export$a36ee161a0d45cdf(wynikWyborow, targetElement, options = {}) {\n    const canvas = document.createElement(\"canvas\");\n    document.getElementById(targetElement).appendChild(canvas);\n    new (0, $a4zWM.default)(canvas, {\n        type: \"bar\",\n        data: {\n            labels: Object.entries(wynikWyborow).map(([sondaz, wynik])=>sondaz.toString()),\n            datasets: !options.laczOpozycje ? [\n                {\n                    label: \"Lewica\",\n                    data: Object.values(wynikWyborow).map((wynik)=>wynik.LEWICA),\n                    backgroundColor: (0, $geIQo.KOLOR_PARTII)[\"LEWICA\"]\n                },\n                {\n                    label: \"KO\",\n                    data: Object.values(wynikWyborow).map((wynik)=>wynik.KO),\n                    backgroundColor: (0, $geIQo.KOLOR_PARTII)[\"KO\"]\n                },\n                {\n                    label: \"Trzecia Droga\",\n                    data: Object.values(wynikWyborow).map((wynik)=>wynik.TD),\n                    backgroundColor: (0, $geIQo.KOLOR_PARTII)[\"TD\"]\n                },\n                {\n                    label: \"PiS + Konfederacja\",\n                    data: Object.values(wynikWyborow).map((wynik)=>wynik.NIEDEMO),\n                    backgroundColor: \"rgb(128, 0, 32)\"\n                }\n            ] : [\n                {\n                    label: \"Opozycja Demokratyczna\",\n                    data: Object.values(wynikWyborow).map((wynik)=>wynik.DEMO),\n                    backgroundColor: \"#E56701\"\n                },\n                {\n                    label: \"PiS + Konfederacja\",\n                    data: Object.values(wynikWyborow).map((wynik)=>wynik.NIEDEMO),\n                    backgroundColor: \"rgb(128, 0, 32)\"\n                }\n            ]\n        },\n        options: options?.poziomo ? {\n            indexAxis: \"y\",\n            scales: {\n                x: {\n                    stacked: true,\n                    max: options?.calySejm ? 460 : null,\n                    afterBuildTicks: options?.calySejm ? (axis)=>axis.ticks = [\n                            0,\n                            230,\n                            460\n                        ].map((v)=>({\n                                value: v\n                            })) : null\n                },\n                y: {\n                    stacked: true\n                }\n            }\n        } : {}\n    });\n}\nfunction $75354d900d52c58f$export$2c8fd381c328f0c2(mandaty) {\n    return [\n        0,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14\n    ].includes(mandaty) ? \"mandat\\xf3w\" : mandaty > 1 ? \"mandaty\" : \"mandat\";\n}\nfunction $75354d900d52c58f$export$7a22f047cf18a648(histogram, targetElement, partia, procentZSondazy, odchylenie, minimumMandatow, okreg) {\n    const canvas = document.createElement(\"canvas\");\n    document.getElementById(targetElement).appendChild(canvas);\n    const color = (0, $geIQo.KOLOR_PARTII)[partia];\n    const procenty = Object.keys(histogram).sort((a, b)=>Number.parseFloat(b) - Number.parseFloat(a));\n    const footer = (tooltipItems)=>{\n        let sum = 0;\n        tooltipItems.forEach(function(tooltipItem) {\n            sum += Number(tooltipItem.label.split(\"%\")[0]) * okreg.glosy2019;\n        });\n        return \"Głos\\xf3w: \" + Math.round(sum / 100);\n    };\n    new (0, $a4zWM.default)(canvas, {\n        type: \"bar\",\n        data: {\n            labels: procenty.map((procent)=>`${procent}%`),\n            datasets: (partia === \"KO\" ? [\n                {\n                    label: `${minimumMandatow[partia] + 4} ${$75354d900d52c58f$export$2c8fd381c328f0c2(minimumMandatow[partia] + 4)}`,\n                    data: procenty.map((procent)=>(histogram[procent][String(minimumMandatow[partia] + 4)] || 0) / (0, $cWeek.ILE_SYMULACJI) * 100),\n                    backgroundColor: (0, (/*@__PURE__*/$parcel$interopDefault($h5k33)))(color).darken(0.4).toString()\n                },\n                {\n                    label: `${minimumMandatow[partia] + 3} ${$75354d900d52c58f$export$2c8fd381c328f0c2(minimumMandatow[partia] + 3)}`,\n                    data: procenty.map((procent)=>(histogram[procent][String(minimumMandatow[partia] + 3)] || 0) / (0, $cWeek.ILE_SYMULACJI) * 100),\n                    backgroundColor: (0, (/*@__PURE__*/$parcel$interopDefault($h5k33)))(color).darken(0.2).toString()\n                }\n            ] : []).concat([\n                {\n                    label: `${minimumMandatow[partia] + 2} ${$75354d900d52c58f$export$2c8fd381c328f0c2(minimumMandatow[partia] + 2)}`,\n                    data: procenty.map((procent)=>(histogram[procent][String(minimumMandatow[partia] + 2)] || 0) / (0, $cWeek.ILE_SYMULACJI) * 100),\n                    backgroundColor: color\n                },\n                {\n                    label: `${minimumMandatow[partia] + 1} ${$75354d900d52c58f$export$2c8fd381c328f0c2(minimumMandatow[partia] + 1)}`,\n                    data: procenty.map((procent)=>(histogram[procent][String(minimumMandatow[partia] + 1)] || 0) / (0, $cWeek.ILE_SYMULACJI) * 100),\n                    backgroundColor: (0, (/*@__PURE__*/$parcel$interopDefault($h5k33)))(color).fade(0.4).toString()\n                },\n                {\n                    label: `${minimumMandatow[partia]} ${$75354d900d52c58f$export$2c8fd381c328f0c2(minimumMandatow[partia])}`,\n                    data: procenty.map((procent)=>(histogram[procent][String(minimumMandatow[partia])] || 0) / (0, $cWeek.ILE_SYMULACJI) * 100),\n                    backgroundColor: (0, (/*@__PURE__*/$parcel$interopDefault($h5k33)))(color).fade(0.8).toString()\n                }\n            ])\n        },\n        options: {\n            plugins: {\n                legend: {\n                    title: {\n                        display: true,\n                        text: `Przewidywany wynik w okręgu dla ${partia}: ${procentZSondazy}%, σ: ${Math.round(odchylenie * 10) / 10}`,\n                        color: \"black\",\n                        font: {\n                            size: 15\n                        }\n                    }\n                },\n                tooltip: {\n                    callbacks: {\n                        footer: footer\n                    }\n                }\n            },\n            scales: {\n                x: {\n                    stacked: true\n                },\n                y: {\n                    display: false,\n                    stacked: true\n                }\n            }\n        }\n    });\n    const tekst = document.createElement(\"p\");\n    // tekst.setAttribute(\"style\", \"\");\n    // tekst.innerHTML = interpretacjaHistogramu(partia, String(minimumMandatow[partia]), histogram);\n    document.getElementById(targetElement).appendChild(tekst);\n} // function extractProcent(poparcie: PoparciePartii) {\n //   return Number(poparcie.procent);\n // }\n // function interpretacjaHistogramu(partia: string, oczekiwaneMandaty: string, histogram: PoparciePartii) {\n //   const procentyOczekiwanych = Object.entries(histogram).filter(\n //     ([ mandaty, czestosc ]) => mandaty === oczekiwaneMandaty\n //   );\n //   const minProcentDoOczekiwanych = procentyOczekiwanych.reduce((acc, curr) =>\n //     extractProcent(curr) < extractProcent(acc) ? curr : acc\n //   );\n //   const maxProcentDoOczekiwanych = procentyOczekiwanych.reduce((acc, curr) =>\n //     extractProcent(curr) > extractProcent(acc) ? curr : acc\n //   );\n //   let tekst = `Jeśli ${partia} otrzyma`;\n //   // Nie podajemy dolnego zakresu, gdy oczekujemy 0 mandatów\n //   tekst += oczekiwaneMandaty\n //     ? ` od ${Math.max(extractProcent(minProcentDoOczekiwanych), 0)}%`\n //     : \"\";\n //   tekst += ` do ${\n //     maxProcentDoOczekiwanych.procent\n //   }% głosów, to zdobędzie ${oczekiwaneMandaty} ${odmianaSlowaMandat(\n //     oczekiwaneMandaty\n //   )}.`;\n //   return tekst;\n // }\n\n});\nparcelRequire.register(\"a4zWM\", function(module, exports) {\n$parcel$export(module.exports, \"Chart\", () => (parcelRequire(\"1JI8o\")).Chart);\n$parcel$export(module.exports, \"registerables\", () => (parcelRequire(\"1JI8o\")).registerables);\n\n$parcel$export(module.exports, \"default\", () => $7556296cd6b61dcf$export$2e2bcd8739ae039);\n\nvar $1JI8o = parcelRequire(\"1JI8o\");\n(0, $1JI8o.Chart).register(...(0, $1JI8o.registerables));\nvar $7556296cd6b61dcf$export$2e2bcd8739ae039 = (0, $1JI8o.Chart);\n\n});\nparcelRequire.register(\"1JI8o\", function(module, exports) {\n\n$parcel$export(module.exports, \"Chart\", () => $143c3a913eb38704$export$acaa6426d77a227e);\n$parcel$export(module.exports, \"registerables\", () => $143c3a913eb38704$export$e8959e79e3af550f);\n/*!\n * Chart.js v4.4.0\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */ \nvar $iUM1U = parcelRequire(\"iUM1U\");\n\nclass $143c3a913eb38704$var$Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n    _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart: chart,\n                initial: anims.initial,\n                numSteps: numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n    _refresh() {\n        if (this._request) return;\n        this._running = true;\n        this._request = (0, $iUM1U.r).call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) this._refresh();\n        });\n    }\n    _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) return;\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) anims.duration = item._total;\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, \"progress\");\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, \"complete\");\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) this._running = false;\n    }\n    _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n    listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n    add(chart, items) {\n        if (!items || !items.length) return;\n        this._getAnims(chart).items.push(...items);\n    }\n    has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n    start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) return;\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) return false;\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) return false;\n        return true;\n    }\n    stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) return;\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i)items[i].cancel();\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), \"complete\");\n    }\n    remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar $143c3a913eb38704$export$a424a0aa8f687495 = /* #__PURE__ */ new $143c3a913eb38704$var$Animator();\nconst $143c3a913eb38704$var$transparent = \"transparent\";\nconst $143c3a913eb38704$var$interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n    color (from, to, factor) {\n        const c0 = (0, $iUM1U.c)(from || $143c3a913eb38704$var$transparent);\n        const c1 = c0.valid && (0, $iUM1U.c)(to || $143c3a913eb38704$var$transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass $143c3a913eb38704$export$c35d437ae5945fcd {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = (0, $iUM1U.a)([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = (0, $iUM1U.a)([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || $143c3a913eb38704$var$interpolators[cfg.type || typeof from];\n        this._easing = (0, $iUM1U.e)[cfg.easing] || (0, $iUM1U.e).linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = (0, $iUM1U.a)([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = (0, $iUM1U.a)([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res: res,\n                rej: rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? \"res\" : \"rej\";\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++)promises[i][method]();\n    }\n}\nclass $143c3a913eb38704$export$8ab227dac26677d {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!(0, $iUM1U.i)(config)) return;\n        const animationOptions = Object.keys((0, $iUM1U.d).animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!(0, $iUM1U.i)(cfg)) return;\n            const resolved = {};\n            for (const option of animationOptions)resolved[option] = cfg[option];\n            ((0, $iUM1U.b)(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) animatedProps.set(prop, resolved);\n            });\n        });\n    }\n    _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = $143c3a913eb38704$var$resolveTargetOptions(target, newOptions);\n        if (!options) return [];\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) $143c3a913eb38704$var$awaitAll(target.options.$animations, newOptions).then(()=>{\n            target.options = newOptions;\n        }, ()=>{});\n        return animations;\n    }\n    _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === \"$\") continue;\n            if (prop === \"options\") {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else animation.cancel();\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new $143c3a913eb38704$export$c35d437ae5945fcd(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n    update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            $143c3a913eb38704$export$a424a0aa8f687495.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction $143c3a913eb38704$var$awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) running.push(anim.wait());\n    }\n    return Promise.all(running);\n}\nfunction $143c3a913eb38704$var$resolveTargetOptions(target, newOptions) {\n    if (!newOptions) return;\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) target.options = options = Object.assign({}, options, {\n        $shared: false,\n        $animations: {}\n    });\n    return options;\n}\nfunction $143c3a913eb38704$var$scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction $143c3a913eb38704$var$defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) return false;\n    const x = $143c3a913eb38704$var$scaleClip(xScale, allowedOverflow);\n    const y = $143c3a913eb38704$var$scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction $143c3a913eb38704$var$toClip(value) {\n    let t, r, b, l;\n    if ((0, $iUM1U.i)(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else t = r = b = l = value;\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction $143c3a913eb38704$var$getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i)keys.push(metasets[i].index);\n    return keys;\n}\nfunction $143c3a913eb38704$var$applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === \"single\";\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) return;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) continue;\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if ((0, $iUM1U.g)(otherValue) && (singleMode || value === 0 || (0, $iUM1U.s)(value) === (0, $iUM1U.s)(otherValue))) value += otherValue;\n    }\n    return value;\n}\nfunction $143c3a913eb38704$var$convertObjectDataToArray(data) {\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            x: key,\n            y: data[key]\n        };\n    }\n    return adata;\n}\nfunction $143c3a913eb38704$var$isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction $143c3a913eb38704$var$getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction $143c3a913eb38704$var$getUserBounds(scale) {\n    const { min: min, max: max, minDefined: minDefined, maxDefined: maxDefined } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction $143c3a913eb38704$var$getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction $143c3a913eb38704$var$getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) return meta.index;\n    }\n    return null;\n}\nfunction $143c3a913eb38704$var$updateStacks(controller, parsed) {\n    const { chart: chart, _cachedMeta: meta } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale: iScale, vScale: vScale, index: datasetIndex } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = $143c3a913eb38704$var$getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index, [vAxis]: value } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = $143c3a913eb38704$var$getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = $143c3a913eb38704$var$getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = $143c3a913eb38704$var$getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction $143c3a913eb38704$var$getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction $143c3a913eb38704$var$createDatasetContext(parent, index) {\n    return (0, $iUM1U.j)(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index: index,\n        mode: \"default\",\n        type: \"dataset\"\n    });\n}\nfunction $143c3a913eb38704$var$createDataContext(parent, index, element) {\n    return (0, $iUM1U.j)(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element: element,\n        index: index,\n        mode: \"default\",\n        type: \"data\"\n    });\n}\nfunction $143c3a913eb38704$var$clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) return;\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) return;\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) delete stacks[axis]._visualValues[datasetIndex];\n    }\n}\nconst $143c3a913eb38704$var$isDirectUpdateMode = (mode)=>mode === \"reset\" || mode === \"none\";\nconst $143c3a913eb38704$var$cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst $143c3a913eb38704$var$createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: $143c3a913eb38704$var$getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass $143c3a913eb38704$export$75572ec5c55b4048 {\n    static defaults = {};\n    static datasetElementType = null;\n    static dataElementType = null;\n    constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n        this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = $143c3a913eb38704$var$isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled(\"filler\")) console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) $143c3a913eb38704$var$clearStacks(this._cachedMeta);\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === \"x\" ? x : axis === \"r\" ? r : y;\n        const xid = meta.xAxisID = (0, $iUM1U.v)(dataset.xAxisID, $143c3a913eb38704$var$getFirstScaleId(chart, \"x\"));\n        const yid = meta.yAxisID = (0, $iUM1U.v)(dataset.yAxisID, $143c3a913eb38704$var$getFirstScaleId(chart, \"y\"));\n        const rid = meta.rAxisID = (0, $iUM1U.v)(dataset.rAxisID, $143c3a913eb38704$var$getFirstScaleId(chart, \"r\"));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n    getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n    _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update(\"reset\");\n    }\n    _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) (0, $iUM1U.u)(this._data, this);\n        if (meta._stacked) $143c3a913eb38704$var$clearStacks(meta);\n    }\n    _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if ((0, $iUM1U.i)(data)) this._data = $143c3a913eb38704$var$convertObjectDataToArray(data);\n        else if (_data !== data) {\n            if (_data) {\n                (0, $iUM1U.u)(_data, this);\n                const meta = this._cachedMeta;\n                $143c3a913eb38704$var$clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) (0, $iUM1U.l)(data, this);\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) meta.dataset = new this.datasetElementType();\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = $143c3a913eb38704$var$isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            $143c3a913eb38704$var$clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) $143c3a913eb38704$var$updateStacks(this, meta._parsed);\n    }\n    configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n    parse(start, count) {\n        const { _cachedMeta: meta, _data: data } = this;\n        const { iScale: iScale, _stacked: _stacked } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if ((0, $iUM1U.b)(data[start])) parsed = this.parseArrayData(meta, data, start, count);\n            else if ((0, $iUM1U.i)(data[start])) parsed = this.parseObjectData(meta, data, start, count);\n            else parsed = this.parsePrimitiveData(meta, data, start, count);\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) sorted = false;\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) $143c3a913eb38704$var$updateStacks(this, parsed);\n    }\n    parsePrimitiveData(meta, data, start, count) {\n        const { iScale: iScale, vScale: vScale } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n    parseArrayData(meta, data, start, count) {\n        const { xScale: xScale, yScale: yScale } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n    parseObjectData(meta, data, start, count) {\n        const { xScale: xScale, yScale: yScale } = meta;\n        const { xAxisKey: xAxisKey = \"x\", yAxisKey: yAxisKey = \"y\" } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse((0, $iUM1U.f)(item, xAxisKey), index),\n                y: yScale.parse((0, $iUM1U.f)(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n    getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n    getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n    applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: $143c3a913eb38704$var$getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return $143c3a913eb38704$var$applyStack(stack, value, meta.index, {\n            mode: mode\n        });\n    }\n    updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = $143c3a913eb38704$var$applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n    getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = $143c3a913eb38704$var$createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin, max: otherMax } = $143c3a913eb38704$var$getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !(0, $iUM1U.g)(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) continue;\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) break;\n        }\n        if (sorted) for(i = ilen - 1; i >= 0; --i){\n            if (_skip()) continue;\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            break;\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if ((0, $iUM1U.g)(value)) values.push(value);\n        }\n        return values;\n    }\n    getMaxOverflow() {\n        return false;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? \"\" + iScale.getLabelForValue(parsed[iScale.axis]) : \"\",\n            value: vScale ? \"\" + vScale.getLabelForValue(parsed[vScale.axis]) : \"\"\n        };\n    }\n    _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || \"default\");\n        meta._clip = $143c3a913eb38704$var$toClip((0, $iUM1U.v)(this.options.clip, $143c3a913eb38704$var$defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n    update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) meta.dataset.draw(ctx, area, start, count);\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) continue;\n            if (element.active && drawActiveElementsOnTop) active.push(element);\n            else element.draw(ctx, area);\n        }\n        for(i = 0; i < active.length; ++i)active[i].draw(ctx, area);\n    }\n    getStyle(index, active) {\n        const mode = active ? \"active\" : \"default\";\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n    getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = $143c3a913eb38704$var$createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = $143c3a913eb38704$var$createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n    resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n    resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n    _resolveElementOptions(elementType, mode = \"default\", index) {\n        const active = mode === \"active\";\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + \"-\" + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && (0, $iUM1U.h)(index);\n        if (cached) return $143c3a913eb38704$var$cloneIfNotShared(cached, sharing);\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            \"hover\",\n            elementType,\n            \"\"\n        ] : [\n            elementType,\n            \"\"\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys((0, $iUM1U.d).elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze($143c3a913eb38704$var$cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n    _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) return cached;\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new $143c3a913eb38704$export$8ab227dac26677d(chart, options && options.animations);\n        if (options && options._cacheable) cache[cacheKey] = Object.freeze(animations);\n        return animations;\n    }\n    getSharedOptions(options) {\n        if (!options.$shared) return;\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n    includeOptions(mode, sharedOptions) {\n        return !sharedOptions || $143c3a913eb38704$var$isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n    _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions: sharedOptions,\n            includeOptions: includeOptions\n        };\n    }\n    updateElement(element, index, properties, mode) {\n        if ($143c3a913eb38704$var$isDirectUpdateMode(mode)) Object.assign(element, properties);\n        else this._resolveAnimations(index, mode).update(element, properties);\n    }\n    updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !$143c3a913eb38704$var$isDirectUpdateMode(mode)) this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n    _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, \"active\", false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, \"active\", true);\n    }\n    _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) this._setStyle(element, undefined, \"active\", false);\n    }\n    _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) this._setStyle(element, undefined, \"active\", true);\n    }\n    _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList)this[method](arg1, arg2);\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) this.parse(0, count);\n        if (numData > numMeta) this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        else if (numData < numMeta) this._removeElements(numData, numMeta - numData);\n    }\n    _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--)arr[i] = arr[i - count];\n        };\n        move(data);\n        for(i = start; i < end; ++i)data[i] = new this.dataElementType();\n        if (this._parsing) move(meta._parsed);\n        this.parse(start, count);\n        if (resetNewElements) this.updateElements(data, start, count, \"reset\");\n    }\n    updateElements(element, start, count, mode) {}\n    _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) $143c3a913eb38704$var$clearStacks(meta, removed);\n        }\n        meta.data.splice(start, count);\n    }\n    _sync(args) {\n        if (this._parsing) this._syncList.push(args);\n        else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            \"_insertElements\",\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            \"_removeElements\",\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            \"_removeElements\",\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) this._sync([\n            \"_removeElements\",\n            start,\n            count\n        ]);\n        const newCount = arguments.length - 2;\n        if (newCount) this._sync([\n            \"_insertElements\",\n            start,\n            newCount\n        ]);\n    }\n    _onDataUnshift() {\n        this._sync([\n            \"_insertElements\",\n            0,\n            arguments.length\n        ]);\n    }\n}\nfunction $143c3a913eb38704$var$getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++)values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        scale._cache.$bar = (0, $iUM1U._)(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\nfunction $143c3a913eb38704$var$computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = $143c3a913eb38704$var$getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) return;\n        if ((0, $iUM1U.h)(prev)) min = Math.min(min, Math.abs(curr - prev) || min);\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\nfunction $143c3a913eb38704$var$computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if ((0, $iUM1U.k)(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio: ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\nfunction $143c3a913eb38704$var$computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    if (next === null) next = curr + curr - prev;\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start: start\n    };\n}\nfunction $143c3a913eb38704$var$parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart: barStart,\n        barEnd: barEnd,\n        start: startValue,\n        end: endValue,\n        min: min,\n        max: max\n    };\n}\nfunction $143c3a913eb38704$var$parseValue(entry, item, vScale, i) {\n    if ((0, $iUM1U.b)(entry)) $143c3a913eb38704$var$parseFloatBar(entry, item, vScale, i);\n    else item[vScale.axis] = vScale.parse(entry, i);\n    return item;\n}\nfunction $143c3a913eb38704$var$parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push($143c3a913eb38704$var$parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction $143c3a913eb38704$var$isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction $143c3a913eb38704$var$barSign(size, vScale, actualBase) {\n    if (size !== 0) return (0, $iUM1U.s)(size);\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction $143c3a913eb38704$var$borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = \"left\";\n        end = \"right\";\n    } else {\n        reverse = properties.base < properties.y;\n        start = \"bottom\";\n        end = \"top\";\n    }\n    if (reverse) {\n        top = \"end\";\n        bottom = \"start\";\n    } else {\n        top = \"start\";\n        bottom = \"end\";\n    }\n    return {\n        start: start,\n        end: end,\n        reverse: reverse,\n        top: top,\n        bottom: bottom\n    };\n}\nfunction $143c3a913eb38704$var$setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start: start, end: end, reverse: reverse, top: top, bottom: bottom } = $143c3a913eb38704$var$borderProps(properties);\n    if (edge === \"middle\" && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) edge = top;\n        else if ((stack._bottom || 0) === index) edge = bottom;\n        else {\n            res[$143c3a913eb38704$var$parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[$143c3a913eb38704$var$parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction $143c3a913eb38704$var$parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = $143c3a913eb38704$var$swap(edge, a, b);\n        edge = $143c3a913eb38704$var$startEnd(edge, b, a);\n    } else edge = $143c3a913eb38704$var$startEnd(edge, a, b);\n    return edge;\n}\nfunction $143c3a913eb38704$var$swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction $143c3a913eb38704$var$startEnd(v, start, end) {\n    return v === \"start\" ? start : v === \"end\" ? end : v;\n}\nfunction $143c3a913eb38704$var$setInflateAmount(properties, { inflateAmount: inflateAmount }, ratio) {\n    properties.inflateAmount = inflateAmount === \"auto\" ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass $143c3a913eb38704$export$e97d5dc64e999004 extends $143c3a913eb38704$export$75572ec5c55b4048 {\n    static id = \"bar\";\n    static defaults = {\n        datasetElementType: false,\n        dataElementType: \"bar\",\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: \"number\",\n                properties: [\n                    \"x\",\n                    \"y\",\n                    \"base\",\n                    \"width\",\n                    \"height\"\n                ]\n            }\n        }\n    };\n    static overrides = {\n        scales: {\n            _index_: {\n                type: \"category\",\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: \"linear\",\n                beginAtZero: true\n            }\n        }\n    };\n    parsePrimitiveData(meta, data, start, count) {\n        return $143c3a913eb38704$var$parseArrayOrPrimitive(meta, data, start, count);\n    }\n    parseArrayData(meta, data, start, count) {\n        return $143c3a913eb38704$var$parseArrayOrPrimitive(meta, data, start, count);\n    }\n    parseObjectData(meta, data, start, count) {\n        const { iScale: iScale, vScale: vScale } = meta;\n        const { xAxisKey: xAxisKey = \"x\", yAxisKey: yAxisKey = \"y\" } = this._parsing;\n        const iAxisKey = iScale.axis === \"x\" ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === \"x\" ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse((0, $iUM1U.f)(obj, iAxisKey), i);\n            parsed.push($143c3a913eb38704$var$parseValue((0, $iUM1U.f)(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n    updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n    getMaxOverflow() {\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale: iScale, vScale: vScale } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = $143c3a913eb38704$var$isFloatBar(custom) ? \"[\" + custom.start + \", \" + custom.end + \"]\" : \"\" + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: \"\" + iScale.getLabelForValue(parsed[iScale.axis]),\n            value: value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === \"reset\";\n        const { index: index, _cachedMeta: { vScale: vScale } } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions: sharedOptions, includeOptions: includeOptions } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || (0, $iUM1U.k)(parsed[vScale.axis]) ? {\n                base: base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal: horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || $143c3a913eb38704$var$isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? \"active\" : mode);\n            const options = properties.options || bars[i].options;\n            $143c3a913eb38704$var$setBorderSkipped(properties, options, stack, index);\n            $143c3a913eb38704$var$setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n    _getStacks(last, dataIndex) {\n        const { iScale: iScale } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const skipNull = (meta)=>{\n            const parsed = meta.controller.getParsed(dataIndex);\n            const val = parsed && parsed[meta.vScale.axis];\n            if ((0, $iUM1U.k)(val) || isNaN(val)) return true;\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) continue;\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) stacks.push(meta.stack);\n            if (meta.index === last) break;\n        }\n        if (!stacks.length) stacks.push(undefined);\n        return stacks;\n    }\n    _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n    _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n    _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i)pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        const barThickness = opts.barThickness;\n        const min = barThickness || $143c3a913eb38704$var$computeMinSampleSize(meta);\n        return {\n            min: min,\n            pixels: pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n    _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale: vScale, _stacked: _stacked, index: datasetIndex }, options: { base: baseValue, minBarLength: minBarLength } } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = $143c3a913eb38704$var$isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && (0, $iUM1U.s)(value) !== (0, $iUM1U.s)(custom.barEnd)) start = 0;\n            start += value;\n        }\n        const startValue = !(0, $iUM1U.k)(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) head = vScale.getPixelForValue(start + length);\n        else head = base;\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = $143c3a913eb38704$var$barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) base -= size / 2;\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = (0, $iUM1U.s)(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size: size,\n            base: base,\n            head: head,\n            center: head + size / 2\n        };\n    }\n    _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = (0, $iUM1U.v)(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === \"flex\" ? $143c3a913eb38704$var$computeFlexCategoryTraits(index, ruler, options, stackCount) : $143c3a913eb38704$var$computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center: center,\n            size: size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i)if (this.getParsed(i)[vScale.axis] !== null) rects[i].draw(this._ctx);\n    }\n}\nclass $143c3a913eb38704$export$19b5c4773f17abe extends $143c3a913eb38704$export$75572ec5c55b4048 {\n    static id = \"bubble\";\n    static defaults = {\n        datasetElementType: false,\n        dataElementType: \"point\",\n        animations: {\n            numbers: {\n                type: \"number\",\n                properties: [\n                    \"x\",\n                    \"y\",\n                    \"borderWidth\",\n                    \"radius\"\n                ]\n            }\n        }\n    };\n    static overrides = {\n        scales: {\n            x: {\n                type: \"linear\"\n            },\n            y: {\n                type: \"linear\"\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n    parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++)parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        return parsed;\n    }\n    parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = (0, $iUM1U.v)(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n    parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = (0, $iUM1U.v)(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n    getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i)max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        return max > 0 && max;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale: xScale, yScale: yScale } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || \"\",\n            value: \"(\" + x + \", \" + y + (r ? \", \" + r : \"\") + \")\"\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === \"reset\";\n        const { iScale: iScale, vScale: vScale } = this._cachedMeta;\n        const { sharedOptions: sharedOptions, includeOptions: includeOptions } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? \"active\" : mode);\n                if (reset) properties.options.radius = 0;\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n    resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) values = Object.assign({}, values, {\n            $shared: false\n        });\n        const radius = values.radius;\n        if (mode !== \"active\") values.radius = 0;\n        values.radius += (0, $iUM1U.v)(parsed && parsed._custom, radius);\n        return values;\n    }\n}\nfunction $143c3a913eb38704$var$getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < (0, $iUM1U.T)) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>(0, $iUM1U.p)(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>(0, $iUM1U.p)(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax((0, $iUM1U.H), startY, endY);\n        const minX = calcMin((0, $iUM1U.P), startX, endX);\n        const minY = calcMin((0, $iUM1U.P) + (0, $iUM1U.H), startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX: ratioX,\n        ratioY: ratioY,\n        offsetX: offsetX,\n        offsetY: offsetY\n    };\n}\nclass $143c3a913eb38704$export$e04603e7d8b77172 extends $143c3a913eb38704$export$75572ec5c55b4048 {\n    static id = \"doughnut\";\n    static defaults = {\n        datasetElementType: false,\n        dataElementType: \"arc\",\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: \"number\",\n                properties: [\n                    \"circumference\",\n                    \"endAngle\",\n                    \"innerRadius\",\n                    \"outerRadius\",\n                    \"startAngle\",\n                    \"x\",\n                    \"y\",\n                    \"offset\",\n                    \"borderWidth\",\n                    \"spacing\"\n                ]\n            }\n        },\n        cutout: \"50%\",\n        rotation: 0,\n        circumference: 360,\n        radius: \"100%\",\n        spacing: 0,\n        indexAxis: \"r\"\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== \"spacing\",\n        _indexable: (name)=>name !== \"spacing\" && !name.startsWith(\"borderDash\") && !name.startsWith(\"hoverBorderDash\")\n    };\n    static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle: pointStyle, color: color } } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n    parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) meta._parsed = data;\n        else {\n            let getter = (i)=>+data[i];\n            if ((0, $iUM1U.i)(data[start])) {\n                const { key: key = \"value\" } = this._parsing;\n                getter = (i)=>+(0, $iUM1U.f)(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i)meta._parsed[i] = getter(i);\n        }\n    }\n    _getRotation() {\n        return (0, $iUM1U.t)(this.options.rotation - 90);\n    }\n    _getCircumference() {\n        return (0, $iUM1U.t)(this.options.circumference);\n    }\n    _getRotationExtents() {\n        let min = (0, $iUM1U.T);\n        let max = -(0, $iUM1U.T);\n        for(let i = 0; i < this.chart.data.datasets.length; ++i)if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n            const controller = this.chart.getDatasetMeta(i).controller;\n            const rotation = controller._getRotation();\n            const circumference = controller._getCircumference();\n            min = Math.min(min, rotation);\n            max = Math.max(max, rotation + circumference);\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n    update(mode) {\n        const chart = this.chart;\n        const { chartArea: chartArea } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min((0, $iUM1U.m)(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference: circumference, rotation: rotation } = this._getRotationExtents();\n        const { ratioX: ratioX, ratioY: ratioY, offsetX: offsetX, offsetY: offsetY } = $143c3a913eb38704$var$getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = (0, $iUM1U.n)(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n    _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) return 0;\n        return this.calculateCircumference(meta._parsed[i] * circumference / (0, $iUM1U.T));\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === \"reset\";\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions: sharedOptions, includeOptions: includeOptions } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i)startAngle += this._circumference(i, reset);\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle: startAngle,\n                endAngle: startAngle + circumference,\n                circumference: circumference,\n                outerRadius: outerRadius,\n                innerRadius: innerRadius\n            };\n            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? \"active\" : mode);\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) total += Math.abs(value);\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) return (0, $iUM1U.T) * (Math.abs(value) / total);\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = (0, $iUM1U.o)(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || \"\",\n            value: value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i)if (chart.isDatasetVisible(i)) {\n                meta = chart.getDatasetMeta(i);\n                arcs = meta.data;\n                controller = meta.controller;\n                break;\n            }\n        }\n        if (!arcs) return 0;\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== \"inner\") max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n    _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i)if (this.chart.isDatasetVisible(i)) ringWeightOffset += this._getRingWeight(i);\n        return ringWeightOffset;\n    }\n    _getRingWeight(datasetIndex) {\n        return Math.max((0, $iUM1U.v)(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n    _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\nclass $143c3a913eb38704$export$3c9b5d28c11cbfd0 extends $143c3a913eb38704$export$75572ec5c55b4048 {\n    static id = \"line\";\n    static defaults = {\n        datasetElementType: \"line\",\n        dataElementType: \"point\",\n        showLine: true,\n        spanGaps: false\n    };\n    static overrides = {\n        scales: {\n            _index_: {\n                type: \"category\"\n            },\n            _value_: {\n                type: \"linear\"\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line, data: points = [], _dataset: _dataset } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start: start, count: count } = (0, $iUM1U.q)(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if ((0, $iUM1U.w)(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) options.borderWidth = 0;\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options: options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === \"reset\";\n        const { iScale: iScale, vScale: vScale, _stacked: _stacked, _dataset: _dataset } = this._cachedMeta;\n        const { sharedOptions: sharedOptions, includeOptions: includeOptions } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps: spanGaps, segment: segment } = this.options;\n        const maxGapLength = (0, $iUM1U.x)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === \"none\";\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = (0, $iUM1U.k)(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? \"active\" : mode);\n            if (!directUpdate) this.updateElement(point, i, properties, mode);\n            prevParsed = parsed;\n        }\n    }\n    getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) return border;\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\nclass $143c3a913eb38704$export$2a270b3a0d973c85 extends $143c3a913eb38704$export$75572ec5c55b4048 {\n    static id = \"polarArea\";\n    static defaults = {\n        dataElementType: \"arc\",\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: \"number\",\n                properties: [\n                    \"x\",\n                    \"y\",\n                    \"startAngle\",\n                    \"endAngle\",\n                    \"innerRadius\",\n                    \"outerRadius\"\n                ]\n            }\n        },\n        indexAxis: \"r\",\n        startAngle: 0\n    };\n    static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle: pointStyle, color: color } } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: \"radialLinear\",\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = (0, $iUM1U.o)(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || \"\",\n            value: value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return (0, $iUM1U.y).bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n    getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) range.min = parsed;\n                if (parsed > range.max) range.max = parsed;\n            }\n        });\n        return range;\n    }\n    _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === \"reset\";\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * (0, $iUM1U.P);\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i)angle += this._computeAngle(i, mode, defaultAngle);\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) outerRadius = 0;\n                if (animationOpts.animateRotate) startAngle = endAngle = datasetStartAngle;\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius: outerRadius,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? \"active\" : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) count++;\n        });\n        return count;\n    }\n    _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? (0, $iUM1U.t)(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\nclass $143c3a913eb38704$export$b21a3f1286706191 extends $143c3a913eb38704$export$e04603e7d8b77172 {\n    static id = \"pie\";\n    static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: \"100%\"\n    };\n}\nclass $143c3a913eb38704$export$48dbc6ac651bf8be extends $143c3a913eb38704$export$75572ec5c55b4048 {\n    static id = \"radar\";\n    static defaults = {\n        datasetElementType: \"line\",\n        dataElementType: \"point\",\n        indexAxis: \"r\",\n        showLine: true,\n        elements: {\n            line: {\n                fill: \"start\"\n            }\n        }\n    };\n    static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: \"radialLinear\"\n            }\n        }\n    };\n    getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: \"\" + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return (0, $iUM1U.y).bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== \"resize\") {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) options.borderWidth = 0;\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options: options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === \"reset\";\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? \"active\" : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x: x,\n                y: y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options: options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\nclass $143c3a913eb38704$export$b2f2bae6713db87 extends $143c3a913eb38704$export$75572ec5c55b4048 {\n    static id = \"scatter\";\n    static defaults = {\n        datasetElementType: false,\n        dataElementType: \"point\",\n        showLine: false,\n        fill: false\n    };\n    static overrides = {\n        interaction: {\n            mode: \"point\"\n        },\n        scales: {\n            x: {\n                type: \"linear\"\n            },\n            y: {\n                type: \"linear\"\n            }\n        }\n    };\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale: xScale, yScale: yScale } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || \"\",\n            value: \"(\" + x + \", \" + y + \")\"\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = [] } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start: start, count: count } = (0, $iUM1U.q)(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if ((0, $iUM1U.w)(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) this.addElements();\n            const { dataset: line, _dataset: _dataset } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options: options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine: showLine } = this.options;\n        if (!this.datasetElementType && showLine) this.datasetElementType = this.chart.registry.getElement(\"line\");\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === \"reset\";\n        const { iScale: iScale, vScale: vScale, _stacked: _stacked, _dataset: _dataset } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps: spanGaps, segment: segment } = this.options;\n        const maxGapLength = (0, $iUM1U.x)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === \"none\";\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = (0, $iUM1U.k)(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? \"active\" : mode);\n            if (!directUpdate) this.updateElement(point, i, properties, mode);\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n    getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i)max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) return border;\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\nvar $143c3a913eb38704$export$a6506504f799c5d5 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    BarController: $143c3a913eb38704$export$e97d5dc64e999004,\n    BubbleController: $143c3a913eb38704$export$19b5c4773f17abe,\n    DoughnutController: $143c3a913eb38704$export$e04603e7d8b77172,\n    LineController: $143c3a913eb38704$export$3c9b5d28c11cbfd0,\n    PieController: $143c3a913eb38704$export$b21a3f1286706191,\n    PolarAreaController: $143c3a913eb38704$export$2a270b3a0d973c85,\n    RadarController: $143c3a913eb38704$export$48dbc6ac651bf8be,\n    ScatterController: $143c3a913eb38704$export$b2f2bae6713db87\n});\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function $143c3a913eb38704$var$abstract() {\n    throw new Error(\"This method is not implemented: Check that a complete date adapter is provided.\");\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class $143c3a913eb38704$var$DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign($143c3a913eb38704$var$DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return $143c3a913eb38704$var$abstract();\n    }\n    parse() {\n        return $143c3a913eb38704$var$abstract();\n    }\n    format() {\n        return $143c3a913eb38704$var$abstract();\n    }\n    add() {\n        return $143c3a913eb38704$var$abstract();\n    }\n    diff() {\n        return $143c3a913eb38704$var$abstract();\n    }\n    startOf() {\n        return $143c3a913eb38704$var$abstract();\n    }\n    endOf() {\n        return $143c3a913eb38704$var$abstract();\n    }\n}\nvar $143c3a913eb38704$export$f32766ea09ec8bc4 = {\n    _date: $143c3a913eb38704$var$DateAdapterBase\n};\nfunction $143c3a913eb38704$var$binarySearch(metaset, axis, value, intersect) {\n    const { controller: controller, data: data, _sorted: _sorted } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== \"r\" && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? (0, $iUM1U.A) : (0, $iUM1U.B);\n        if (!intersect) return lookupMethod(data, axis, value);\n        else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === \"function\" && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\nfunction $143c3a913eb38704$var$evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index: index, data: data } = metasets[i];\n        const { lo: lo, hi: hi } = $143c3a913eb38704$var$binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) handler(element, index, j);\n        }\n    }\n}\nfunction $143c3a913eb38704$var$getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf(\"x\") !== -1;\n    const useY = axis.indexOf(\"y\") !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\nfunction $143c3a913eb38704$var$getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) return items;\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !(0, $iUM1U.C)(element, chart.chartArea, 0)) return;\n        if (element.inRange(position.x, position.y, useFinalPosition)) items.push({\n            element: element,\n            datasetIndex: datasetIndex,\n            index: index\n        });\n    };\n    $143c3a913eb38704$var$evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\nfunction $143c3a913eb38704$var$getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle: startAngle, endAngle: endAngle } = element.getProps([\n            \"startAngle\",\n            \"endAngle\"\n        ], useFinalPosition);\n        const { angle: angle } = (0, $iUM1U.D)(element, {\n            x: position.x,\n            y: position.y\n        });\n        if ((0, $iUM1U.p)(angle, startAngle, endAngle)) items.push({\n            element: element,\n            datasetIndex: datasetIndex,\n            index: index\n        });\n    }\n    $143c3a913eb38704$var$evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\nfunction $143c3a913eb38704$var$getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = $143c3a913eb38704$var$getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) return;\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) return;\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element: element,\n                    datasetIndex: datasetIndex,\n                    index: index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) items.push({\n            element: element,\n            datasetIndex: datasetIndex,\n            index: index\n        });\n    }\n    $143c3a913eb38704$var$evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\nfunction $143c3a913eb38704$var$getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) return [];\n    return axis === \"r\" && !intersect ? $143c3a913eb38704$var$getNearestRadialItems(chart, position, axis, useFinalPosition) : $143c3a913eb38704$var$getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction $143c3a913eb38704$var$getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === \"x\" ? \"inXRange\" : \"inYRange\";\n    let intersectsItem = false;\n    $143c3a913eb38704$var$evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element: element,\n                datasetIndex: datasetIndex,\n                index: index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) return [];\n    return items;\n}\nvar $143c3a913eb38704$export$a13296960cae0384 = {\n    evaluateInteractionItems: $143c3a913eb38704$var$evaluateInteractionItems,\n    modes: {\n        index (chart, e, options, useFinalPosition) {\n            const position = (0, $iUM1U.z)(e, chart);\n            const axis = options.axis || \"x\";\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? $143c3a913eb38704$var$getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : $143c3a913eb38704$var$getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) return [];\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) elements.push({\n                    element: element,\n                    datasetIndex: meta.index,\n                    index: index\n                });\n            });\n            return elements;\n        },\n        dataset (chart, e, options, useFinalPosition) {\n            const position = (0, $iUM1U.z)(e, chart);\n            const axis = options.axis || \"xy\";\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? $143c3a913eb38704$var$getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : $143c3a913eb38704$var$getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i)items.push({\n                    element: data[i],\n                    datasetIndex: datasetIndex,\n                    index: i\n                });\n            }\n            return items;\n        },\n        point (chart, e, options, useFinalPosition) {\n            const position = (0, $iUM1U.z)(e, chart);\n            const axis = options.axis || \"xy\";\n            const includeInvisible = options.includeInvisible || false;\n            return $143c3a913eb38704$var$getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n        nearest (chart, e, options, useFinalPosition) {\n            const position = (0, $iUM1U.z)(e, chart);\n            const axis = options.axis || \"xy\";\n            const includeInvisible = options.includeInvisible || false;\n            return $143c3a913eb38704$var$getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n        x (chart, e, options, useFinalPosition) {\n            const position = (0, $iUM1U.z)(e, chart);\n            return $143c3a913eb38704$var$getAxisItems(chart, position, \"x\", options.intersect, useFinalPosition);\n        },\n        y (chart, e, options, useFinalPosition) {\n            const position = (0, $iUM1U.z)(e, chart);\n            return $143c3a913eb38704$var$getAxisItems(chart, position, \"y\", options.intersect, useFinalPosition);\n        }\n    }\n};\nconst $143c3a913eb38704$var$STATIC_POSITIONS = [\n    \"left\",\n    \"top\",\n    \"right\",\n    \"bottom\"\n];\nfunction $143c3a913eb38704$var$filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction $143c3a913eb38704$var$filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>$143c3a913eb38704$var$STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction $143c3a913eb38704$var$sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction $143c3a913eb38704$var$wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos, options: { stack: stack, stackWeight: stackWeight = 1 } } = box);\n        layoutBoxes.push({\n            index: i,\n            box: box,\n            pos: pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight: stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction $143c3a913eb38704$var$buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack: stack, pos: pos, stackWeight: stackWeight } = wrap;\n        if (!stack || !$143c3a913eb38704$var$STATIC_POSITIONS.includes(pos)) continue;\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\nfunction $143c3a913eb38704$var$setLayoutDims(layouts, params) {\n    const stacks = $143c3a913eb38704$var$buildStacks(layouts);\n    const { vBoxMaxWidth: vBoxMaxWidth, hBoxMaxHeight: hBoxMaxHeight } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize: fullSize } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction $143c3a913eb38704$var$buildLayoutBoxes(boxes) {\n    const layoutBoxes = $143c3a913eb38704$var$wrapBoxes(boxes);\n    const fullSize = $143c3a913eb38704$var$sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = $143c3a913eb38704$var$sortByWeight($143c3a913eb38704$var$filterByPosition(layoutBoxes, \"left\"), true);\n    const right = $143c3a913eb38704$var$sortByWeight($143c3a913eb38704$var$filterByPosition(layoutBoxes, \"right\"));\n    const top = $143c3a913eb38704$var$sortByWeight($143c3a913eb38704$var$filterByPosition(layoutBoxes, \"top\"), true);\n    const bottom = $143c3a913eb38704$var$sortByWeight($143c3a913eb38704$var$filterByPosition(layoutBoxes, \"bottom\"));\n    const centerHorizontal = $143c3a913eb38704$var$filterDynamicPositionByAxis(layoutBoxes, \"x\");\n    const centerVertical = $143c3a913eb38704$var$filterDynamicPositionByAxis(layoutBoxes, \"y\");\n    return {\n        fullSize: fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: $143c3a913eb38704$var$filterByPosition(layoutBoxes, \"chartArea\"),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction $143c3a913eb38704$var$getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction $143c3a913eb38704$var$updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction $143c3a913eb38704$var$updateDims(chartArea, params, layout, stacks) {\n    const { pos: pos, box: box } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!(0, $iUM1U.i)(pos)) {\n        if (layout.size) chartArea[pos] -= layout.size;\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) $143c3a913eb38704$var$updateMaxPadding(maxPadding, box.getPadding());\n    const newWidth = Math.max(0, params.outerWidth - $143c3a913eb38704$var$getCombinedMax(maxPadding, chartArea, \"left\", \"right\"));\n    const newHeight = Math.max(0, params.outerHeight - $143c3a913eb38704$var$getCombinedMax(maxPadding, chartArea, \"top\", \"bottom\"));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction $143c3a913eb38704$var$handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos(\"top\");\n    chartArea.x += updatePos(\"left\");\n    updatePos(\"right\");\n    updatePos(\"bottom\");\n}\nfunction $143c3a913eb38704$var$getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        \"left\",\n        \"right\"\n    ]) : marginForPositions([\n        \"top\",\n        \"bottom\"\n    ]);\n}\nfunction $143c3a913eb38704$var$fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, $143c3a913eb38704$var$getMargins(layout.horizontal, chartArea));\n        const { same: same, other: other } = $143c3a913eb38704$var$updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) refitBoxes.push(layout);\n    }\n    return refit && $143c3a913eb38704$var$fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction $143c3a913eb38704$var$setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction $143c3a913eb38704$var$placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x: x, y: y } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if ((0, $iUM1U.h)(stack.start)) y = stack.start;\n            if (box.fullSize) $143c3a913eb38704$var$setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            else $143c3a913eb38704$var$setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if ((0, $iUM1U.h)(stack.start)) x = stack.start;\n            if (box.fullSize) $143c3a913eb38704$var$setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            else $143c3a913eb38704$var$setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar $143c3a913eb38704$export$1ecca0613f5e56d2 = {\n    addBox (chart, item) {\n        if (!chart.boxes) chart.boxes = [];\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || \"top\";\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n    removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) chart.boxes.splice(index, 1);\n    },\n    configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n    update (chart, width, height, minPadding) {\n        if (!chart) return;\n        const padding = (0, $iUM1U.E)(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = $143c3a913eb38704$var$buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        (0, $iUM1U.F)(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === \"function\") box.beforeLayout();\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding: padding,\n            availableWidth: availableWidth,\n            availableHeight: availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        $143c3a913eb38704$var$updateMaxPadding(maxPadding, (0, $iUM1U.E)(minPadding));\n        const chartArea = Object.assign({\n            maxPadding: maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = $143c3a913eb38704$var$setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        $143c3a913eb38704$var$fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        $143c3a913eb38704$var$fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if ($143c3a913eb38704$var$fitBoxes(horizontalBoxes, chartArea, params, stacks)) $143c3a913eb38704$var$fitBoxes(verticalBoxes, chartArea, params, stacks);\n        $143c3a913eb38704$var$handleMaxPadding(chartArea);\n        $143c3a913eb38704$var$placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        $143c3a913eb38704$var$placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        (0, $iUM1U.F)(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\nclass $143c3a913eb38704$export$7b1aeb87f31f7da8 {\n    acquireContext(canvas, aspectRatio) {}\n    releaseContext(context) {\n        return false;\n    }\n    addEventListener(chart, type, listener) {}\n    removeEventListener(chart, type, listener) {}\n    getDevicePixelRatio() {\n        return 1;\n    }\n    getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width: width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n    isAttached(canvas) {\n        return true;\n    }\n    updateConfig(config) {}\n}\nclass $143c3a913eb38704$export$a40a96b24b46cf35 extends $143c3a913eb38704$export$7b1aeb87f31f7da8 {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext(\"2d\") || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\nconst $143c3a913eb38704$var$EXPANDO_KEY = \"$chartjs\";\nconst $143c3a913eb38704$var$EVENT_TYPES = {\n    touchstart: \"mousedown\",\n    touchmove: \"mousemove\",\n    touchend: \"mouseup\",\n    pointerenter: \"mouseenter\",\n    pointerdown: \"mousedown\",\n    pointermove: \"mousemove\",\n    pointerup: \"mouseup\",\n    pointerleave: \"mouseout\",\n    pointerout: \"mouseout\"\n};\nconst $143c3a913eb38704$var$isNullOrEmpty = (value)=>value === null || value === \"\";\nfunction $143c3a913eb38704$var$initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute(\"height\");\n    const renderWidth = canvas.getAttribute(\"width\");\n    canvas[$143c3a913eb38704$var$EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || \"block\";\n    style.boxSizing = style.boxSizing || \"border-box\";\n    if ($143c3a913eb38704$var$isNullOrEmpty(renderWidth)) {\n        const displayWidth = (0, $iUM1U.J)(canvas, \"width\");\n        if (displayWidth !== undefined) canvas.width = displayWidth;\n    }\n    if ($143c3a913eb38704$var$isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === \"\") canvas.height = canvas.width / (aspectRatio || 2);\n        else {\n            const displayHeight = (0, $iUM1U.J)(canvas, \"height\");\n            if (displayHeight !== undefined) canvas.height = displayHeight;\n        }\n    }\n    return canvas;\n}\nconst $143c3a913eb38704$var$eventListenerOptions = (0, $iUM1U.K) ? {\n    passive: true\n} : false;\nfunction $143c3a913eb38704$var$addListener(node, type, listener) {\n    node.addEventListener(type, listener, $143c3a913eb38704$var$eventListenerOptions);\n}\nfunction $143c3a913eb38704$var$removeListener(chart, type, listener) {\n    chart.canvas.removeEventListener(type, listener, $143c3a913eb38704$var$eventListenerOptions);\n}\nfunction $143c3a913eb38704$var$fromNativeEvent(event, chart) {\n    const type = $143c3a913eb38704$var$EVENT_TYPES[event.type] || event.type;\n    const { x: x, y: y } = (0, $iUM1U.z)(event, chart);\n    return {\n        type: type,\n        chart: chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction $143c3a913eb38704$var$nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) return true;\n    }\n}\nfunction $143c3a913eb38704$var$createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || $143c3a913eb38704$var$nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !$143c3a913eb38704$var$nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) listener();\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction $143c3a913eb38704$var$createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || $143c3a913eb38704$var$nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !$143c3a913eb38704$var$nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) listener();\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst $143c3a913eb38704$var$drpListeningCharts = new Map();\nlet $143c3a913eb38704$var$oldDevicePixelRatio = 0;\nfunction $143c3a913eb38704$var$onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === $143c3a913eb38704$var$oldDevicePixelRatio) return;\n    $143c3a913eb38704$var$oldDevicePixelRatio = dpr;\n    $143c3a913eb38704$var$drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) resize();\n    });\n}\nfunction $143c3a913eb38704$var$listenDevicePixelRatioChanges(chart, resize) {\n    if (!$143c3a913eb38704$var$drpListeningCharts.size) window.addEventListener(\"resize\", $143c3a913eb38704$var$onWindowResize);\n    $143c3a913eb38704$var$drpListeningCharts.set(chart, resize);\n}\nfunction $143c3a913eb38704$var$unlistenDevicePixelRatioChanges(chart) {\n    $143c3a913eb38704$var$drpListeningCharts.delete(chart);\n    if (!$143c3a913eb38704$var$drpListeningCharts.size) window.removeEventListener(\"resize\", $143c3a913eb38704$var$onWindowResize);\n}\nfunction $143c3a913eb38704$var$createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && (0, $iUM1U.I)(canvas);\n    if (!container) return;\n    const resize = (0, $iUM1U.L)((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) listener();\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) return;\n        resize(width, height);\n    });\n    observer.observe(container);\n    $143c3a913eb38704$var$listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction $143c3a913eb38704$var$releaseObserver(chart, type, observer) {\n    if (observer) observer.disconnect();\n    if (type === \"resize\") $143c3a913eb38704$var$unlistenDevicePixelRatioChanges(chart);\n}\nfunction $143c3a913eb38704$var$createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = (0, $iUM1U.L)((event)=>{\n        if (chart.ctx !== null) listener($143c3a913eb38704$var$fromNativeEvent(event, chart));\n    }, chart);\n    $143c3a913eb38704$var$addListener(canvas, type, proxy);\n    return proxy;\n}\nclass $143c3a913eb38704$export$f02da7f882cf6b2e extends $143c3a913eb38704$export$7b1aeb87f31f7da8 {\n    acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext(\"2d\");\n        if (context && context.canvas === canvas) {\n            $143c3a913eb38704$var$initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n    releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[$143c3a913eb38704$var$EXPANDO_KEY]) return false;\n        const initial = canvas[$143c3a913eb38704$var$EXPANDO_KEY].initial;\n        [\n            \"height\",\n            \"width\"\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if ((0, $iUM1U.k)(value)) canvas.removeAttribute(prop);\n            else canvas.setAttribute(prop, value);\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[$143c3a913eb38704$var$EXPANDO_KEY];\n        return true;\n    }\n    addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: $143c3a913eb38704$var$createAttachObserver,\n            detach: $143c3a913eb38704$var$createDetachObserver,\n            resize: $143c3a913eb38704$var$createResizeObserver\n        };\n        const handler = handlers[type] || $143c3a913eb38704$var$createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n    removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) return;\n        const handlers = {\n            attach: $143c3a913eb38704$var$releaseObserver,\n            detach: $143c3a913eb38704$var$releaseObserver,\n            resize: $143c3a913eb38704$var$releaseObserver\n        };\n        const handler = handlers[type] || $143c3a913eb38704$var$removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n    getMaximumSize(canvas, width, height, aspectRatio) {\n        return (0, $iUM1U.G)(canvas, width, height, aspectRatio);\n    }\n    isAttached(canvas) {\n        const container = (0, $iUM1U.I)(canvas);\n        return !!(container && container.isConnected);\n    }\n}\nfunction $143c3a913eb38704$export$72cd9e67b1b784f9(canvas) {\n    if (!(0, $iUM1U.M)() || typeof OffscreenCanvas !== \"undefined\" && canvas instanceof OffscreenCanvas) return $143c3a913eb38704$export$a40a96b24b46cf35;\n    return $143c3a913eb38704$export$f02da7f882cf6b2e;\n}\nclass $143c3a913eb38704$export$db77ccec0bb4ccac {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x: x, y: y } = this.getProps([\n            \"x\",\n            \"y\"\n        ], useFinalPosition);\n        return {\n            x: x,\n            y: y\n        };\n    }\n    hasValue() {\n        return (0, $iUM1U.x)(this.x) && (0, $iUM1U.x)(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) // let's not create an object, if not needed\n        return this;\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\nfunction $143c3a913eb38704$var$autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = $143c3a913eb38704$var$determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? $143c3a913eb38704$var$getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        $143c3a913eb38704$var$skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = $143c3a913eb38704$var$calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        $143c3a913eb38704$var$skip(ticks, newTicks, spacing, (0, $iUM1U.k)(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++)$143c3a913eb38704$var$skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        $143c3a913eb38704$var$skip(ticks, newTicks, spacing, last, (0, $iUM1U.k)(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    $143c3a913eb38704$var$skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction $143c3a913eb38704$var$determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction $143c3a913eb38704$var$calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = $143c3a913eb38704$var$getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) return Math.max(spacing, 1);\n    const factors = (0, $iUM1U.N)(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) return factor;\n    }\n    return Math.max(spacing, 1);\n}\nfunction $143c3a913eb38704$var$getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++)if (ticks[i].major) result.push(i);\n    return result;\n}\nfunction $143c3a913eb38704$var$skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++)if (i === next) {\n        newTicks.push(ticks[i]);\n        count++;\n        next = majorIndices[count * spacing];\n    }\n}\nfunction $143c3a913eb38704$var$skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = (0, $iUM1U.v)(majorStart, 0);\n    const end = Math.min((0, $iUM1U.v)(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++)if (i === next) {\n        newTicks.push(ticks[i]);\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n}\nfunction $143c3a913eb38704$var$getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) return false;\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) return false;\n    }\n    return diff;\n}\nconst $143c3a913eb38704$var$reverseAlign = (align)=>align === \"left\" ? \"right\" : align === \"right\" ? \"left\" : align;\nconst $143c3a913eb38704$var$offsetFromEdge = (scale, edge, offset)=>edge === \"top\" || edge === \"left\" ? scale[edge] + offset : scale[edge] - offset;\nconst $143c3a913eb38704$var$getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\nfunction $143c3a913eb38704$var$sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment)result.push(arr[Math.floor(i)]);\n    return result;\n}\nfunction $143c3a913eb38704$var$getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) offset = Math.max(lineValue - start, end - lineValue);\n        else if (index === 0) offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        else offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) return;\n    }\n    return lineValue;\n}\nfunction $143c3a913eb38704$var$garbageCollect(caches, length) {\n    (0, $iUM1U.F)(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i)delete cache.data[gc[i]];\n            gc.splice(0, gcLen);\n        }\n    });\n}\nfunction $143c3a913eb38704$var$getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\nfunction $143c3a913eb38704$var$getTitleHeight(options, fallback) {\n    if (!options.display) return 0;\n    const font = (0, $iUM1U.a0)(options.font, fallback);\n    const padding = (0, $iUM1U.E)(options.padding);\n    const lines = (0, $iUM1U.b)(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction $143c3a913eb38704$var$createScaleContext(parent, scale) {\n    return (0, $iUM1U.j)(parent, {\n        scale: scale,\n        type: \"scale\"\n    });\n}\nfunction $143c3a913eb38704$var$createTickContext(parent, index, tick) {\n    return (0, $iUM1U.j)(parent, {\n        tick: tick,\n        index: index,\n        type: \"tick\"\n    });\n}\nfunction $143c3a913eb38704$var$titleAlign(align, position, reverse) {\n    let ret = (0, $iUM1U.a1)(align);\n    if (reverse && position !== \"right\" || !reverse && position === \"right\") ret = $143c3a913eb38704$var$reverseAlign(ret);\n    return ret;\n}\nfunction $143c3a913eb38704$var$titleArgs(scale, offset, position, align) {\n    const { top: top, left: left, bottom: bottom, right: right, chart: chart } = scale;\n    const { chartArea: chartArea, scales: scales } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = (0, $iUM1U.a2)(align, left, right);\n        if ((0, $iUM1U.i)(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === \"center\") titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        else titleY = $143c3a913eb38704$var$offsetFromEdge(scale, position, offset);\n        maxWidth = right - left;\n    } else {\n        if ((0, $iUM1U.i)(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === \"center\") titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        else titleX = $143c3a913eb38704$var$offsetFromEdge(scale, position, offset);\n        titleY = (0, $iUM1U.a2)(align, bottom, top);\n        rotation = position === \"left\" ? -(0, $iUM1U.H) : (0, $iUM1U.H);\n    }\n    return {\n        titleX: titleX,\n        titleY: titleY,\n        maxWidth: maxWidth,\n        rotation: rotation\n    };\n}\nclass $143c3a913eb38704$export$d60cfc58d3c358b6 extends $143c3a913eb38704$export$db77ccec0bb4ccac {\n    constructor(cfg){\n        super();\n        this.id = cfg.id;\n        this.type = cfg.type;\n        this.options = undefined;\n        this.ctx = cfg.ctx;\n        this.chart = cfg.chart;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n        this.maxWidth = undefined;\n        this.maxHeight = undefined;\n        this.paddingTop = undefined;\n        this.paddingBottom = undefined;\n        this.paddingLeft = undefined;\n        this.paddingRight = undefined;\n        this.axis = undefined;\n        this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n        this.ticks = [];\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n        this._startPixel = undefined;\n        this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n    init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n    parse(raw, index) {\n        return raw;\n    }\n    getUserBounds() {\n        let { _userMin: _userMin, _userMax: _userMax, _suggestedMin: _suggestedMin, _suggestedMax: _suggestedMax } = this;\n        _userMin = (0, $iUM1U.O)(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = (0, $iUM1U.O)(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = (0, $iUM1U.O)(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = (0, $iUM1U.O)(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: (0, $iUM1U.O)(_userMin, _suggestedMin),\n            max: (0, $iUM1U.O)(_userMax, _suggestedMax),\n            minDefined: (0, $iUM1U.g)(_userMin),\n            maxDefined: (0, $iUM1U.g)(_userMax)\n        };\n    }\n    getMinMax(canStack) {\n        let { min: min, max: max, minDefined: minDefined, maxDefined: maxDefined } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) return {\n            min: min,\n            max: max\n        };\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) min = Math.min(min, range.min);\n            if (!maxDefined) max = Math.max(max, range.max);\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: (0, $iUM1U.O)(min, (0, $iUM1U.O)(max, min)),\n            max: (0, $iUM1U.O)(max, (0, $iUM1U.O)(min, max))\n        };\n    }\n    getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n    getTicks() {\n        return this.ticks;\n    }\n    getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n    getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        (0, $iUM1U.Q)(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n    update(maxWidth, maxHeight, margins) {\n        const { beginAtZero: beginAtZero, grace: grace, ticks: tickOpts } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = (0, $iUM1U.R)(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? $143c3a913eb38704$var$sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === \"auto\")) {\n            this.ticks = $143c3a913eb38704$var$autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) this._convertTicksToLabels(this.ticks);\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n    configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        (0, $iUM1U.Q)(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        (0, $iUM1U.Q)(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        (0, $iUM1U.Q)(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        (0, $iUM1U.Q)(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks(\"beforeDataLimits\");\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks(\"afterDataLimits\");\n    }\n    beforeBuildTicks() {\n        this._callHooks(\"beforeBuildTicks\");\n    }\n    buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks(\"afterBuildTicks\");\n    }\n    beforeTickToLabelConversion() {\n        (0, $iUM1U.Q)(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n    generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = (0, $iUM1U.Q)(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        (0, $iUM1U.Q)(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        (0, $iUM1U.Q)(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = $143c3a913eb38704$var$getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = (0, $iUM1U.S)(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - $143c3a913eb38704$var$getTickMarkLength(options.grid) - tickOpts.padding - $143c3a913eb38704$var$getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = (0, $iUM1U.U)(Math.min(Math.asin((0, $iUM1U.S)((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin((0, $iUM1U.S)(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin((0, $iUM1U.S)(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        (0, $iUM1U.Q)(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        (0, $iUM1U.Q)(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart: chart, options: { ticks: tickOpts, title: titleOpts, grid: gridOpts } } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = $143c3a913eb38704$var$getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = $143c3a913eb38704$var$getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = $143c3a913eb38704$var$getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first: first, last: last, widest: widest, highest: highest } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = (0, $iUM1U.t)(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align: align, padding: padding }, position: position } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== \"top\" && this.axis === \"x\";\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === \"start\") paddingRight = last.width;\n            else if (align === \"end\") paddingLeft = first.width;\n            else if (align !== \"inner\") {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === \"start\") {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === \"end\") {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n    _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        (0, $iUM1U.Q)(this.options.afterFit, [\n            this\n        ]);\n    }\n    isHorizontal() {\n        const { axis: axis, position: position } = this.options;\n        return position === \"top\" || position === \"bottom\" || axis === \"x\";\n    }\n    isFullSize() {\n        return this.options.fullSize;\n    }\n    _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++)if ((0, $iUM1U.k)(ticks[i].label)) {\n            ticks.splice(i, 1);\n            ilen--;\n            i--;\n        }\n        this.afterTickToLabelConversion();\n    }\n    _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) ticks = $143c3a913eb38704$var$sample(ticks, sampleSize);\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n    _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx: ctx, _longestTextCache: caches } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / $143c3a913eb38704$var$getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!(0, $iUM1U.k)(label) && !(0, $iUM1U.b)(label)) {\n                width = (0, $iUM1U.V)(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if ((0, $iUM1U.b)(label)) for(j = 0, jlen = label.length; j < jlen; ++j){\n                nestedLabel = label[j];\n                if (!(0, $iUM1U.k)(nestedLabel) && !(0, $iUM1U.b)(nestedLabel)) {\n                    width = (0, $iUM1U.V)(ctx, cache.data, cache.gc, width, nestedLabel);\n                    height += lineHeight;\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        $143c3a913eb38704$var$garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths: widths,\n            heights: heights\n        };\n    }\n    getLabelForValue(value) {\n        return value;\n    }\n    getPixelForValue(value, index) {\n        return NaN;\n    }\n    getValueForPixel(pixel) {}\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) return null;\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getPixelForDecimal(decimal) {\n        if (this._reversePixels) decimal = 1 - decimal;\n        const pixel = this._startPixel + decimal * this._length;\n        return (0, $iUM1U.W)(this._alignToPixels ? (0, $iUM1U.X)(this.chart, pixel, 0) : pixel);\n    }\n    getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n    getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n    getBaseValue() {\n        const { min: min, max: max } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n    getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = $143c3a913eb38704$var$createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = $143c3a913eb38704$var$createScaleContext(this.chart.getContext(), this));\n    }\n    _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = (0, $iUM1U.t)(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n    _isVisible() {\n        const display = this.options.display;\n        if (display !== \"auto\") return !!display;\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n    _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid: grid, position: position, border: border } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = $143c3a913eb38704$var$getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return (0, $iUM1U.X)(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === \"top\") {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === \"bottom\") {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === \"left\") {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === \"right\") {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === \"x\") {\n            if (position === \"center\") borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            else if ((0, $iUM1U.i)(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === \"y\") {\n            if (position === \"center\") borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            else if ((0, $iUM1U.i)(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = (0, $iUM1U.v)(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = $143c3a913eb38704$var$getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) continue;\n            alignedLineValue = (0, $iUM1U.X)(chart, lineValue, lineWidth);\n            if (isHorizontal) tx1 = tx2 = x1 = x2 = alignedLineValue;\n            else ty1 = ty2 = y1 = y2 = alignedLineValue;\n            items.push({\n                tx1: tx1,\n                ty1: ty1,\n                tx2: tx2,\n                ty2: ty2,\n                x1: x1,\n                y1: y1,\n                x2: x2,\n                y2: y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash: borderDash,\n                borderDashOffset: borderDashOffset,\n                tickWidth: tickWidth,\n                tickColor: tickColor,\n                tickBorderDash: tickBorderDash,\n                tickBorderDashOffset: tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n    _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position: position, ticks: optionTicks } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align: align, crossAlign: crossAlign, padding: padding, mirror: mirror } = optionTicks;\n        const tl = $143c3a913eb38704$var$getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -(0, $iUM1U.t)(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = \"middle\";\n        if (position === \"top\") {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === \"bottom\") {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === \"left\") {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === \"right\") {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === \"x\") {\n            if (position === \"center\") y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            else if ((0, $iUM1U.i)(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === \"y\") {\n            if (position === \"center\") x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            else if ((0, $iUM1U.i)(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === \"y\") {\n            if (align === \"start\") textBaseline = \"top\";\n            else if (align === \"end\") textBaseline = \"bottom\";\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = (0, $iUM1U.b)(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === \"inner\") {\n                    if (i === ilen - 1) tickTextAlign = !this.options.reverse ? \"right\" : \"left\";\n                    else if (i === 0) tickTextAlign = !this.options.reverse ? \"left\" : \"right\";\n                    else tickTextAlign = \"center\";\n                }\n                if (position === \"top\") {\n                    if (crossAlign === \"near\" || rotation !== 0) textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    else if (crossAlign === \"center\") textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    else textOffset = -labelSizes.highest.height + lineHeight / 2;\n                } else {\n                    if (crossAlign === \"near\" || rotation !== 0) textOffset = lineHeight / 2;\n                    else if (crossAlign === \"center\") textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    else textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                }\n                if (mirror) textOffset *= -1;\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) x += lineHeight / 2 * Math.sin(rotation);\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = (0, $iUM1U.E)(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case \"middle\":\n                        top -= height / 2;\n                        break;\n                    case \"bottom\":\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case \"center\":\n                        left -= width / 2;\n                        break;\n                    case \"right\":\n                        left -= width;\n                        break;\n                }\n                backdrop = {\n                    left: left,\n                    top: top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label: label,\n                font: font,\n                textOffset: textOffset,\n                options: {\n                    rotation: rotation,\n                    color: color,\n                    strokeColor: strokeColor,\n                    strokeWidth: strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline: textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop: backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position: position, ticks: ticks } = this.options;\n        const rotation = -(0, $iUM1U.t)(this.labelRotation);\n        if (rotation) return position === \"top\" ? \"left\" : \"right\";\n        let align = \"center\";\n        if (ticks.align === \"start\") align = \"left\";\n        else if (ticks.align === \"end\") align = \"right\";\n        else if (ticks.align === \"inner\") align = \"inner\";\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position: position, ticks: { crossAlign: crossAlign, mirror: mirror, padding: padding } } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === \"left\") {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === \"near\") textAlign = \"left\";\n                else if (crossAlign === \"center\") {\n                    textAlign = \"center\";\n                    x += widest / 2;\n                } else {\n                    textAlign = \"right\";\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === \"near\") textAlign = \"right\";\n                else if (crossAlign === \"center\") {\n                    textAlign = \"center\";\n                    x -= widest / 2;\n                } else {\n                    textAlign = \"left\";\n                    x = this.left;\n                }\n            }\n        } else if (position === \"right\") {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === \"near\") textAlign = \"right\";\n                else if (crossAlign === \"center\") {\n                    textAlign = \"center\";\n                    x -= widest / 2;\n                } else {\n                    textAlign = \"left\";\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === \"near\") textAlign = \"left\";\n                else if (crossAlign === \"center\") {\n                    textAlign = \"center\";\n                    x += widest / 2;\n                } else {\n                    textAlign = \"right\";\n                    x = this.right;\n                }\n            }\n        } else textAlign = \"right\";\n        return {\n            textAlign: textAlign,\n            x: x\n        };\n    }\n    _computeLabelArea() {\n        if (this.options.ticks.mirror) return;\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === \"left\" || position === \"right\") return {\n            top: 0,\n            left: this.left,\n            bottom: chart.height,\n            right: this.right\n        };\n        if (position === \"top\" || position === \"bottom\") return {\n            top: this.top,\n            left: 0,\n            bottom: this.bottom,\n            right: chart.width\n        };\n    }\n    drawBackground() {\n        const { ctx: ctx, options: { backgroundColor: backgroundColor }, left: left, top: top, width: width, height: height } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) return 0;\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n    drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) return;\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) for(i = 0, ilen = items.length; i < ilen; ++i){\n            const item = items[i];\n            if (grid.drawOnChartArea) drawLine({\n                x: item.x1,\n                y: item.y1\n            }, {\n                x: item.x2,\n                y: item.y2\n            }, item);\n            if (grid.drawTicks) drawLine({\n                x: item.tx1,\n                y: item.ty1\n            }, {\n                x: item.tx2,\n                y: item.ty2\n            }, {\n                color: item.tickColor,\n                width: item.tickWidth,\n                borderDash: item.tickBorderDash,\n                borderDashOffset: item.tickBorderDashOffset\n            });\n        }\n    }\n    drawBorder() {\n        const { chart: chart, ctx: ctx, options: { border: border, grid: grid } } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) return;\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = (0, $iUM1U.X)(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = (0, $iUM1U.X)(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = (0, $iUM1U.X)(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = (0, $iUM1U.X)(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n    drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) return;\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) (0, $iUM1U.Y)(ctx, area);\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            (0, $iUM1U.Z)(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) (0, $iUM1U.$)(ctx);\n    }\n    drawTitle() {\n        const { ctx: ctx, options: { position: position, title: title, reverse: reverse } } = this;\n        if (!title.display) return;\n        const font = (0, $iUM1U.a0)(title.font);\n        const padding = (0, $iUM1U.E)(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === \"bottom\" || position === \"center\" || (0, $iUM1U.i)(position)) {\n            offset += padding.bottom;\n            if ((0, $iUM1U.b)(title.text)) offset += font.lineHeight * (title.text.length - 1);\n        } else offset += padding.top;\n        const { titleX: titleX, titleY: titleY, maxWidth: maxWidth, rotation: rotation } = $143c3a913eb38704$var$titleArgs(this, offset, position, align);\n        (0, $iUM1U.Z)(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth: maxWidth,\n            rotation: rotation,\n            textAlign: $143c3a913eb38704$var$titleAlign(align, position, reverse),\n            textBaseline: \"middle\",\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) return;\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n    _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = (0, $iUM1U.v)(opts.grid && opts.grid.z, -1);\n        const bz = (0, $iUM1U.v)(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== $143c3a913eb38704$export$d60cfc58d3c358b6.prototype.draw) return [\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.draw(chartArea);\n                }\n            }\n        ];\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n    getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + \"AxisID\";\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) result.push(meta);\n        }\n        return result;\n    }\n    _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return (0, $iUM1U.a0)(opts.font);\n    }\n    _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\nclass $143c3a913eb38704$var$TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n    register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if ($143c3a913eb38704$var$isIChartComponent(proto)) parentScope = this.register(proto);\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + \".\" + id;\n        if (!id) throw new Error(\"class does not have id: \" + item);\n        if (id in items) return scope;\n        items[id] = item;\n        $143c3a913eb38704$var$registerDefaults(item, scope, parentScope);\n        if (this.override) (0, $iUM1U.d).override(item.id, item.overrides);\n        return scope;\n    }\n    get(id) {\n        return this.items[id];\n    }\n    unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) delete items[id];\n        if (scope && id in (0, $iUM1U.d)[scope]) {\n            delete (0, $iUM1U.d)[scope][id];\n            if (this.override) delete (0, $iUM1U.a3)[id];\n        }\n    }\n}\nfunction $143c3a913eb38704$var$registerDefaults(item, scope, parentScope) {\n    const itemDefaults = (0, $iUM1U.a4)(Object.create(null), [\n        parentScope ? (0, $iUM1U.d).get(parentScope) : {},\n        (0, $iUM1U.d).get(scope),\n        item.defaults\n    ]);\n    (0, $iUM1U.d).set(scope, itemDefaults);\n    if (item.defaultRoutes) $143c3a913eb38704$var$routeDefaults(scope, item.defaultRoutes);\n    if (item.descriptors) (0, $iUM1U.d).describe(scope, item.descriptors);\n}\nfunction $143c3a913eb38704$var$routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split(\".\");\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join(\".\");\n        const parts = routes[property].split(\".\");\n        const targetName = parts.pop();\n        const targetScope = parts.join(\".\");\n        (0, $iUM1U.d).route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction $143c3a913eb38704$var$isIChartComponent(proto) {\n    return \"id\" in proto && \"defaults\" in proto;\n}\nclass $143c3a913eb38704$var$Registry {\n    constructor(){\n        this.controllers = new $143c3a913eb38704$var$TypedRegistry($143c3a913eb38704$export$75572ec5c55b4048, \"datasets\", true);\n        this.elements = new $143c3a913eb38704$var$TypedRegistry($143c3a913eb38704$export$db77ccec0bb4ccac, \"elements\");\n        this.plugins = new $143c3a913eb38704$var$TypedRegistry(Object, \"plugins\");\n        this.scales = new $143c3a913eb38704$var$TypedRegistry($143c3a913eb38704$export$d60cfc58d3c358b6, \"scales\");\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n    add(...args) {\n        this._each(\"register\", args);\n    }\n    remove(...args) {\n        this._each(\"unregister\", args);\n    }\n    addControllers(...args) {\n        this._each(\"register\", args, this.controllers);\n    }\n    addElements(...args) {\n        this._each(\"register\", args, this.elements);\n    }\n    addPlugins(...args) {\n        this._each(\"register\", args, this.plugins);\n    }\n    addScales(...args) {\n        this._each(\"register\", args, this.scales);\n    }\n    getController(id) {\n        return this._get(id, this.controllers, \"controller\");\n    }\n    getElement(id) {\n        return this._get(id, this.elements, \"element\");\n    }\n    getPlugin(id) {\n        return this._get(id, this.plugins, \"plugin\");\n    }\n    getScale(id) {\n        return this._get(id, this.scales, \"scale\");\n    }\n    removeControllers(...args) {\n        this._each(\"unregister\", args, this.controllers);\n    }\n    removeElements(...args) {\n        this._each(\"unregister\", args, this.elements);\n    }\n    removePlugins(...args) {\n        this._each(\"unregister\", args, this.plugins);\n    }\n    removeScales(...args) {\n        this._each(\"unregister\", args, this.scales);\n    }\n    _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) this._exec(method, reg, arg);\n            else (0, $iUM1U.F)(arg, (item)=>{\n                const itemReg = typedRegistry || this._getRegistryForType(item);\n                this._exec(method, itemReg, item);\n            });\n        });\n    }\n    _exec(method, registry, component) {\n        const camelMethod = (0, $iUM1U.a5)(method);\n        (0, $iUM1U.Q)(component[\"before\" + camelMethod], [], component);\n        registry[method](component);\n        (0, $iUM1U.Q)(component[\"after\" + camelMethod], [], component);\n    }\n    _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) return reg;\n        }\n        return this.plugins;\n    }\n    _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) throw new Error('\"' + id + '\" is not a registered ' + type + \".\");\n        return item;\n    }\n}\nvar $143c3a913eb38704$export$4bb7493d241fd8a5 = /* #__PURE__ */ new $143c3a913eb38704$var$Registry();\nclass $143c3a913eb38704$var$PluginService {\n    constructor(){\n        this._init = [];\n    }\n    notify(chart, hook, args, filter) {\n        if (hook === \"beforeInit\") {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, \"install\");\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === \"afterDestroy\") {\n            this._notify(descriptors, chart, \"stop\");\n            this._notify(this._init, chart, \"uninstall\");\n        }\n        return result;\n    }\n    _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if ((0, $iUM1U.Q)(method, params, plugin) === false && args.cancelable) return false;\n        }\n        return true;\n    }\n    invalidate() {\n        if (!(0, $iUM1U.k)(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n    _descriptors(chart) {\n        if (this._cache) return this._cache;\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = (0, $iUM1U.v)(config.options && config.options.plugins, {});\n        const plugins = $143c3a913eb38704$var$allPlugins(config);\n        return options === false && !all ? [] : $143c3a913eb38704$var$createDescriptors(chart, plugins, options, all);\n    }\n    _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, \"stop\");\n        this._notify(diff(descriptors, previousDescriptors), chart, \"start\");\n    }\n}\nfunction $143c3a913eb38704$var$allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys($143c3a913eb38704$export$4bb7493d241fd8a5.plugins.items);\n    for(let i = 0; i < keys.length; i++)plugins.push($143c3a913eb38704$export$4bb7493d241fd8a5.getPlugin(keys[i]));\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins: plugins,\n        localIds: localIds\n    };\n}\nfunction $143c3a913eb38704$var$getOpts(options, all) {\n    if (!all && options === false) return null;\n    if (options === true) return {};\n    return options;\n}\nfunction $143c3a913eb38704$var$createDescriptors(chart, { plugins: plugins, localIds: localIds }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = $143c3a913eb38704$var$getOpts(options[id], all);\n        if (opts === null) continue;\n        result.push({\n            plugin: plugin,\n            options: $143c3a913eb38704$var$pluginOpts(chart.config, {\n                plugin: plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction $143c3a913eb38704$var$pluginOpts(config, { plugin: plugin, local: local }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) scopes.push(plugin.defaults);\n    return config.createResolver(scopes, context, [\n        \"\"\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\nfunction $143c3a913eb38704$var$getIndexAxis(type, options) {\n    const datasetDefaults = (0, $iUM1U.d).datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || \"x\";\n}\nfunction $143c3a913eb38704$var$getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === \"_index_\") axis = indexAxis;\n    else if (id === \"_value_\") axis = indexAxis === \"x\" ? \"y\" : \"x\";\n    return axis;\n}\nfunction $143c3a913eb38704$var$getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? \"_index_\" : \"_value_\";\n}\nfunction $143c3a913eb38704$var$idMatchesAxis(id) {\n    if (id === \"x\" || id === \"y\" || id === \"r\") return id;\n}\nfunction $143c3a913eb38704$var$axisFromPosition(position) {\n    if (position === \"top\" || position === \"bottom\") return \"x\";\n    if (position === \"left\" || position === \"right\") return \"y\";\n}\nfunction $143c3a913eb38704$var$determineAxis(id, ...scaleOptions) {\n    if ($143c3a913eb38704$var$idMatchesAxis(id)) return id;\n    for (const opts of scaleOptions){\n        const axis = opts.axis || $143c3a913eb38704$var$axisFromPosition(opts.position) || id.length > 1 && $143c3a913eb38704$var$idMatchesAxis(id[0].toLowerCase());\n        if (axis) return axis;\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction $143c3a913eb38704$var$getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + \"AxisID\"] === id) return {\n        axis: axis\n    };\n}\nfunction $143c3a913eb38704$var$retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) return $143c3a913eb38704$var$getAxisFromDataset(id, \"x\", boundDs[0]) || $143c3a913eb38704$var$getAxisFromDataset(id, \"y\", boundDs[0]);\n    }\n    return {};\n}\nfunction $143c3a913eb38704$var$mergeScaleConfig(config, options) {\n    const chartDefaults = (0, $iUM1U.a3)[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = $143c3a913eb38704$var$getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!(0, $iUM1U.i)(scaleConf)) return console.error(`Invalid scale configuration for scale: ${id}`);\n        if (scaleConf._proxy) return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        const axis = $143c3a913eb38704$var$determineAxis(id, scaleConf, $143c3a913eb38704$var$retrieveAxisFromDatasets(id, config), (0, $iUM1U.d).scales[scaleConf.type]);\n        const defaultId = $143c3a913eb38704$var$getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = (0, $iUM1U.ab)(Object.create(null), [\n            {\n                axis: axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || $143c3a913eb38704$var$getIndexAxis(type, options);\n        const datasetDefaults = (0, $iUM1U.a3)[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = $143c3a913eb38704$var$getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + \"AxisID\"] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            (0, $iUM1U.ab)(scales[id], [\n                {\n                    axis: axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        (0, $iUM1U.ab)(scale, [\n            (0, $iUM1U.d).scales[scale.type],\n            (0, $iUM1U.d).scale\n        ]);\n    });\n    return scales;\n}\nfunction $143c3a913eb38704$var$initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = (0, $iUM1U.v)(options.plugins, {});\n    options.scales = $143c3a913eb38704$var$mergeScaleConfig(config, options);\n}\nfunction $143c3a913eb38704$var$initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction $143c3a913eb38704$var$initConfig(config) {\n    config = config || {};\n    config.data = $143c3a913eb38704$var$initData(config.data);\n    $143c3a913eb38704$var$initOptions(config);\n    return config;\n}\nconst $143c3a913eb38704$var$keyCache = new Map();\nconst $143c3a913eb38704$var$keysCached = new Set();\nfunction $143c3a913eb38704$var$cachedKeys(cacheKey, generate) {\n    let keys = $143c3a913eb38704$var$keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        $143c3a913eb38704$var$keyCache.set(cacheKey, keys);\n        $143c3a913eb38704$var$keysCached.add(keys);\n    }\n    return keys;\n}\nconst $143c3a913eb38704$var$addIfFound = (set, obj, key)=>{\n    const opts = (0, $iUM1U.f)(obj, key);\n    if (opts !== undefined) set.add(opts);\n};\nclass $143c3a913eb38704$var$Config {\n    constructor(config){\n        this._config = $143c3a913eb38704$var$initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = $143c3a913eb38704$var$initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        $143c3a913eb38704$var$initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n    datasetScopeKeys(datasetType) {\n        return $143c3a913eb38704$var$cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    \"\"\n                ]\n            ]);\n    }\n    datasetAnimationScopeKeys(datasetType, transition) {\n        return $143c3a913eb38704$var$cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    \"\"\n                ]\n            ]);\n    }\n    datasetElementScopeKeys(datasetType, elementType) {\n        return $143c3a913eb38704$var$cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    \"\"\n                ]\n            ]);\n    }\n    pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return $143c3a913eb38704$var$cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n    _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n    getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options: options, type: type } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) return cached;\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>$143c3a913eb38704$var$addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>$143c3a913eb38704$var$addIfFound(scopes, options, key));\n            keys.forEach((key)=>$143c3a913eb38704$var$addIfFound(scopes, (0, $iUM1U.a3)[type] || {}, key));\n            keys.forEach((key)=>$143c3a913eb38704$var$addIfFound(scopes, (0, $iUM1U.d), key));\n            keys.forEach((key)=>$143c3a913eb38704$var$addIfFound(scopes, (0, $iUM1U.a6), key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) array.push(Object.create(null));\n        if ($143c3a913eb38704$var$keysCached.has(keyLists)) cache.set(keyLists, array);\n        return array;\n    }\n    chartOptionScopes() {\n        const { options: options, type: type } = this;\n        return [\n            options,\n            (0, $iUM1U.a3)[type] || {},\n            (0, $iUM1U.d).datasets[type] || {},\n            {\n                type: type\n            },\n            (0, $iUM1U.d),\n            (0, $iUM1U.a6)\n        ];\n    }\n    resolveNamedOptions(scopes, names, context, prefixes = [\n        \"\"\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver: resolver, subPrefixes: subPrefixes } = $143c3a913eb38704$var$getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if ($143c3a913eb38704$var$needContext(resolver, names)) {\n            result.$shared = false;\n            context = (0, $iUM1U.a7)(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = (0, $iUM1U.a8)(resolver, context, subResolver);\n        }\n        for (const prop of names)result[prop] = options[prop];\n        return result;\n    }\n    createResolver(scopes, context, prefixes = [\n        \"\"\n    ], descriptorDefaults) {\n        const { resolver: resolver } = $143c3a913eb38704$var$getResolver(this._resolverCache, scopes, prefixes);\n        return (0, $iUM1U.i)(context) ? (0, $iUM1U.a8)(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction $143c3a913eb38704$var$getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = (0, $iUM1U.a9)(scopes, prefixes);\n        cached = {\n            resolver: resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes(\"hover\"))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst $143c3a913eb38704$var$hasFunction = (value)=>(0, $iUM1U.i)(value) && Object.getOwnPropertyNames(value).reduce((acc, key)=>acc || (0, $iUM1U.a7)(value[key]), false);\nfunction $143c3a913eb38704$var$needContext(proxy, names) {\n    const { isScriptable: isScriptable, isIndexable: isIndexable } = (0, $iUM1U.aa)(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && ((0, $iUM1U.a7)(value) || $143c3a913eb38704$var$hasFunction(value)) || indexable && (0, $iUM1U.b)(value)) return true;\n    }\n    return false;\n}\nvar $143c3a913eb38704$var$version = \"4.4.0\";\nconst $143c3a913eb38704$var$KNOWN_POSITIONS = [\n    \"top\",\n    \"bottom\",\n    \"left\",\n    \"right\",\n    \"chartArea\"\n];\nfunction $143c3a913eb38704$var$positionIsHorizontal(position, axis) {\n    return position === \"top\" || position === \"bottom\" || $143c3a913eb38704$var$KNOWN_POSITIONS.indexOf(position) === -1 && axis === \"x\";\n}\nfunction $143c3a913eb38704$var$compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction $143c3a913eb38704$var$onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins(\"afterRender\");\n    (0, $iUM1U.Q)(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction $143c3a913eb38704$var$onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    (0, $iUM1U.Q)(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\nfunction $143c3a913eb38704$var$getCanvas(item) {\n    if ((0, $iUM1U.M)() && typeof item === \"string\") item = document.getElementById(item);\n    else if (item && item.length) item = item[0];\n    if (item && item.canvas) item = item.canvas;\n    return item;\n}\nconst $143c3a913eb38704$var$instances = {};\nconst $143c3a913eb38704$var$getChart = (key)=>{\n    const canvas = $143c3a913eb38704$var$getCanvas(key);\n    return Object.values($143c3a913eb38704$var$instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction $143c3a913eb38704$var$moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) obj[intKey + move] = value;\n        }\n    }\n}\nfunction $143c3a913eb38704$var$determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === \"mouseout\") return null;\n    if (isClick) return lastEvent;\n    return e;\n}\nfunction $143c3a913eb38704$var$getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction $143c3a913eb38704$var$getDatasetArea(meta, chartArea) {\n    const { xScale: xScale, yScale: yScale } = meta;\n    if (xScale && yScale) return {\n        left: $143c3a913eb38704$var$getSizeForArea(xScale, chartArea, \"left\"),\n        right: $143c3a913eb38704$var$getSizeForArea(xScale, chartArea, \"right\"),\n        top: $143c3a913eb38704$var$getSizeForArea(yScale, chartArea, \"top\"),\n        bottom: $143c3a913eb38704$var$getSizeForArea(yScale, chartArea, \"bottom\")\n    };\n    return chartArea;\n}\nclass $143c3a913eb38704$export$acaa6426d77a227e {\n    static defaults = (0, $iUM1U.d);\n    static instances = $143c3a913eb38704$var$instances;\n    static overrides = (0, $iUM1U.a3);\n    static registry = $143c3a913eb38704$export$4bb7493d241fd8a5;\n    static version = $143c3a913eb38704$var$version;\n    static getChart = $143c3a913eb38704$var$getChart;\n    static register(...items) {\n        $143c3a913eb38704$export$4bb7493d241fd8a5.add(...items);\n        $143c3a913eb38704$var$invalidatePlugins();\n    }\n    static unregister(...items) {\n        $143c3a913eb38704$export$4bb7493d241fd8a5.remove(...items);\n        $143c3a913eb38704$var$invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new $143c3a913eb38704$var$Config(userConfig);\n        const initialCanvas = $143c3a913eb38704$var$getCanvas(item);\n        const existingChart = $143c3a913eb38704$var$getChart(initialCanvas);\n        if (existingChart) throw new Error(\"Canvas is already in use. Chart with ID '\" + existingChart.id + \"'\" + \" must be destroyed before the canvas with ID '\" + existingChart.canvas.id + \"' can be reused.\");\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || $143c3a913eb38704$export$72cd9e67b1b784f9(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = (0, $iUM1U.ac)();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n        this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new $143c3a913eb38704$var$PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = (0, $iUM1U.ad)((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        $143c3a913eb38704$var$instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        $143c3a913eb38704$export$a424a0aa8f687495.listen(this, \"complete\", $143c3a913eb38704$var$onAnimationsComplete);\n        $143c3a913eb38704$export$a424a0aa8f687495.listen(this, \"progress\", $143c3a913eb38704$var$onAnimationProgress);\n        this._initialize();\n        if (this.attached) this.update();\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio: aspectRatio, maintainAspectRatio: maintainAspectRatio }, width: width, height: height, _aspectRatio: _aspectRatio } = this;\n        if (!(0, $iUM1U.k)(aspectRatio)) return aspectRatio;\n        if (maintainAspectRatio && _aspectRatio) return _aspectRatio;\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return $143c3a913eb38704$export$4bb7493d241fd8a5;\n    }\n    _initialize() {\n        this.notifyPlugins(\"beforeInit\");\n        if (this.options.responsive) this.resize();\n        else (0, $iUM1U.ae)(this, this.options.devicePixelRatio);\n        this.bindEvents();\n        this.notifyPlugins(\"afterInit\");\n        return this;\n    }\n    clear() {\n        (0, $iUM1U.af)(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        $143c3a913eb38704$export$a424a0aa8f687495.stop(this);\n        return this;\n    }\n    resize(width, height) {\n        if (!$143c3a913eb38704$export$a424a0aa8f687495.running(this)) this._resize(width, height);\n        else this._resizeBeforeDraw = {\n            width: width,\n            height: height\n        };\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? \"resize\" : \"attach\";\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!(0, $iUM1U.ae)(this, newRatio, true)) return;\n        this.notifyPlugins(\"resize\", {\n            size: newSize\n        });\n        (0, $iUM1U.Q)(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) this.render();\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        (0, $iUM1U.F)(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n    buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) items = items.concat(Object.keys(scaleOpts).map((id)=>{\n            const scaleOptions = scaleOpts[id];\n            const axis = $143c3a913eb38704$var$determineAxis(id, scaleOptions);\n            const isRadial = axis === \"r\";\n            const isHorizontal = axis === \"x\";\n            return {\n                options: scaleOptions,\n                dposition: isRadial ? \"chartArea\" : isHorizontal ? \"bottom\" : \"left\",\n                dtype: isRadial ? \"radialLinear\" : isHorizontal ? \"category\" : \"linear\"\n            };\n        }));\n        (0, $iUM1U.F)(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = $143c3a913eb38704$var$determineAxis(id, scaleOptions);\n            const scaleType = (0, $iUM1U.v)(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || $143c3a913eb38704$var$positionIsHorizontal(scaleOptions.position, axis) !== $143c3a913eb38704$var$positionIsHorizontal(item.dposition)) scaleOptions.position = item.dposition;\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) scale = scales[id];\n            else {\n                const scaleClass = $143c3a913eb38704$export$4bb7493d241fd8a5.getScale(scaleType);\n                scale = new scaleClass({\n                    id: id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        (0, $iUM1U.F)(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) delete scales[id];\n        });\n        (0, $iUM1U.F)(scales, (scale)=>{\n            $143c3a913eb38704$export$1ecca0613f5e56d2.configure(this, scale, scale.options);\n            $143c3a913eb38704$export$1ecca0613f5e56d2.addBox(this, scale);\n        });\n    }\n    _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i)this._destroyDatasetMeta(i);\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort($143c3a913eb38704$var$compare2Level(\"order\", \"index\"));\n    }\n    _removeUnreferencedMetasets() {\n        const { _metasets: metasets, data: { datasets: datasets } } = this;\n        if (metasets.length > datasets.length) delete this._stacks;\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) this._destroyDatasetMeta(index);\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || $143c3a913eb38704$var$getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = \"\" + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = $143c3a913eb38704$export$4bb7493d241fd8a5.getController(type);\n                const { datasetElementType: datasetElementType, dataElementType: dataElementType } = (0, $iUM1U.d).datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: $143c3a913eb38704$export$4bb7493d241fd8a5.getElement(dataElementType),\n                    datasetElementType: datasetElementType && $143c3a913eb38704$export$4bb7493d241fd8a5.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n    _resetElements() {\n        (0, $iUM1U.F)(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n    reset() {\n        this._resetElements();\n        this.notifyPlugins(\"reset\");\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins(\"beforeUpdate\", {\n            mode: mode,\n            cancelable: true\n        }) === false) return;\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins(\"beforeElementsUpdate\");\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller: controller } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) (0, $iUM1U.F)(newControllers, (controller)=>{\n            controller.reset();\n        });\n        this._updateDatasets(mode);\n        this.notifyPlugins(\"afterUpdate\", {\n            mode: mode\n        });\n        this._layers.sort($143c3a913eb38704$var$compare2Level(\"z\", \"_idx\"));\n        const { _active: _active, _lastEvent: _lastEvent } = this;\n        if (_lastEvent) this._eventHandler(_lastEvent, true);\n        else if (_active.length) this._updateHoverStyles(_active, _active, true);\n        this.render();\n    }\n    _updateScales() {\n        (0, $iUM1U.F)(this.scales, (scale)=>{\n            $143c3a913eb38704$export$1ecca0613f5e56d2.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n    _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!(0, $iUM1U.ag)(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n    _updateHiddenIndices() {\n        const { _hiddenIndices: _hiddenIndices } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method: method, start: start, count: count } of changes){\n            const move = method === \"_removeElements\" ? -count : count;\n            $143c3a913eb38704$var$moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n    _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) return;\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + \",\" + c.splice(1).join(\",\")));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!(0, $iUM1U.ag)(changeSet, makeSet(i))) return;\n        }\n        return Array.from(changeSet).map((c)=>c.split(\",\")).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n    _updateLayout(minPadding) {\n        if (this.notifyPlugins(\"beforeLayout\", {\n            cancelable: true\n        }) === false) return;\n        $143c3a913eb38704$export$1ecca0613f5e56d2.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        (0, $iUM1U.F)(this.boxes, (box)=>{\n            if (noArea && box.position === \"chartArea\") return;\n            if (box.configure) box.configure();\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins(\"afterLayout\");\n    }\n    _updateDatasets(mode) {\n        if (this.notifyPlugins(\"beforeDatasetsUpdate\", {\n            mode: mode,\n            cancelable: true\n        }) === false) return;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this.getDatasetMeta(i).controller.configure();\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this._updateDataset(i, (0, $iUM1U.a7)(mode) ? mode({\n            datasetIndex: i\n        }) : mode);\n        this.notifyPlugins(\"afterDatasetsUpdate\", {\n            mode: mode\n        });\n    }\n    _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta: meta,\n            index: index,\n            mode: mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins(\"beforeDatasetUpdate\", args) === false) return;\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins(\"afterDatasetUpdate\", args);\n    }\n    render() {\n        if (this.notifyPlugins(\"beforeRender\", {\n            cancelable: true\n        }) === false) return;\n        if ($143c3a913eb38704$export$a424a0aa8f687495.has(this)) {\n            if (this.attached && !$143c3a913eb38704$export$a424a0aa8f687495.running(this)) $143c3a913eb38704$export$a424a0aa8f687495.start(this);\n        } else {\n            this.draw();\n            $143c3a913eb38704$var$onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width: width, height: height } = this._resizeBeforeDraw;\n            this._resize(width, height);\n            this._resizeBeforeDraw = null;\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) return;\n        if (this.notifyPlugins(\"beforeDraw\", {\n            cancelable: true\n        }) === false) return;\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i)layers[i].draw(this.chartArea);\n        this._drawDatasets();\n        for(; i < layers.length; ++i)layers[i].draw(this.chartArea);\n        this.notifyPlugins(\"afterDraw\");\n    }\n    _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) result.push(meta);\n        }\n        return result;\n    }\n    getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n    _drawDatasets() {\n        if (this.notifyPlugins(\"beforeDatasetsDraw\", {\n            cancelable: true\n        }) === false) return;\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i)this._drawDataset(metasets[i]);\n        this.notifyPlugins(\"afterDatasetsDraw\");\n    }\n    _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = $143c3a913eb38704$var$getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta: meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins(\"beforeDatasetDraw\", args) === false) return;\n        if (useClip) (0, $iUM1U.Y)(ctx, {\n            left: clip.left === false ? 0 : area.left - clip.left,\n            right: clip.right === false ? this.width : area.right + clip.right,\n            top: clip.top === false ? 0 : area.top - clip.top,\n            bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n        });\n        meta.controller.draw();\n        if (useClip) (0, $iUM1U.$)(ctx);\n        args.cancelable = false;\n        this.notifyPlugins(\"afterDatasetDraw\", args);\n    }\n    isPointInArea(point) {\n        return (0, $iUM1U.C)(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = $143c3a913eb38704$export$a13296960cae0384.modes[mode];\n        if (typeof method === \"function\") return method(this, e, options, useFinalPosition);\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = (0, $iUM1U.j)(null, {\n            chart: this,\n            type: \"chart\"\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) return false;\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === \"boolean\" ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n    _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? \"show\" : \"hide\";\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if ((0, $iUM1U.h)(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible: visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n    _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) meta.controller._destroy();\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        $143c3a913eb38704$export$a424a0aa8f687495.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this._destroyDatasetMeta(i);\n    }\n    destroy() {\n        this.notifyPlugins(\"beforeDestroy\");\n        const { canvas: canvas, ctx: ctx } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            (0, $iUM1U.af)(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete $143c3a913eb38704$var$instances[this.id];\n        this.notifyPlugins(\"afterDestroy\");\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n    bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) this.bindResponsiveEvents();\n        else this.attached = true;\n    }\n    bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        (0, $iUM1U.F)(this.options.events, (type)=>_add(type, listener));\n    }\n    bindResponsiveEvents() {\n        if (!this._responsiveListeners) this._responsiveListeners = {};\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) this.resize(width, height);\n        };\n        let detached;\n        const attached = ()=>{\n            _remove(\"attach\", attached);\n            this.attached = true;\n            this.resize();\n            _add(\"resize\", listener);\n            _add(\"detach\", detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove(\"resize\", listener);\n            this._stop();\n            this._resize(0, 0);\n            _add(\"attach\", attached);\n        };\n        if (platform.isAttached(this.canvas)) attached();\n        else detached();\n    }\n    unbindEvents() {\n        (0, $iUM1U.F)(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        (0, $iUM1U.F)(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? \"set\" : \"remove\";\n        let meta, item, i, ilen;\n        if (mode === \"dataset\") {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller[\"_\" + prefix + \"DatasetHoverStyle\"]();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) controller[prefix + \"HoverStyle\"](item.element, item.datasetIndex, item.index);\n        }\n    }\n    getActiveElements() {\n        return this._active || [];\n    }\n    setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex: datasetIndex, index: index })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) throw new Error(\"No dataset found at index \" + datasetIndex);\n            return {\n                datasetIndex: datasetIndex,\n                element: meta.data[index],\n                index: index\n            };\n        });\n        const changed = !(0, $iUM1U.ah)(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n    notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n    isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n    _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        if (activated.length && hoverOptions.mode) this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n    _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay: replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins(\"beforeEvent\", args, eventFilter) === false) return;\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins(\"afterEvent\", args, eventFilter);\n        if (changed || args.changed) this.render();\n        return this;\n    }\n    _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [], options: options } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = (0, $iUM1U.ai)(e);\n        const lastEvent = $143c3a913eb38704$var$determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            (0, $iUM1U.Q)(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) (0, $iUM1U.Q)(options.onClick, [\n                e,\n                active,\n                this\n            ], this);\n        }\n        const changed = !(0, $iUM1U.ah)(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n    _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === \"mouseout\") return [];\n        if (!inChartArea) return lastActive;\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction $143c3a913eb38704$var$invalidatePlugins() {\n    return (0, $iUM1U.F)($143c3a913eb38704$export$acaa6426d77a227e.instances, (chart)=>chart._plugins.invalidate());\n}\nfunction $143c3a913eb38704$var$clipArc(ctx, element, endAngle) {\n    const { startAngle: startAngle, pixelMargin: pixelMargin, x: x, y: y, outerRadius: outerRadius, innerRadius: innerRadius } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else ctx.arc(x, y, pixelMargin, endAngle + (0, $iUM1U.H), startAngle - (0, $iUM1U.H));\n    ctx.closePath();\n    ctx.clip();\n}\nfunction $143c3a913eb38704$var$toRadiusCorners(value) {\n    return (0, $iUM1U.ak)(value, [\n        \"outerStart\",\n        \"outerEnd\",\n        \"innerStart\",\n        \"innerEnd\"\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function $143c3a913eb38704$var$parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = $143c3a913eb38704$var$toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return (0, $iUM1U.S)(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: (0, $iUM1U.S)(o.innerStart, 0, innerLimit),\n        innerEnd: (0, $iUM1U.S)(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function $143c3a913eb38704$var$rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function $143c3a913eb38704$var$pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x: x, y: y, startAngle: start, pixelMargin: pixelMargin, innerRadius: innerR } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / (0, $iUM1U.P)) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart: outerStart, outerEnd: outerEnd, innerStart: innerStart, innerEnd: innerEnd } = $143c3a913eb38704$var$parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = $143c3a913eb38704$var$rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + (0, $iUM1U.H));\n        }\n        // The line from point 3 to point 4\n        const p4 = $143c3a913eb38704$var$rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = $143c3a913eb38704$var$rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + (0, $iUM1U.H), innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = $143c3a913eb38704$var$rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - (0, $iUM1U.H));\n        }\n        // The line from point 7 to point 8\n        const p8 = $143c3a913eb38704$var$rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = $143c3a913eb38704$var$rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - (0, $iUM1U.H), outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction $143c3a913eb38704$var$drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles: fullCircles, startAngle: startAngle, circumference: circumference } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        $143c3a913eb38704$var$pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i)ctx.fill();\n        if (!isNaN(circumference)) endAngle = startAngle + (circumference % (0, $iUM1U.T) || (0, $iUM1U.T));\n    }\n    $143c3a913eb38704$var$pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction $143c3a913eb38704$var$drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles: fullCircles, startAngle: startAngle, circumference: circumference, options: options } = element;\n    const { borderWidth: borderWidth, borderJoinStyle: borderJoinStyle, borderDash: borderDash, borderDashOffset: borderDashOffset } = options;\n    const inner = options.borderAlign === \"inner\";\n    if (!borderWidth) return;\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || \"round\";\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || \"bevel\";\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        $143c3a913eb38704$var$pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i)ctx.stroke();\n        if (!isNaN(circumference)) endAngle = startAngle + (circumference % (0, $iUM1U.T) || (0, $iUM1U.T));\n    }\n    if (inner) $143c3a913eb38704$var$clipArc(ctx, element, endAngle);\n    if (!fullCircles) {\n        $143c3a913eb38704$var$pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass $143c3a913eb38704$export$d48203c759d6a1fc extends $143c3a913eb38704$export$db77ccec0bb4ccac {\n    static id = \"arc\";\n    static defaults = {\n        borderAlign: \"center\",\n        borderColor: \"#fff\",\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: \"backgroundColor\"\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== \"borderDash\"\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) Object.assign(this, cfg);\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            \"x\",\n            \"y\"\n        ], useFinalPosition);\n        const { angle: angle, distance: distance } = (0, $iUM1U.D)(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle: startAngle, endAngle: endAngle, innerRadius: innerRadius, outerRadius: outerRadius, circumference: circumference } = this.getProps([\n            \"startAngle\",\n            \"endAngle\",\n            \"innerRadius\",\n            \"outerRadius\",\n            \"circumference\"\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = (0, $iUM1U.v)(circumference, endAngle - startAngle);\n        const betweenAngles = _circumference >= (0, $iUM1U.T) || (0, $iUM1U.p)(angle, startAngle, endAngle);\n        const withinRadius = (0, $iUM1U.aj)(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x: x, y: y, startAngle: startAngle, endAngle: endAngle, innerRadius: innerRadius, outerRadius: outerRadius } = this.getProps([\n            \"x\",\n            \"y\",\n            \"startAngle\",\n            \"endAngle\",\n            \"innerRadius\",\n            \"outerRadius\"\n        ], useFinalPosition);\n        const { offset: offset, spacing: spacing } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options: options, circumference: circumference } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === \"inner\" ? 0.33 : 0;\n        this.fullCircles = circumference > (0, $iUM1U.T) ? Math.floor(circumference / (0, $iUM1U.T)) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) return;\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min((0, $iUM1U.P), circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        $143c3a913eb38704$var$drawArc(ctx, this, radiusOffset, spacing, circular);\n        $143c3a913eb38704$var$drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\nfunction $143c3a913eb38704$var$setStyle(ctx, options, style = options) {\n    ctx.lineCap = (0, $iUM1U.v)(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash((0, $iUM1U.v)(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = (0, $iUM1U.v)(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = (0, $iUM1U.v)(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = (0, $iUM1U.v)(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = (0, $iUM1U.v)(style.borderColor, options.borderColor);\n}\nfunction $143c3a913eb38704$var$lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\nfunction $143c3a913eb38704$var$getLineMethod(options) {\n    if (options.stepped) return 0, $iUM1U.ar;\n    if (options.tension || options.cubicInterpolationMode === \"monotone\") return 0, $iUM1U.as;\n    return $143c3a913eb38704$var$lineTo;\n}\nfunction $143c3a913eb38704$var$pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0, end: paramsEnd = count - 1 } = params;\n    const { start: segmentStart, end: segmentEnd } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count: count,\n        start: start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\nfunction $143c3a913eb38704$var$pathSegment(ctx, line, segment, params) {\n    const { points: points, options: options } = line;\n    const { count: count, start: start, loop: loop, ilen: ilen } = $143c3a913eb38704$var$pathVars(points, segment, params);\n    const lineMethod = $143c3a913eb38704$var$getLineMethod(options);\n    let { move: move = true, reverse: reverse } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) continue;\n        else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else lineMethod(ctx, prev, point, reverse, options.stepped);\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\nfunction $143c3a913eb38704$var$fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count: count, start: start, ilen: ilen } = $143c3a913eb38704$var$pathVars(points, segment, params);\n    const { move: move = true, reverse: reverse } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) continue;\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) minY = y;\n            else if (y > maxY) maxY = y;\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\nfunction $143c3a913eb38704$var$_getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== \"monotone\" && !opts.stepped && !borderDash;\n    return useFastPath ? $143c3a913eb38704$var$fastPathSegment : $143c3a913eb38704$var$pathSegment;\n}\nfunction $143c3a913eb38704$var$_getInterpolationMethod(options) {\n    if (options.stepped) return 0, $iUM1U.ao;\n    if (options.tension || options.cubicInterpolationMode === \"monotone\") return 0, $iUM1U.ap;\n    return 0, $iUM1U.aq;\n}\nfunction $143c3a913eb38704$var$strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) path.closePath();\n    }\n    $143c3a913eb38704$var$setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction $143c3a913eb38704$var$strokePathDirect(ctx, line, start, count) {\n    const { segments: segments, options: options } = line;\n    const segmentMethod = $143c3a913eb38704$var$_getSegmentMethod(line);\n    for (const segment of segments){\n        $143c3a913eb38704$var$setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start: start,\n            end: start + count - 1\n        })) ctx.closePath();\n        ctx.stroke();\n    }\n}\nconst $143c3a913eb38704$var$usePath2D = typeof Path2D === \"function\";\nfunction $143c3a913eb38704$var$draw(ctx, line, start, count) {\n    if ($143c3a913eb38704$var$usePath2D && !line.options.segment) $143c3a913eb38704$var$strokePathWithCache(ctx, line, start, count);\n    else $143c3a913eb38704$var$strokePathDirect(ctx, line, start, count);\n}\nclass $143c3a913eb38704$export$55e463fa7bcd3469 extends $143c3a913eb38704$export$db77ccec0bb4ccac {\n    static id = \"line\";\n    static defaults = {\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: \"miter\",\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: \"default\",\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n    static defaultRoutes = {\n        backgroundColor: \"backgroundColor\",\n        borderColor: \"borderColor\"\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== \"borderDash\" && name !== \"fill\"\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) Object.assign(this, cfg);\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === \"monotone\") && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            (0, $iUM1U.al)(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = (0, $iUM1U.am)(this, this.options.segment));\n    }\n    first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n    last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n    interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = (0, $iUM1U.an)(this, {\n            property: property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) return;\n        const result = [];\n        const _interpolate = $143c3a913eb38704$var$_getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start: start, end: end } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n    pathSegment(ctx, segment, params) {\n        const segmentMethod = $143c3a913eb38704$var$_getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n    path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = $143c3a913eb38704$var$_getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments)loop &= segmentMethod(ctx, this, segment, {\n            start: start,\n            end: start + count - 1\n        });\n        return !!loop;\n    }\n    draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            $143c3a913eb38704$var$draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\nfunction $143c3a913eb38704$var$inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass $143c3a913eb38704$export$bd159b522b230b7a extends $143c3a913eb38704$export$db77ccec0bb4ccac {\n    static id = \"point\";\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: \"circle\",\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: \"backgroundColor\",\n        borderColor: \"borderColor\"\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) Object.assign(this, cfg);\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x: x, y: y } = this.getProps([\n            \"x\",\n            \"y\"\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return $143c3a913eb38704$var$inRange$1(this, mouseX, \"x\", useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return $143c3a913eb38704$var$inRange$1(this, mouseY, \"y\", useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x: x, y: y } = this.getProps([\n            \"x\",\n            \"y\"\n        ], useFinalPosition);\n        return {\n            x: x,\n            y: y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !(0, $iUM1U.C)(this, area, this.size(options) / 2)) return;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        (0, $iUM1U.at)(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\nfunction $143c3a913eb38704$var$getBarBounds(bar, useFinalPosition) {\n    const { x: x, y: y, base: base, width: width, height: height } = bar.getProps([\n        \"x\",\n        \"y\",\n        \"base\",\n        \"width\",\n        \"height\"\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left: left,\n        top: top,\n        right: right,\n        bottom: bottom\n    };\n}\nfunction $143c3a913eb38704$var$skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : (0, $iUM1U.S)(value, min, max);\n}\nfunction $143c3a913eb38704$var$parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = (0, $iUM1U.av)(value);\n    return {\n        t: $143c3a913eb38704$var$skipOrLimit(skip.top, o.top, 0, maxH),\n        r: $143c3a913eb38704$var$skipOrLimit(skip.right, o.right, 0, maxW),\n        b: $143c3a913eb38704$var$skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: $143c3a913eb38704$var$skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction $143c3a913eb38704$var$parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius: enableBorderRadius } = bar.getProps([\n        \"enableBorderRadius\"\n    ]);\n    const value = bar.options.borderRadius;\n    const o = (0, $iUM1U.aw)(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || (0, $iUM1U.i)(value);\n    return {\n        topLeft: $143c3a913eb38704$var$skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: $143c3a913eb38704$var$skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: $143c3a913eb38704$var$skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: $143c3a913eb38704$var$skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction $143c3a913eb38704$var$boundingRects(bar) {\n    const bounds = $143c3a913eb38704$var$getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = $143c3a913eb38704$var$parseBorderWidth(bar, width / 2, height / 2);\n    const radius = $143c3a913eb38704$var$parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius: radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction $143c3a913eb38704$var$inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && $143c3a913eb38704$var$getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || (0, $iUM1U.aj)(x, bounds.left, bounds.right)) && (skipY || (0, $iUM1U.aj)(y, bounds.top, bounds.bottom));\n}\nfunction $143c3a913eb38704$var$hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction $143c3a913eb38704$var$addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction $143c3a913eb38704$var$inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass $143c3a913eb38704$export$a16ed71bf4b07672 extends $143c3a913eb38704$export$db77ccec0bb4ccac {\n    static id = \"bar\";\n    static defaults = {\n        borderSkipped: \"start\",\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: \"auto\",\n        pointStyle: undefined\n    };\n    static defaultRoutes = {\n        backgroundColor: \"backgroundColor\",\n        borderColor: \"borderColor\"\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) Object.assign(this, cfg);\n    }\n    draw(ctx) {\n        const { inflateAmount: inflateAmount, options: { borderColor: borderColor, backgroundColor: backgroundColor } } = this;\n        const { inner: inner, outer: outer } = $143c3a913eb38704$var$boundingRects(this);\n        const addRectPath = $143c3a913eb38704$var$hasRadius(outer.radius) ? (0, $iUM1U.au) : $143c3a913eb38704$var$addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, $143c3a913eb38704$var$inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, $143c3a913eb38704$var$inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill(\"evenodd\");\n        }\n        ctx.beginPath();\n        addRectPath(ctx, $143c3a913eb38704$var$inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return $143c3a913eb38704$var$inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return $143c3a913eb38704$var$inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return $143c3a913eb38704$var$inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x: x, y: y, base: base, horizontal: horizontal } = this.getProps([\n            \"x\",\n            \"y\",\n            \"base\",\n            \"horizontal\"\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === \"x\" ? this.width / 2 : this.height / 2;\n    }\n}\nvar $143c3a913eb38704$export$7a5d735b2ab6389d = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    ArcElement: $143c3a913eb38704$export$d48203c759d6a1fc,\n    BarElement: $143c3a913eb38704$export$a16ed71bf4b07672,\n    LineElement: $143c3a913eb38704$export$55e463fa7bcd3469,\n    PointElement: $143c3a913eb38704$export$bd159b522b230b7a\n});\nconst $143c3a913eb38704$var$BORDER_COLORS = [\n    \"rgb(54, 162, 235)\",\n    \"rgb(255, 99, 132)\",\n    \"rgb(255, 159, 64)\",\n    \"rgb(255, 205, 86)\",\n    \"rgb(75, 192, 192)\",\n    \"rgb(153, 102, 255)\",\n    \"rgb(201, 203, 207)\" // grey\n];\n// Border colors with 50% transparency\nconst $143c3a913eb38704$var$BACKGROUND_COLORS = /* #__PURE__ */ $143c3a913eb38704$var$BORDER_COLORS.map((color)=>color.replace(\"rgb(\", \"rgba(\").replace(\")\", \", 0.5)\"));\nfunction $143c3a913eb38704$var$getBorderColor(i) {\n    return $143c3a913eb38704$var$BORDER_COLORS[i % $143c3a913eb38704$var$BORDER_COLORS.length];\n}\nfunction $143c3a913eb38704$var$getBackgroundColor(i) {\n    return $143c3a913eb38704$var$BACKGROUND_COLORS[i % $143c3a913eb38704$var$BACKGROUND_COLORS.length];\n}\nfunction $143c3a913eb38704$var$colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = $143c3a913eb38704$var$getBorderColor(i);\n    dataset.backgroundColor = $143c3a913eb38704$var$getBackgroundColor(i);\n    return ++i;\n}\nfunction $143c3a913eb38704$var$colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>$143c3a913eb38704$var$getBorderColor(i++));\n    return i;\n}\nfunction $143c3a913eb38704$var$colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>$143c3a913eb38704$var$getBackgroundColor(i++));\n    return i;\n}\nfunction $143c3a913eb38704$var$getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof $143c3a913eb38704$export$e04603e7d8b77172) i = $143c3a913eb38704$var$colorizeDoughnutDataset(dataset, i);\n        else if (controller instanceof $143c3a913eb38704$export$2a270b3a0d973c85) i = $143c3a913eb38704$var$colorizePolarAreaDataset(dataset, i);\n        else if (controller) i = $143c3a913eb38704$var$colorizeDefaultDataset(dataset, i);\n    };\n}\nfunction $143c3a913eb38704$var$containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) return true;\n    }\n    return false;\n}\nfunction $143c3a913eb38704$var$containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar $143c3a913eb38704$export$c537fa0d021d010b = {\n    id: \"colors\",\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) return;\n        const { data: { datasets: datasets }, options: chartOptions } = chart.config;\n        const { elements: elements } = chartOptions;\n        if (!options.forceOverride && ($143c3a913eb38704$var$containsColorsDefinitions(datasets) || $143c3a913eb38704$var$containsColorsDefinition(chartOptions) || elements && $143c3a913eb38704$var$containsColorsDefinitions(elements))) return;\n        const colorizer = $143c3a913eb38704$var$getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\nfunction $143c3a913eb38704$var$lttbDecimation(data, start, count, availableWidth, options) {\n    const samples = options.samples || availableWidth;\n    if (samples >= count) return data.slice(start, start + count);\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx, y: pointAy } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction $143c3a913eb38704$var$minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!(0, $iUM1U.k)(minIndex) && !(0, $iUM1U.k)(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) decimated.push({\n                    ...data[intermediateIndex1],\n                    x: avgX\n                });\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) decimated.push({\n                    ...data[intermediateIndex2],\n                    x: avgX\n                });\n            }\n            if (i > 0 && lastIndex !== startIndex) decimated.push(data[lastIndex]);\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction $143c3a913eb38704$var$cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, \"data\", {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction $143c3a913eb38704$var$cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        $143c3a913eb38704$var$cleanDecimatedDataset(dataset);\n    });\n}\nfunction $143c3a913eb38704$var$getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale: iScale } = meta;\n    const { min: min, max: max, minDefined: minDefined, maxDefined: maxDefined } = iScale.getUserBounds();\n    if (minDefined) start = (0, $iUM1U.S)((0, $iUM1U.B)(points, iScale.axis, min).lo, 0, pointCount - 1);\n    if (maxDefined) count = (0, $iUM1U.S)((0, $iUM1U.B)(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    else count = pointCount - start;\n    return {\n        start: start,\n        count: count\n    };\n}\nvar $143c3a913eb38704$export$be17f937e9aa7533 = {\n    id: \"decimation\",\n    defaults: {\n        algorithm: \"min-max\",\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            $143c3a913eb38704$var$cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data: _data, indexAxis: indexAxis } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if ((0, $iUM1U.a)([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === \"y\") return;\n            if (!meta.controller.supportsDecimation) return;\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== \"linear\" && xAxis.type !== \"time\") return;\n            if (chart.options.parsing) return;\n            let { start: start, count: count } = $143c3a913eb38704$var$getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                $143c3a913eb38704$var$cleanDecimatedDataset(dataset);\n                return;\n            }\n            if ((0, $iUM1U.k)(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, \"data\", {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case \"lttb\":\n                    decimated = $143c3a913eb38704$var$lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case \"min-max\":\n                    decimated = $143c3a913eb38704$var$minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        $143c3a913eb38704$var$cleanDecimatedData(chart);\n    }\n};\nfunction $143c3a913eb38704$var$_segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start: start, end: end } = segment;\n        end = $143c3a913eb38704$var$_findSegmentEnd(start, end, points);\n        const bounds = $143c3a913eb38704$var$_getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = (0, $iUM1U.an)(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = $143c3a913eb38704$var$_getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = (0, $iUM1U.ax)(segment, points, subBounds);\n            for (const fillSource of fillSources)parts.push({\n                source: fillSource,\n                target: tgt,\n                start: {\n                    [property]: $143c3a913eb38704$var$_getEdge(bounds, subBounds, \"start\", Math.max)\n                },\n                end: {\n                    [property]: $143c3a913eb38704$var$_getEdge(bounds, subBounds, \"end\", Math.min)\n                }\n            });\n        }\n    }\n    return parts;\n}\nfunction $143c3a913eb38704$var$_getBounds(property, first, last, loop) {\n    if (loop) return;\n    let start = first[property];\n    let end = last[property];\n    if (property === \"angle\") {\n        start = (0, $iUM1U.ay)(start);\n        end = (0, $iUM1U.ay)(end);\n    }\n    return {\n        property: property,\n        start: start,\n        end: end\n    };\n}\nfunction $143c3a913eb38704$var$_pointsFromSegments(boundary, line) {\n    const { x: x = null, y: y = null } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start: start, end: end })=>{\n        end = $143c3a913eb38704$var$_findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y: y\n            });\n            points.push({\n                x: last.x,\n                y: y\n            });\n        } else if (x !== null) {\n            points.push({\n                x: x,\n                y: first.y\n            });\n            points.push({\n                x: x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction $143c3a913eb38704$var$_findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) break;\n    }\n    return end;\n}\nfunction $143c3a913eb38704$var$_getEdge(a, b, prop, fn) {\n    if (a && b) return fn(a[prop], b[prop]);\n    return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction $143c3a913eb38704$var$_createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if ((0, $iUM1U.b)(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else points = $143c3a913eb38704$var$_pointsFromSegments(boundary, line);\n    return points.length ? new $143c3a913eb38704$export$55e463fa7bcd3469({\n        points: points,\n        options: {\n            tension: 0\n        },\n        _loop: _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction $143c3a913eb38704$var$_shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\nfunction $143c3a913eb38704$var$_resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) return fill;\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!(0, $iUM1U.g)(fill)) return fill;\n        target = sources[fill];\n        if (!target) return false;\n        if (target.visible) return fill;\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\nfunction $143c3a913eb38704$var$_decodeFill(line, index, count) {\n    const fill = $143c3a913eb38704$var$parseFillOption(line);\n    if ((0, $iUM1U.i)(fill)) return isNaN(fill.value) ? false : fill;\n    let target = parseFloat(fill);\n    if ((0, $iUM1U.g)(target) && Math.floor(target) === target) return $143c3a913eb38704$var$decodeTargetIndex(fill[0], index, target, count);\n    return [\n        \"origin\",\n        \"start\",\n        \"end\",\n        \"stack\",\n        \"shape\"\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction $143c3a913eb38704$var$decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === \"-\" || firstCh === \"+\") target = index + target;\n    if (target === index || target < 0 || target >= count) return false;\n    return target;\n}\nfunction $143c3a913eb38704$var$_getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === \"start\") pixel = scale.bottom;\n    else if (fill === \"end\") pixel = scale.top;\n    else if ((0, $iUM1U.i)(fill)) pixel = scale.getPixelForValue(fill.value);\n    else if (scale.getBasePixel) pixel = scale.getBasePixel();\n    return pixel;\n}\nfunction $143c3a913eb38704$var$_getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === \"start\") value = startValue;\n    else if (fill === \"end\") value = scale.options.reverse ? scale.min : scale.max;\n    else if ((0, $iUM1U.i)(fill)) value = fill.value;\n    else value = scale.getBaseValue();\n    return value;\n}\nfunction $143c3a913eb38704$var$parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = (0, $iUM1U.v)(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) fill = !!options.backgroundColor;\n    if (fill === false || fill === null) return false;\n    if (fill === true) return \"origin\";\n    return fill;\n}\nfunction $143c3a913eb38704$var$_buildStackLine(source) {\n    const { scale: scale, index: index, line: line } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = $143c3a913eb38704$var$getLinesBelow(scale, index);\n    linesBelow.push($143c3a913eb38704$var$_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++)$143c3a913eb38704$var$addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n    return new $143c3a913eb38704$export$55e463fa7bcd3469({\n        points: points,\n        options: {}\n    });\n}\nfunction $143c3a913eb38704$var$getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas(\"line\");\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) break;\n        if (!meta.hidden) below.unshift(meta.dataset);\n    }\n    return below;\n}\nfunction $143c3a913eb38704$var$addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first: first, last: last, point: point } = $143c3a913eb38704$var$findPoint(line, sourcePoint, \"x\");\n        if (!point || first && last) continue;\n        if (first) postponed.unshift(point);\n        else {\n            points.push(point);\n            if (!last) break;\n        }\n    }\n    points.push(...postponed);\n}\nfunction $143c3a913eb38704$var$findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) return {};\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if ((0, $iUM1U.aj)(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first: first,\n        last: last,\n        point: point\n    };\n}\nclass $143c3a913eb38704$var$simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x: x, y: y, radius: radius } = this;\n        bounds = bounds || {\n            start: 0,\n            end: (0, $iUM1U.T)\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x: x, y: y, radius: radius } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle: angle\n        };\n    }\n}\nfunction $143c3a913eb38704$var$_getTarget(source) {\n    const { chart: chart, fill: fill, line: line } = source;\n    if ((0, $iUM1U.g)(fill)) return $143c3a913eb38704$var$getLineByIndex(chart, fill);\n    if (fill === \"stack\") return $143c3a913eb38704$var$_buildStackLine(source);\n    if (fill === \"shape\") return true;\n    const boundary = $143c3a913eb38704$var$computeBoundary(source);\n    if (boundary instanceof $143c3a913eb38704$var$simpleArc) return boundary;\n    return $143c3a913eb38704$var$_createBoundaryLine(boundary, line);\n}\nfunction $143c3a913eb38704$var$getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction $143c3a913eb38704$var$computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) return $143c3a913eb38704$var$computeCircularBoundary(source);\n    return $143c3a913eb38704$var$computeLinearBoundary(source);\n}\nfunction $143c3a913eb38704$var$computeLinearBoundary(source) {\n    const { scale: scale = {}, fill: fill } = source;\n    const pixel = $143c3a913eb38704$var$_getTargetPixel(fill, scale);\n    if ((0, $iUM1U.g)(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction $143c3a913eb38704$var$computeCircularBoundary(source) {\n    const { scale: scale, fill: fill } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = $143c3a913eb38704$var$_getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new $143c3a913eb38704$var$simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i)target.push(scale.getPointPositionForValue(i, value));\n    return target;\n}\nfunction $143c3a913eb38704$var$_drawfill(ctx, source, area) {\n    const target = $143c3a913eb38704$var$_getTarget(source);\n    const { line: line, scale: scale, axis: axis } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above: above = color, below: below = color } = fillOption || {};\n    if (target && line.points.length) {\n        (0, $iUM1U.Y)(ctx, area);\n        $143c3a913eb38704$var$doFill(ctx, {\n            line: line,\n            target: target,\n            above: above,\n            below: below,\n            area: area,\n            scale: scale,\n            axis: axis\n        });\n        (0, $iUM1U.$)(ctx);\n    }\n}\nfunction $143c3a913eb38704$var$doFill(ctx, cfg) {\n    const { line: line, target: target, above: above, below: below, area: area, scale: scale } = cfg;\n    const property = line._loop ? \"angle\" : cfg.axis;\n    ctx.save();\n    if (property === \"x\" && below !== above) {\n        $143c3a913eb38704$var$clipVertical(ctx, target, area.top);\n        $143c3a913eb38704$var$fill(ctx, {\n            line: line,\n            target: target,\n            color: above,\n            scale: scale,\n            property: property\n        });\n        ctx.restore();\n        ctx.save();\n        $143c3a913eb38704$var$clipVertical(ctx, target, area.bottom);\n    }\n    $143c3a913eb38704$var$fill(ctx, {\n        line: line,\n        target: target,\n        color: below,\n        scale: scale,\n        property: property\n    });\n    ctx.restore();\n}\nfunction $143c3a913eb38704$var$clipVertical(ctx, target, clipY) {\n    const { segments: segments, points: points } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start: start, end: end } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[$143c3a913eb38704$var$_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) ctx.closePath();\n        else ctx.lineTo(lastPoint.x, clipY);\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction $143c3a913eb38704$var$fill(ctx, cfg) {\n    const { line: line, target: target, property: property, color: color, scale: scale } = cfg;\n    const segments = $143c3a913eb38704$var$_segments(line, target, property);\n    for (const { source: src, target: tgt, start: start, end: end } of segments){\n        const { style: { backgroundColor: backgroundColor = color } = {} } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        $143c3a913eb38704$var$clipBounds(ctx, scale, notShape && $143c3a913eb38704$var$_getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) ctx.closePath();\n            else $143c3a913eb38704$var$interpolatedLineTo(ctx, target, end, property);\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) $143c3a913eb38704$var$interpolatedLineTo(ctx, target, start, property);\n        }\n        ctx.closePath();\n        ctx.fill(loop ? \"evenodd\" : \"nonzero\");\n        ctx.restore();\n    }\n}\nfunction $143c3a913eb38704$var$clipBounds(ctx, scale, bounds) {\n    const { top: top, bottom: bottom } = scale.chart.chartArea;\n    const { property: property, start: start, end: end } = bounds || {};\n    if (property === \"x\") {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction $143c3a913eb38704$var$interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n}\nvar $143c3a913eb38704$export$d19ba4d812bed757 = {\n    id: \"filler\",\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof $143c3a913eb38704$export$55e463fa7bcd3469) source = {\n                visible: chart.isDatasetVisible(i),\n                index: i,\n                fill: $143c3a913eb38704$var$_decodeFill(line, i, count),\n                chart: chart,\n                axis: meta.controller.options.indexAxis,\n                scale: meta.vScale,\n                line: line\n            };\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) continue;\n            source.fill = $143c3a913eb38704$var$_resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === \"beforeDraw\";\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) continue;\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) $143c3a913eb38704$var$_drawfill(chart.ctx, source, area);\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== \"beforeDatasetsDraw\") return;\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if ($143c3a913eb38704$var$_shouldApplyFill(source)) $143c3a913eb38704$var$_drawfill(chart.ctx, source, chart.chartArea);\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!$143c3a913eb38704$var$_shouldApplyFill(source) || options.drawTime !== \"beforeDatasetDraw\") return;\n        $143c3a913eb38704$var$_drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: \"beforeDatasetDraw\"\n    }\n};\nconst $143c3a913eb38704$var$getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight: boxHeight = fontSize, boxWidth: boxWidth = fontSize } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth: boxWidth,\n        boxHeight: boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst $143c3a913eb38704$var$itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass $143c3a913eb38704$var$Legend extends $143c3a913eb38704$export$db77ccec0bb4ccac {\n    constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n        this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = (0, $iUM1U.Q)(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        if (labelOpts.sort) legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        if (this.options.reverse) legendItems.reverse();\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options: options, ctx: ctx } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = (0, $iUM1U.a0)(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth: boxWidth, itemHeight: itemHeight } = $143c3a913eb38704$var$getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n    _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx: ctx, maxWidth: maxWidth, options: { labels: { padding: padding } } } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = \"left\";\n        ctx.textBaseline = \"middle\";\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top: top,\n                row: row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx: ctx, maxHeight: maxHeight, options: { labels: { padding: padding } } } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth: itemWidth, itemHeight: itemHeight } = $143c3a913eb38704$var$calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left: left,\n                top: currentColHeight,\n                col: col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) return;\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes, options: { align: align, labels: { padding: padding }, rtl: rtl } } = this;\n        const rtlHelper = (0, $iUM1U.az)(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = (0, $iUM1U.a2)(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = (0, $iUM1U.a2)(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = (0, $iUM1U.a2)(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = (0, $iUM1U.a2)(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === \"top\" || this.options.position === \"bottom\";\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            (0, $iUM1U.Y)(ctx, this);\n            this._draw();\n            (0, $iUM1U.$)(ctx);\n        }\n    }\n    _draw() {\n        const { options: opts, columnSizes: columnSizes, lineWidths: lineWidths, ctx: ctx } = this;\n        const { align: align, labels: labelOpts } = opts;\n        const defaultColor = (0, $iUM1U.d).color;\n        const rtlHelper = (0, $iUM1U.az)(opts.rtl, this.left, this.width);\n        const labelFont = (0, $iUM1U.a0)(labelOpts.font);\n        const { padding: padding } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign(\"left\");\n        ctx.textBaseline = \"middle\";\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth: boxWidth, boxHeight: boxHeight, itemHeight: itemHeight } = $143c3a913eb38704$var$getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) return;\n            ctx.save();\n            const lineWidth = (0, $iUM1U.v)(legendItem.lineWidth, 1);\n            ctx.fillStyle = (0, $iUM1U.v)(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = (0, $iUM1U.v)(legendItem.lineCap, \"butt\");\n            ctx.lineDashOffset = (0, $iUM1U.v)(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = (0, $iUM1U.v)(legendItem.lineJoin, \"miter\");\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = (0, $iUM1U.v)(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash((0, $iUM1U.v)(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                (0, $iUM1U.aD)(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = (0, $iUM1U.aw)(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) (0, $iUM1U.au)(ctx, {\n                    x: xBoxLeft,\n                    y: yBoxTop,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                else ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                ctx.fill();\n                if (lineWidth !== 0) ctx.stroke();\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            (0, $iUM1U.Z)(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) cursor = {\n            x: (0, $iUM1U.a2)(align, this.left + padding, this.right - lineWidths[0]),\n            y: this.top + padding + titleHeight,\n            line: 0\n        };\n        else cursor = {\n            x: this.left + padding,\n            y: (0, $iUM1U.a2)(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n            line: 0\n        };\n        (0, $iUM1U.aA)(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = (0, $iUM1U.a2)(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = (0, $iUM1U.a2)(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = (0, $iUM1U.aB)(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) cursor.x += width + padding;\n            else if (typeof legendItem.text !== \"string\") {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += $143c3a913eb38704$var$calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else cursor.y += lineHeight;\n        });\n        (0, $iUM1U.aC)(this.ctx, opts.textDirection);\n    }\n    drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = (0, $iUM1U.a0)(titleOpts.font);\n        const titlePadding = (0, $iUM1U.E)(titleOpts.padding);\n        if (!titleOpts.display) return;\n        const rtlHelper = (0, $iUM1U.az)(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = (0, $iUM1U.a2)(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + (0, $iUM1U.a2)(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = (0, $iUM1U.a2)(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign((0, $iUM1U.a1)(position));\n        ctx.textBaseline = \"middle\";\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        (0, $iUM1U.Z)(ctx, titleOpts.text, x, y, titleFont);\n    }\n    _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = (0, $iUM1U.a0)(titleOpts.font);\n        const titlePadding = (0, $iUM1U.E)(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n    _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if ((0, $iUM1U.aj)(x, this.left, this.right) && (0, $iUM1U.aj)(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if ((0, $iUM1U.aj)(x, hitBox.left, hitBox.left + hitBox.width) && (0, $iUM1U.aj)(y, hitBox.top, hitBox.top + hitBox.height)) return this.legendItems[i];\n            }\n        }\n        return null;\n    }\n    handleEvent(e) {\n        const opts = this.options;\n        if (!$143c3a913eb38704$var$isListened(e.type, opts)) return;\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === \"mousemove\" || e.type === \"mouseout\") {\n            const previous = this._hoveredItem;\n            const sameItem = $143c3a913eb38704$var$itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) (0, $iUM1U.Q)(opts.onLeave, [\n                e,\n                previous,\n                this\n            ], this);\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) (0, $iUM1U.Q)(opts.onHover, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        } else if (hoveredItem) (0, $iUM1U.Q)(opts.onClick, [\n            e,\n            hoveredItem,\n            this\n        ], this);\n    }\n}\nfunction $143c3a913eb38704$var$calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = $143c3a913eb38704$var$calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = $143c3a913eb38704$var$calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth: itemWidth,\n        itemHeight: itemHeight\n    };\n}\nfunction $143c3a913eb38704$var$calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== \"string\") legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction $143c3a913eb38704$var$calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== \"string\") itemHeight = $143c3a913eb38704$var$calculateLegendItemHeight(legendItem, fontLineHeight);\n    return itemHeight;\n}\nfunction $143c3a913eb38704$var$calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction $143c3a913eb38704$var$isListened(type, opts) {\n    if ((type === \"mousemove\" || type === \"mouseout\") && (opts.onHover || opts.onLeave)) return true;\n    if (opts.onClick && (type === \"click\" || type === \"mouseup\")) return true;\n    return false;\n}\nvar $143c3a913eb38704$export$ed247974535929c7 = {\n    id: \"legend\",\n    _element: $143c3a913eb38704$var$Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new $143c3a913eb38704$var$Legend({\n            ctx: chart.ctx,\n            options: options,\n            chart: chart\n        });\n        $143c3a913eb38704$export$1ecca0613f5e56d2.configure(chart, legend, options);\n        $143c3a913eb38704$export$1ecca0613f5e56d2.addBox(chart, legend);\n    },\n    stop (chart) {\n        $143c3a913eb38704$export$1ecca0613f5e56d2.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        $143c3a913eb38704$export$1ecca0613f5e56d2.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) chart.legend.handleEvent(args.event);\n    },\n    defaults: {\n        display: true,\n        position: \"top\",\n        align: \"center\",\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle: usePointStyle, pointStyle: pointStyle, textAlign: textAlign, color: color, useBorderRadius: useBorderRadius, borderRadius: borderRadius } } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = (0, $iUM1U.E)(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: \"center\",\n            text: \"\"\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith(\"on\"),\n        labels: {\n            _scriptable: (name)=>![\n                    \"generateLabels\",\n                    \"filter\",\n                    \"sort\"\n                ].includes(name)\n        }\n    }\n};\nclass $143c3a913eb38704$var$Title extends $143c3a913eb38704$export$db77ccec0bb4ccac {\n    constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = (0, $iUM1U.b)(opts.text) ? opts.text.length : 1;\n        this._padding = (0, $iUM1U.E)(opts.padding);\n        const textSize = lineCount * (0, $iUM1U.a0)(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) this.height = textSize;\n        else this.width = textSize;\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === \"top\" || pos === \"bottom\";\n    }\n    _drawArgs(offset) {\n        const { top: top, left: left, bottom: bottom, right: right, options: options } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = (0, $iUM1U.a2)(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === \"left\") {\n                titleX = left + offset;\n                titleY = (0, $iUM1U.a2)(align, bottom, top);\n                rotation = (0, $iUM1U.P) * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = (0, $iUM1U.a2)(align, top, bottom);\n                rotation = (0, $iUM1U.P) * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX: titleX,\n            titleY: titleY,\n            maxWidth: maxWidth,\n            rotation: rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) return;\n        const fontOpts = (0, $iUM1U.a0)(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX: titleX, titleY: titleY, maxWidth: maxWidth, rotation: rotation } = this._drawArgs(offset);\n        (0, $iUM1U.Z)(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth: maxWidth,\n            rotation: rotation,\n            textAlign: (0, $iUM1U.a1)(opts.align),\n            textBaseline: \"middle\",\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction $143c3a913eb38704$var$createTitle(chart, titleOpts) {\n    const title = new $143c3a913eb38704$var$Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart: chart\n    });\n    $143c3a913eb38704$export$1ecca0613f5e56d2.configure(chart, title, titleOpts);\n    $143c3a913eb38704$export$1ecca0613f5e56d2.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar $143c3a913eb38704$export$f99233281efd08a0 = {\n    id: \"title\",\n    _element: $143c3a913eb38704$var$Title,\n    start (chart, _args, options) {\n        $143c3a913eb38704$var$createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        $143c3a913eb38704$export$1ecca0613f5e56d2.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        $143c3a913eb38704$export$1ecca0613f5e56d2.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: \"center\",\n        display: false,\n        font: {\n            weight: \"bold\"\n        },\n        fullSize: true,\n        padding: 10,\n        position: \"top\",\n        text: \"\",\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: \"color\"\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\nconst $143c3a913eb38704$var$map = new WeakMap();\nvar $143c3a913eb38704$export$d5c56664638992a4 = {\n    id: \"subtitle\",\n    start (chart, _args, options) {\n        const title = new $143c3a913eb38704$var$Title({\n            ctx: chart.ctx,\n            options: options,\n            chart: chart\n        });\n        $143c3a913eb38704$export$1ecca0613f5e56d2.configure(chart, title, options);\n        $143c3a913eb38704$export$1ecca0613f5e56d2.addBox(chart, title);\n        $143c3a913eb38704$var$map.set(chart, title);\n    },\n    stop (chart) {\n        $143c3a913eb38704$export$1ecca0613f5e56d2.removeBox(chart, $143c3a913eb38704$var$map.get(chart));\n        $143c3a913eb38704$var$map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = $143c3a913eb38704$var$map.get(chart);\n        $143c3a913eb38704$export$1ecca0613f5e56d2.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: \"center\",\n        display: false,\n        font: {\n            weight: \"normal\"\n        },\n        fullSize: true,\n        padding: 0,\n        position: \"top\",\n        text: \"\",\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: \"color\"\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\nconst $143c3a913eb38704$var$positioners = {\n    average (items) {\n        if (!items.length) return false;\n        let i, len;\n        let x = 0;\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                x += pos.x;\n                y += pos.y;\n                ++count;\n            }\n        }\n        return {\n            x: x / count,\n            y: y / count\n        };\n    },\n    nearest (items, eventPosition) {\n        if (!items.length) return false;\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = (0, $iUM1U.aE)(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x: x,\n            y: y\n        };\n    }\n};\nfunction $143c3a913eb38704$var$pushOrConcat(base, toPush) {\n    if (toPush) {\n        if ((0, $iUM1U.b)(toPush)) Array.prototype.push.apply(base, toPush);\n        else base.push(toPush);\n    }\n    return base;\n}\nfunction $143c3a913eb38704$var$splitNewlines(str) {\n    if ((typeof str === \"string\" || str instanceof String) && str.indexOf(\"\\n\") > -1) return str.split(\"\\n\");\n    return str;\n}\nfunction $143c3a913eb38704$var$createTooltipItem(chart, item) {\n    const { element: element, datasetIndex: datasetIndex, index: index } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label: label, value: value } = controller.getLabelAndValue(index);\n    return {\n        chart: chart,\n        label: label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex: datasetIndex,\n        element: element\n    };\n}\nfunction $143c3a913eb38704$var$getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body: body, footer: footer, title: title } = tooltip;\n    const { boxWidth: boxWidth, boxHeight: boxHeight } = options;\n    const bodyFont = (0, $iUM1U.a0)(options.bodyFont);\n    const titleFont = (0, $iUM1U.a0)(options.titleFont);\n    const footerFont = (0, $iUM1U.a0)(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = (0, $iUM1U.E)(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    (0, $iUM1U.F)(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    (0, $iUM1U.F)(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    (0, $iUM1U.F)(body, (bodyItem)=>{\n        (0, $iUM1U.F)(bodyItem.before, maxLineWidth);\n        (0, $iUM1U.F)(bodyItem.lines, maxLineWidth);\n        (0, $iUM1U.F)(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    (0, $iUM1U.F)(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width: width,\n        height: height\n    };\n}\nfunction $143c3a913eb38704$var$determineYAlign(chart, size) {\n    const { y: y, height: height } = size;\n    if (y < height / 2) return \"top\";\n    else if (y > chart.height - height / 2) return \"bottom\";\n    return \"center\";\n}\nfunction $143c3a913eb38704$var$doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x: x, width: width } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === \"left\" && x + width + caret > chart.width) return true;\n    if (xAlign === \"right\" && x - width - caret < 0) return true;\n}\nfunction $143c3a913eb38704$var$determineXAlign(chart, options, size, yAlign) {\n    const { x: x, width: width } = size;\n    const { width: chartWidth, chartArea: { left: left, right: right } } = chart;\n    let xAlign = \"center\";\n    if (yAlign === \"center\") xAlign = x <= (left + right) / 2 ? \"left\" : \"right\";\n    else if (x <= width / 2) xAlign = \"left\";\n    else if (x >= chartWidth - width / 2) xAlign = \"right\";\n    if ($143c3a913eb38704$var$doesNotFitWithAlign(xAlign, chart, options, size)) xAlign = \"center\";\n    return xAlign;\n}\nfunction $143c3a913eb38704$var$determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || $143c3a913eb38704$var$determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || $143c3a913eb38704$var$determineXAlign(chart, options, size, yAlign),\n        yAlign: yAlign\n    };\n}\nfunction $143c3a913eb38704$var$alignX(size, xAlign) {\n    let { x: x, width: width } = size;\n    if (xAlign === \"right\") x -= width;\n    else if (xAlign === \"center\") x -= width / 2;\n    return x;\n}\nfunction $143c3a913eb38704$var$alignY(size, yAlign, paddingAndSize) {\n    let { y: y, height: height } = size;\n    if (yAlign === \"top\") y += paddingAndSize;\n    else if (yAlign === \"bottom\") y -= height + paddingAndSize;\n    else y -= height / 2;\n    return y;\n}\nfunction $143c3a913eb38704$var$getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize: caretSize, caretPadding: caretPadding, cornerRadius: cornerRadius } = options;\n    const { xAlign: xAlign, yAlign: yAlign } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft: topLeft, topRight: topRight, bottomLeft: bottomLeft, bottomRight: bottomRight } = (0, $iUM1U.aw)(cornerRadius);\n    let x = $143c3a913eb38704$var$alignX(size, xAlign);\n    const y = $143c3a913eb38704$var$alignY(size, yAlign, paddingAndSize);\n    if (yAlign === \"center\") {\n        if (xAlign === \"left\") x += paddingAndSize;\n        else if (xAlign === \"right\") x -= paddingAndSize;\n    } else if (xAlign === \"left\") x -= Math.max(topLeft, bottomLeft) + caretSize;\n    else if (xAlign === \"right\") x += Math.max(topRight, bottomRight) + caretSize;\n    return {\n        x: (0, $iUM1U.S)(x, 0, chart.width - size.width),\n        y: (0, $iUM1U.S)(y, 0, chart.height - size.height)\n    };\n}\nfunction $143c3a913eb38704$var$getAlignedX(tooltip, align, options) {\n    const padding = (0, $iUM1U.E)(options.padding);\n    return align === \"center\" ? tooltip.x + tooltip.width / 2 : align === \"right\" ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction $143c3a913eb38704$var$getBeforeAfterBodyLines(callback) {\n    return $143c3a913eb38704$var$pushOrConcat([], $143c3a913eb38704$var$splitNewlines(callback));\n}\nfunction $143c3a913eb38704$var$createTooltipContext(parent, tooltip, tooltipItems) {\n    return (0, $iUM1U.j)(parent, {\n        tooltip: tooltip,\n        tooltipItems: tooltipItems,\n        type: \"tooltip\"\n    });\n}\nfunction $143c3a913eb38704$var$overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst $143c3a913eb38704$var$defaultCallbacks = {\n    beforeTitle: (0, $iUM1U.aF),\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === \"dataset\") return item.dataset.label || \"\";\n            else if (item.label) return item.label;\n            else if (labelCount > 0 && item.dataIndex < labelCount) return labels[item.dataIndex];\n        }\n        return \"\";\n    },\n    afterTitle: (0, $iUM1U.aF),\n    beforeBody: (0, $iUM1U.aF),\n    beforeLabel: (0, $iUM1U.aF),\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === \"dataset\") return tooltipItem.label + \": \" + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        let label = tooltipItem.dataset.label || \"\";\n        if (label) label += \": \";\n        const value = tooltipItem.formattedValue;\n        if (!(0, $iUM1U.k)(value)) label += value;\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: (0, $iUM1U.aF),\n    afterBody: (0, $iUM1U.aF),\n    beforeFooter: (0, $iUM1U.aF),\n    footer: (0, $iUM1U.aF),\n    afterFooter: (0, $iUM1U.aF)\n};\nfunction $143c3a913eb38704$var$invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === \"undefined\") return $143c3a913eb38704$var$defaultCallbacks[name].call(ctx, arg);\n    return result;\n}\nclass $143c3a913eb38704$var$Tooltip extends $143c3a913eb38704$export$db77ccec0bb4ccac {\n    static positioners = $143c3a913eb38704$var$positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n    _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) return cached;\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new $143c3a913eb38704$export$8ab227dac26677d(this.chart, opts);\n        if (opts._cacheable) this._cachedAnimations = Object.freeze(animations);\n        return animations;\n    }\n    getContext() {\n        return this.$context || (this.$context = $143c3a913eb38704$var$createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks: callbacks } = options;\n        const beforeTitle = $143c3a913eb38704$var$invokeCallbackWithFallback(callbacks, \"beforeTitle\", this, context);\n        const title = $143c3a913eb38704$var$invokeCallbackWithFallback(callbacks, \"title\", this, context);\n        const afterTitle = $143c3a913eb38704$var$invokeCallbackWithFallback(callbacks, \"afterTitle\", this, context);\n        let lines = [];\n        lines = $143c3a913eb38704$var$pushOrConcat(lines, $143c3a913eb38704$var$splitNewlines(beforeTitle));\n        lines = $143c3a913eb38704$var$pushOrConcat(lines, $143c3a913eb38704$var$splitNewlines(title));\n        lines = $143c3a913eb38704$var$pushOrConcat(lines, $143c3a913eb38704$var$splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return $143c3a913eb38704$var$getBeforeAfterBodyLines($143c3a913eb38704$var$invokeCallbackWithFallback(options.callbacks, \"beforeBody\", this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks: callbacks } = options;\n        const bodyItems = [];\n        (0, $iUM1U.F)(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = $143c3a913eb38704$var$overrideCallbacks(callbacks, context);\n            $143c3a913eb38704$var$pushOrConcat(bodyItem.before, $143c3a913eb38704$var$splitNewlines($143c3a913eb38704$var$invokeCallbackWithFallback(scoped, \"beforeLabel\", this, context)));\n            $143c3a913eb38704$var$pushOrConcat(bodyItem.lines, $143c3a913eb38704$var$invokeCallbackWithFallback(scoped, \"label\", this, context));\n            $143c3a913eb38704$var$pushOrConcat(bodyItem.after, $143c3a913eb38704$var$splitNewlines($143c3a913eb38704$var$invokeCallbackWithFallback(scoped, \"afterLabel\", this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return $143c3a913eb38704$var$getBeforeAfterBodyLines($143c3a913eb38704$var$invokeCallbackWithFallback(options.callbacks, \"afterBody\", this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks: callbacks } = options;\n        const beforeFooter = $143c3a913eb38704$var$invokeCallbackWithFallback(callbacks, \"beforeFooter\", this, tooltipItems);\n        const footer = $143c3a913eb38704$var$invokeCallbackWithFallback(callbacks, \"footer\", this, tooltipItems);\n        const afterFooter = $143c3a913eb38704$var$invokeCallbackWithFallback(callbacks, \"afterFooter\", this, tooltipItems);\n        let lines = [];\n        lines = $143c3a913eb38704$var$pushOrConcat(lines, $143c3a913eb38704$var$splitNewlines(beforeFooter));\n        lines = $143c3a913eb38704$var$pushOrConcat(lines, $143c3a913eb38704$var$splitNewlines(footer));\n        lines = $143c3a913eb38704$var$pushOrConcat(lines, $143c3a913eb38704$var$splitNewlines(afterFooter));\n        return lines;\n    }\n    _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i)tooltipItems.push($143c3a913eb38704$var$createTooltipItem(this.chart, active[i]));\n        if (options.filter) tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        if (options.itemSort) tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        (0, $iUM1U.F)(tooltipItems, (context)=>{\n            const scoped = $143c3a913eb38704$var$overrideCallbacks(options.callbacks, context);\n            labelColors.push($143c3a913eb38704$var$invokeCallbackWithFallback(scoped, \"labelColor\", this, context));\n            labelPointStyles.push($143c3a913eb38704$var$invokeCallbackWithFallback(scoped, \"labelPointStyle\", this, context));\n            labelTextColors.push($143c3a913eb38704$var$invokeCallbackWithFallback(scoped, \"labelTextColor\", this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) properties = {\n                opacity: 0\n            };\n        } else {\n            const position = $143c3a913eb38704$var$positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = $143c3a913eb38704$var$getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = $143c3a913eb38704$var$determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = $143c3a913eb38704$var$getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) this._resolveAnimations().update(this, properties);\n        if (changed && options.external) options.external.call(this, {\n            chart: this.chart,\n            tooltip: this,\n            replay: replay\n        });\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign: xAlign, yAlign: yAlign } = this;\n        const { caretSize: caretSize, cornerRadius: cornerRadius } = options;\n        const { topLeft: topLeft, topRight: topRight, bottomLeft: bottomLeft, bottomRight: bottomRight } = (0, $iUM1U.aw)(cornerRadius);\n        const { x: ptX, y: ptY } = tooltipPoint;\n        const { width: width, height: height } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === \"center\") {\n            y2 = ptY + height / 2;\n            if (xAlign === \"left\") {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === \"left\") x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            else if (xAlign === \"right\") x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            else x2 = this.caretX;\n            if (yAlign === \"top\") {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1: x1,\n            x2: x2,\n            x3: x3,\n            y1: y1,\n            y2: y2,\n            y3: y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = (0, $iUM1U.az)(options.rtl, this.x, this.width);\n            pt.x = $143c3a913eb38704$var$getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = \"middle\";\n            titleFont = (0, $iUM1U.a0)(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) pt.y += options.titleMarginBottom - titleSpacing;\n            }\n        }\n    }\n    _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight: boxHeight, boxWidth: boxWidth } = options;\n        const bodyFont = (0, $iUM1U.a0)(options.bodyFont);\n        const colorX = $143c3a913eb38704$var$getAlignedX(this, \"left\", options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            (0, $iUM1U.at)(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            (0, $iUM1U.at)(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = (0, $iUM1U.i)(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = (0, $iUM1U.aw)(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                (0, $iUM1U.au)(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                (0, $iUM1U.au)(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body: body } = this;\n        const { bodySpacing: bodySpacing, bodyAlign: bodyAlign, displayColors: displayColors, boxHeight: boxHeight, boxWidth: boxWidth, boxPadding: boxPadding } = options;\n        const bodyFont = (0, $iUM1U.a0)(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = (0, $iUM1U.az)(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = \"middle\";\n        ctx.font = bodyFont.string;\n        pt.x = $143c3a913eb38704$var$getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        (0, $iUM1U.F)(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== \"right\" ? bodyAlign === \"center\" ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            (0, $iUM1U.F)(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            (0, $iUM1U.F)(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        (0, $iUM1U.F)(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = (0, $iUM1U.az)(options.rtl, this.x, this.width);\n            pt.x = $143c3a913eb38704$var$getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = \"middle\";\n            footerFont = (0, $iUM1U.a0)(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign: xAlign, yAlign: yAlign } = this;\n        const { x: x, y: y } = pt;\n        const { width: width, height: height } = tooltipSize;\n        const { topLeft: topLeft, topRight: topRight, bottomLeft: bottomLeft, bottomRight: bottomRight } = (0, $iUM1U.aw)(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === \"top\") this.drawCaret(pt, ctx, tooltipSize, options);\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === \"center\" && xAlign === \"right\") this.drawCaret(pt, ctx, tooltipSize, options);\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === \"bottom\") this.drawCaret(pt, ctx, tooltipSize, options);\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === \"center\" && xAlign === \"left\") this.drawCaret(pt, ctx, tooltipSize, options);\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) ctx.stroke();\n    }\n    _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = $143c3a913eb38704$var$positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) return;\n            const size = this._size = $143c3a913eb38704$var$getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = $143c3a913eb38704$var$determineAlignment(chart, options, positionAndSize);\n            const point = $143c3a913eb38704$var$getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n    _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) return;\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = (0, $iUM1U.E)(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            (0, $iUM1U.aA)(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            (0, $iUM1U.aC)(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n    getActiveElements() {\n        return this._active || [];\n    }\n    setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex: datasetIndex, index: index })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) throw new Error(\"Cannot find a dataset at index \" + datasetIndex);\n            return {\n                datasetIndex: datasetIndex,\n                element: meta.data[index],\n                index: index\n            };\n        });\n        const changed = !(0, $iUM1U.ah)(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n    handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) return false;\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !(0, $iUM1U.ah)(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n    _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === \"mouseout\") return [];\n        if (!inChartArea) return lastActive;\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) active.reverse();\n        return active;\n    }\n    _positionChanged(active, e) {\n        const { caretX: caretX, caretY: caretY, options: options } = this;\n        const position = $143c3a913eb38704$var$positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar $143c3a913eb38704$export$28c660c63b792dea = {\n    id: \"tooltip\",\n    _element: $143c3a913eb38704$var$Tooltip,\n    positioners: $143c3a913eb38704$var$positioners,\n    afterInit (chart, _args, options) {\n        if (options) chart.tooltip = new $143c3a913eb38704$var$Tooltip({\n            chart: chart,\n            options: options\n        });\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) chart.tooltip.initialize(options);\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) chart.tooltip.initialize(options);\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip: tooltip\n            };\n            if (chart.notifyPlugins(\"beforeTooltipDraw\", {\n                ...args,\n                cancelable: true\n            }) === false) return;\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins(\"afterTooltipDraw\", args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) args.changed = true;\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: \"average\",\n        backgroundColor: \"rgba(0,0,0,0.8)\",\n        titleColor: \"#fff\",\n        titleFont: {\n            weight: \"bold\"\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: \"left\",\n        bodyColor: \"#fff\",\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: \"left\",\n        footerColor: \"#fff\",\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: \"bold\"\n        },\n        footerAlign: \"left\",\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: \"#fff\",\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: \"rgba(0,0,0,0)\",\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: \"easeOutQuart\"\n        },\n        animations: {\n            numbers: {\n                type: \"number\",\n                properties: [\n                    \"x\",\n                    \"y\",\n                    \"width\",\n                    \"height\",\n                    \"caretX\",\n                    \"caretY\"\n                ]\n            },\n            opacity: {\n                easing: \"linear\",\n                duration: 200\n            }\n        },\n        callbacks: $143c3a913eb38704$var$defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: \"font\",\n        footerFont: \"font\",\n        titleFont: \"font\"\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== \"filter\" && name !== \"itemSort\" && name !== \"external\",\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: \"animation\"\n        }\n    },\n    additionalOptionScopes: [\n        \"interaction\"\n    ]\n};\nvar $143c3a913eb38704$export$8b3ca321c77fdea6 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Colors: $143c3a913eb38704$export$c537fa0d021d010b,\n    Decimation: $143c3a913eb38704$export$be17f937e9aa7533,\n    Filler: $143c3a913eb38704$export$d19ba4d812bed757,\n    Legend: $143c3a913eb38704$export$ed247974535929c7,\n    SubTitle: $143c3a913eb38704$export$d5c56664638992a4,\n    Title: $143c3a913eb38704$export$f99233281efd08a0,\n    Tooltip: $143c3a913eb38704$export$28c660c63b792dea\n});\nconst $143c3a913eb38704$var$addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === \"string\") {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index: index,\n            label: raw\n        });\n    } else if (isNaN(raw)) index = null;\n    return index;\n};\nfunction $143c3a913eb38704$var$findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) return $143c3a913eb38704$var$addIfString(labels, raw, index, addedLabels);\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst $143c3a913eb38704$var$validIndex = (index, max)=>index === null ? null : (0, $iUM1U.S)(Math.round(index), 0, max);\nfunction $143c3a913eb38704$var$_getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) return labels[value];\n    return value;\n}\nclass $143c3a913eb38704$export$29e663ba4d09fe7 extends $143c3a913eb38704$export$d60cfc58d3c358b6 {\n    static id = \"category\";\n    static defaults = {\n        ticks: {\n            callback: $143c3a913eb38704$var$_getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n        this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index: index, label: label } of added)if (labels[index] === label) labels.splice(index, 1);\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if ((0, $iUM1U.k)(raw)) return null;\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : $143c3a913eb38704$var$findOrAddLabel(labels, raw, (0, $iUM1U.v)(index, raw), this._addedLabels);\n        return $143c3a913eb38704$var$validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined: minDefined, maxDefined: maxDefined } = this.getUserBounds();\n        let { min: min, max: max } = this.getMinMax(true);\n        if (this.options.bounds === \"ticks\") {\n            if (!minDefined) min = 0;\n            if (!maxDefined) max = this.getLabels().length - 1;\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++)ticks.push({\n            value: value\n        });\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return $143c3a913eb38704$var$_getLabelForValue.call(this, value);\n    }\n    configure() {\n        super.configure();\n        if (!this.isHorizontal()) this._reversePixels = !this._reversePixels;\n    }\n    getPixelForValue(value) {\n        if (typeof value !== \"number\") value = this.parse(value);\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) return null;\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\nfunction $143c3a913eb38704$var$generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds: bounds, step: step, min: min, max: max, precision: precision, count: count, maxTicks: maxTicks, maxDigits: maxDigits, includeBounds: includeBounds } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin, max: rmax } = dataRange;\n    const minDefined = !(0, $iUM1U.k)(min);\n    const maxDefined = !(0, $iUM1U.k)(max);\n    const countDefined = !(0, $iUM1U.k)(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = (0, $iUM1U.aH)((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) return [\n        {\n            value: rmin\n        },\n        {\n            value: rmax\n        }\n    ];\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) spacing = (0, $iUM1U.aH)(numSpaces * spacing / maxSpaces / unit) * unit;\n    if (!(0, $iUM1U.k)(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === \"ticks\") {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && (0, $iUM1U.aI)((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if ((0, $iUM1U.aJ)(numSpaces, Math.round(numSpaces), spacing / 1000)) numSpaces = Math.round(numSpaces);\n        else numSpaces = Math.ceil(numSpaces);\n    }\n    const decimalPlaces = Math.max((0, $iUM1U.aK)(spacing), (0, $iUM1U.aK)(niceMin));\n    factor = Math.pow(10, (0, $iUM1U.k)(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) j++;\n            if ((0, $iUM1U.aJ)(Math.round((niceMin + j * spacing) * factor) / factor, min, $143c3a913eb38704$var$relativeLabelSize(min, minSpacing, generationOptions))) j++;\n        } else if (niceMin < min) j++;\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) break;\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && (0, $iUM1U.aJ)(ticks[ticks.length - 1].value, max, $143c3a913eb38704$var$relativeLabelSize(max, minSpacing, generationOptions))) ticks[ticks.length - 1].value = max;\n        else ticks.push({\n            value: max\n        });\n    } else if (!maxDefined || niceMax === max) ticks.push({\n        value: niceMax\n    });\n    return ticks;\n}\nfunction $143c3a913eb38704$var$relativeLabelSize(value, minSpacing, { horizontal: horizontal, minRotation: minRotation }) {\n    const rad = (0, $iUM1U.t)(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * (\"\" + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass $143c3a913eb38704$var$LinearScaleBase extends $143c3a913eb38704$export$d60cfc58d3c358b6 {\n    constructor(cfg){\n        super(cfg);\n        this.start = undefined;\n        this.end = undefined;\n        this._startValue = undefined;\n        this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if ((0, $iUM1U.k)(raw)) return null;\n        if ((typeof raw === \"number\" || raw instanceof Number) && !isFinite(+raw)) return null;\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero: beginAtZero } = this.options;\n        const { minDefined: minDefined, maxDefined: maxDefined } = this.getUserBounds();\n        let { min: min, max: max } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = (0, $iUM1U.s)(min);\n            const maxSign = (0, $iUM1U.s)(max);\n            if (minSign < 0 && maxSign < 0) setMax(0);\n            else if (minSign > 0 && maxSign > 0) setMin(0);\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) setMin(min - offset);\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit: maxTicksLimit, stepSize: stepSize } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) maxTicks = Math.min(maxTicksLimit, maxTicks);\n        return maxTicks;\n    }\n    computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks: maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = $143c3a913eb38704$var$generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === \"ticks\") (0, $iUM1U.aG)(ticks, this, \"value\");\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n    configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return (0, $iUM1U.o)(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\nclass $143c3a913eb38704$export$e7f4e5e8656f0b93 extends $143c3a913eb38704$var$LinearScaleBase {\n    static id = \"linear\";\n    static defaults = {\n        ticks: {\n            callback: (0, $iUM1U.aL).formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min: min, max: max } = this.getMinMax(true);\n        this.min = (0, $iUM1U.g)(min) ? min : 0;\n        this.max = (0, $iUM1U.g)(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n    computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = (0, $iUM1U.t)(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\nconst $143c3a913eb38704$var$log10Floor = (v)=>Math.floor((0, $iUM1U.aM)(v));\nconst $143c3a913eb38704$var$changeExponent = (v, m)=>Math.pow(10, $143c3a913eb38704$var$log10Floor(v) + m);\nfunction $143c3a913eb38704$var$isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, $143c3a913eb38704$var$log10Floor(tickVal));\n    return remain === 1;\n}\nfunction $143c3a913eb38704$var$steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction $143c3a913eb38704$var$startExp(min, max) {\n    const range = max - min;\n    let rangeExp = $143c3a913eb38704$var$log10Floor(range);\n    while($143c3a913eb38704$var$steps(min, max, rangeExp) > 10)rangeExp++;\n    while($143c3a913eb38704$var$steps(min, max, rangeExp) < 10)rangeExp--;\n    return Math.min(rangeExp, $143c3a913eb38704$var$log10Floor(min));\n}\nfunction $143c3a913eb38704$var$generateTicks(generationOptions, { min: min, max: max }) {\n    min = (0, $iUM1U.O)(generationOptions.min, min);\n    const ticks = [];\n    const minExp = $143c3a913eb38704$var$log10Floor(min);\n    let exp = $143c3a913eb38704$var$startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = (0, $iUM1U.O)(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value: value,\n            major: $143c3a913eb38704$var$isMajor(value),\n            significand: significand\n        });\n        if (significand >= 10) significand = significand < 15 ? 15 : 20;\n        else significand++;\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = (0, $iUM1U.O)(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: $143c3a913eb38704$var$isMajor(lastTick),\n        significand: significand\n    });\n    return ticks;\n}\nclass $143c3a913eb38704$export$85295eaf7cb3ac3e extends $143c3a913eb38704$export$d60cfc58d3c358b6 {\n    static id = \"logarithmic\";\n    static defaults = {\n        ticks: {\n            callback: (0, $iUM1U.aL).formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n        this.start = undefined;\n        this.end = undefined;\n        this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = $143c3a913eb38704$var$LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return (0, $iUM1U.g)(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min: min, max: max } = this.getMinMax(true);\n        this.min = (0, $iUM1U.g)(min) ? Math.max(0, min) : null;\n        this.max = (0, $iUM1U.g)(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) this._zero = true;\n        if (this._zero && this.min !== this._suggestedMin && !(0, $iUM1U.g)(this._userMin)) this.min = min === $143c3a913eb38704$var$changeExponent(this.min, 0) ? $143c3a913eb38704$var$changeExponent(this.min, -1) : $143c3a913eb38704$var$changeExponent(this.min, 0);\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined: minDefined, maxDefined: maxDefined } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin($143c3a913eb38704$var$changeExponent(min, -1));\n                setMax($143c3a913eb38704$var$changeExponent(max, 1));\n            }\n        }\n        if (min <= 0) setMin($143c3a913eb38704$var$changeExponent(max, -1));\n        if (max <= 0) setMax($143c3a913eb38704$var$changeExponent(min, 1));\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = $143c3a913eb38704$var$generateTicks(generationOptions, this);\n        if (opts.bounds === \"ticks\") (0, $iUM1U.aG)(ticks, this, \"value\");\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return value === undefined ? \"0\" : (0, $iUM1U.o)(value, this.chart.options.locale, this.options.ticks.format);\n    }\n    configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = (0, $iUM1U.aM)(start);\n        this._valueRange = (0, $iUM1U.aM)(this.max) - (0, $iUM1U.aM)(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) value = this.min;\n        if (value === null || isNaN(value)) return NaN;\n        return this.getPixelForDecimal(value === this.min ? 0 : ((0, $iUM1U.aM)(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\nfunction $143c3a913eb38704$var$getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = (0, $iUM1U.E)(tickOpts.backdropPadding);\n        return (0, $iUM1U.v)(tickOpts.font && tickOpts.font.size, (0, $iUM1U.d).font.size) + padding.height;\n    }\n    return 0;\n}\nfunction $143c3a913eb38704$var$measureLabelSize(ctx, font, label) {\n    label = (0, $iUM1U.b)(label) ? label : [\n        label\n    ];\n    return {\n        w: (0, $iUM1U.aN)(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction $143c3a913eb38704$var$determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) return {\n        start: pos - size / 2,\n        end: pos + size / 2\n    };\n    else if (angle < min || angle > max) return {\n        start: pos - size,\n        end: pos\n    };\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\nfunction $143c3a913eb38704$var$fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? (0, $iUM1U.P) / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = (0, $iUM1U.a0)(opts.font);\n        const textSize = $143c3a913eb38704$var$measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = (0, $iUM1U.ay)(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round((0, $iUM1U.U)(angleRadians));\n        const hLimits = $143c3a913eb38704$var$determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = $143c3a913eb38704$var$determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        $143c3a913eb38704$var$updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = $143c3a913eb38704$var$buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction $143c3a913eb38704$var$updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction $143c3a913eb38704$var$createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra: extra, additionalAngle: additionalAngle, padding: padding, size: size } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round((0, $iUM1U.U)((0, $iUM1U.ay)(pointLabelPosition.angle + (0, $iUM1U.H))));\n    const y = $143c3a913eb38704$var$yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = $143c3a913eb38704$var$getTextAlignForAngle(angle);\n    const left = $143c3a913eb38704$var$leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y: y,\n        textAlign: textAlign,\n        left: left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction $143c3a913eb38704$var$isNotOverlapped(item, area) {\n    if (!area) return true;\n    const { left: left, top: top, right: right, bottom: bottom } = item;\n    const apexesInArea = (0, $iUM1U.C)({\n        x: left,\n        y: top\n    }, area) || (0, $iUM1U.C)({\n        x: left,\n        y: bottom\n    }, area) || (0, $iUM1U.C)({\n        x: right,\n        y: top\n    }, area) || (0, $iUM1U.C)({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction $143c3a913eb38704$var$buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels: centerPointLabels, display: display } = opts.pointLabels;\n    const itemOpts = {\n        extra: $143c3a913eb38704$var$getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? (0, $iUM1U.P) / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = $143c3a913eb38704$var$createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === \"auto\") {\n            item.visible = $143c3a913eb38704$var$isNotOverlapped(item, area);\n            if (item.visible) area = item;\n        }\n    }\n    return items;\n}\nfunction $143c3a913eb38704$var$getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) return \"center\";\n    else if (angle < 180) return \"left\";\n    return \"right\";\n}\nfunction $143c3a913eb38704$var$leftForTextAlign(x, w, align) {\n    if (align === \"right\") x -= w;\n    else if (align === \"center\") x -= w / 2;\n    return x;\n}\nfunction $143c3a913eb38704$var$yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) y -= h / 2;\n    else if (angle > 270 || angle < 90) y -= h;\n    return y;\n}\nfunction $143c3a913eb38704$var$drawPointLabelBox(ctx, opts, item) {\n    const { left: left, top: top, right: right, bottom: bottom } = item;\n    const { backdropColor: backdropColor } = opts;\n    if (!(0, $iUM1U.k)(backdropColor)) {\n        const borderRadius = (0, $iUM1U.aw)(opts.borderRadius);\n        const padding = (0, $iUM1U.E)(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            (0, $iUM1U.au)(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n}\nfunction $143c3a913eb38704$var$drawPointLabels(scale, labelCount) {\n    const { ctx: ctx, options: { pointLabels: pointLabels } } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) continue;\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        $143c3a913eb38704$var$drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = (0, $iUM1U.a0)(optsAtIndex.font);\n        const { x: x, y: y, textAlign: textAlign } = item;\n        (0, $iUM1U.Z)(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: \"middle\"\n        });\n    }\n}\nfunction $143c3a913eb38704$var$pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx: ctx } = scale;\n    if (circular) ctx.arc(scale.xCenter, scale.yCenter, radius, 0, (0, $iUM1U.T));\n    else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction $143c3a913eb38704$var$drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color: color, lineWidth: lineWidth } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) return;\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    $143c3a913eb38704$var$pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction $143c3a913eb38704$var$createPointLabelContext(parent, index, label) {\n    return (0, $iUM1U.j)(parent, {\n        label: label,\n        index: index,\n        type: \"pointLabel\"\n    });\n}\nclass $143c3a913eb38704$export$cfafc36d95386d38 extends $143c3a913eb38704$var$LinearScaleBase {\n    static id = \"radialLinear\";\n    static defaults = {\n        display: true,\n        animate: true,\n        position: \"chartArea\",\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: (0, $iUM1U.aL).formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        \"angleLines.color\": \"borderColor\",\n        \"pointLabels.color\": \"color\",\n        \"ticks.color\": \"color\"\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: \"grid\"\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n        this.xCenter = undefined;\n        this.yCenter = undefined;\n        this.drawingArea = undefined;\n        this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = (0, $iUM1U.E)($143c3a913eb38704$var$getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min: min, max: max } = this.getMinMax(false);\n        this.min = (0, $iUM1U.g)(min) && !isNaN(min) ? min : 0;\n        this.max = (0, $iUM1U.g)(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n    computeTickLimit() {\n        return Math.ceil(this.drawingArea / $143c3a913eb38704$var$getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        $143c3a913eb38704$var$LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = (0, $iUM1U.Q)(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : \"\";\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) $143c3a913eb38704$var$fitWithPointLabels(this);\n        else this.setCenterPoint(0, 0, 0, 0);\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = (0, $iUM1U.T) / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return (0, $iUM1U.ay)(index * angleMultiplier + (0, $iUM1U.t)(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if ((0, $iUM1U.k)(value)) return NaN;\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) return (this.max - value) * scalingFactor;\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if ((0, $iUM1U.k)(distance)) return NaN;\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return $143c3a913eb38704$var$createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - (0, $iUM1U.H) + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle: angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left: left, top: top, right: right, bottom: bottom } = this._pointLabelItems[index];\n        return {\n            left: left,\n            top: top,\n            right: right,\n            bottom: bottom\n        };\n    }\n    drawBackground() {\n        const { backgroundColor: backgroundColor, grid: { circular: circular } } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            $143c3a913eb38704$var$pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n    drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines: angleLines, grid: grid, border: border } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) $143c3a913eb38704$var$drawPointLabels(this, labelCount);\n        if (grid.display) this.ticks.forEach((tick, index)=>{\n            if (index !== 0) {\n                offset = this.getDistanceFromCenterForValue(tick.value);\n                const context = this.getContext(index);\n                const optsAtIndex = grid.setContext(context);\n                const optsAtIndexBorder = border.setContext(context);\n                $143c3a913eb38704$var$drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n            }\n        });\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color: color, lineWidth: lineWidth } = optsAtIndex;\n                if (!lineWidth || !color) continue;\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n    drawBorder() {}\n    drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) return;\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && !opts.reverse) return;\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = (0, $iUM1U.a0)(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = (0, $iUM1U.E)(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            (0, $iUM1U.Z)(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n    drawTitle() {}\n}\nconst $143c3a913eb38704$var$INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\nconst $143c3a913eb38704$var$UNITS = /* #__PURE__ */ Object.keys($143c3a913eb38704$var$INTERVALS);\nfunction $143c3a913eb38704$var$sorter(a, b) {\n    return a - b;\n}\nfunction $143c3a913eb38704$var$parse(scale, input) {\n    if ((0, $iUM1U.k)(input)) return null;\n    const adapter = scale._adapter;\n    const { parser: parser, round: round, isoWeekday: isoWeekday } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === \"function\") value = parser(value);\n    if (!(0, $iUM1U.g)(value)) value = typeof parser === \"string\" ? adapter.parse(value, parser) : adapter.parse(value);\n    if (value === null) return null;\n    if (round) value = round === \"week\" && ((0, $iUM1U.x)(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, \"isoWeek\", isoWeekday) : adapter.startOf(value, round);\n    return +value;\n}\nfunction $143c3a913eb38704$var$determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = $143c3a913eb38704$var$UNITS.length;\n    for(let i = $143c3a913eb38704$var$UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = $143c3a913eb38704$var$INTERVALS[$143c3a913eb38704$var$UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) return $143c3a913eb38704$var$UNITS[i];\n    }\n    return $143c3a913eb38704$var$UNITS[ilen - 1];\n}\nfunction $143c3a913eb38704$var$determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = $143c3a913eb38704$var$UNITS.length - 1; i >= $143c3a913eb38704$var$UNITS.indexOf(minUnit); i--){\n        const unit = $143c3a913eb38704$var$UNITS[i];\n        if ($143c3a913eb38704$var$INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) return unit;\n    }\n    return $143c3a913eb38704$var$UNITS[minUnit ? $143c3a913eb38704$var$UNITS.indexOf(minUnit) : 0];\n}\nfunction $143c3a913eb38704$var$determineMajorUnit(unit) {\n    for(let i = $143c3a913eb38704$var$UNITS.indexOf(unit) + 1, ilen = $143c3a913eb38704$var$UNITS.length; i < ilen; ++i){\n        if ($143c3a913eb38704$var$INTERVALS[$143c3a913eb38704$var$UNITS[i]].common) return $143c3a913eb38704$var$UNITS[i];\n    }\n}\nfunction $143c3a913eb38704$var$addTick(ticks, time, timestamps) {\n    if (!timestamps) ticks[time] = true;\n    else if (timestamps.length) {\n        const { lo: lo, hi: hi } = (0, $iUM1U.aP)(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\nfunction $143c3a913eb38704$var$setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) ticks[index].major = true;\n    }\n    return ticks;\n}\nfunction $143c3a913eb38704$var$ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n    const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value: value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : $143c3a913eb38704$var$setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass $143c3a913eb38704$export$a894c72689ff3ec extends $143c3a913eb38704$export$d60cfc58d3c358b6 {\n    static id = \"time\";\n    static defaults = {\n        bounds: \"data\",\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: \"millisecond\",\n            displayFormats: {}\n        },\n        ticks: {\n            source: \"auto\",\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n    constructor(props){\n        super(props);\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n        this._unit = \"day\";\n        this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n        const adapter = this._adapter = new $143c3a913eb38704$export$f32766ea09ec8bc4._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        (0, $iUM1U.ab)(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n    parse(raw, index) {\n        if (raw === undefined) return null;\n        return $143c3a913eb38704$var$parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || \"day\";\n        let { min: min, max: max, minDefined: minDefined, maxDefined: maxDefined } = this.getUserBounds();\n        function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) min = Math.min(min, bounds.min);\n            if (!maxDefined && !isNaN(bounds.max)) max = Math.max(max, bounds.max);\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== \"ticks\" || options.ticks.source !== \"labels\") _applyBounds(this.getMinMax(false));\n        }\n        min = (0, $iUM1U.g)(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = (0, $iUM1U.g)(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n    _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min: min,\n            max: max\n        };\n    }\n    buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === \"labels\" ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === \"ticks\" && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = (0, $iUM1U.aO)(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? $143c3a913eb38704$var$determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : $143c3a913eb38704$var$determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === \"year\" ? undefined : $143c3a913eb38704$var$determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) ticks.reverse();\n        return $143c3a913eb38704$var$ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) this.initOffsets(this.ticks.map((tick)=>+tick.value));\n    }\n    initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) start = 1 - first;\n            else start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) end = last;\n            else end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = (0, $iUM1U.S)(start, 0, limit);\n        end = (0, $iUM1U.S)(end, 0, limit);\n        this._offsets = {\n            start: start,\n            end: end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n    _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || $143c3a913eb38704$var$determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = (0, $iUM1U.v)(options.ticks.stepSize, 1);\n        const weekday = minor === \"week\" ? timeOpts.isoWeekday : false;\n        const hasWeekday = (0, $iUM1U.x)(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) first = +adapter.startOf(first, \"isoWeek\", weekday);\n        first = +adapter.startOf(first, hasWeekday ? \"day\" : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) throw new Error(min + \" and \" + max + \" are too far apart with stepSize of \" + stepSize + \" \" + minor);\n        const timestamps = options.ticks.source === \"data\" && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++)$143c3a913eb38704$var$addTick(ticks, time, timestamps);\n        if (time === max || options.bounds === \"ticks\" || count === 1) $143c3a913eb38704$var$addTick(ticks, time, timestamps);\n        return Object.keys(ticks).sort($143c3a913eb38704$var$sorter).map((x)=>+x);\n    }\n    getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) return adapter.format(value, timeOpts.tooltipFormat);\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n    format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n    _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) return (0, $iUM1U.Q)(formatter, [\n            time,\n            index,\n            ticks\n        ], this);\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n    generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n    getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n    getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n    getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n    _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = (0, $iUM1U.t)(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n    _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, $143c3a913eb38704$var$ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n    getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) return timestamps;\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        for(i = 0, ilen = metas.length; i < ilen; ++i)timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        return this._cache.data = this.normalize(timestamps);\n    }\n    getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) return timestamps;\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i)timestamps.push($143c3a913eb38704$var$parse(this, labels[i]));\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n    normalize(values) {\n        return (0, $iUM1U._)(values.sort($143c3a913eb38704$var$sorter));\n    }\n}\nfunction $143c3a913eb38704$var$interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) ({ lo: lo, hi: hi } = (0, $iUM1U.B)(table, \"pos\", val));\n        ({ pos: prevSource, time: prevTarget } = table[lo]);\n        ({ pos: nextSource, time: nextTarget } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) ({ lo: lo, hi: hi } = (0, $iUM1U.B)(table, \"time\", val));\n        ({ time: prevSource, pos: prevTarget } = table[lo]);\n        ({ time: nextSource, pos: nextTarget } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass $143c3a913eb38704$export$85df64a8eb6dc986 extends $143c3a913eb38704$export$a894c72689ff3ec {\n    static id = \"timeseries\";\n    static defaults = $143c3a913eb38704$export$a894c72689ff3ec.defaults;\n    constructor(props){\n        super(props);\n        this._table = [];\n        this._minPos = undefined;\n        this._tableRange = undefined;\n    }\n    initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = $143c3a913eb38704$var$interpolate(table, this.min);\n        this._tableRange = $143c3a913eb38704$var$interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n    buildLookupTable(timestamps) {\n        const { min: min, max: max } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) items.push(curr);\n        }\n        if (items.length < 2) return [\n            {\n                time: min,\n                pos: 0\n            },\n            {\n                time: max,\n                pos: 1\n            }\n        ];\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) table.push({\n                time: curr,\n                pos: i / (ilen - 1)\n            });\n        }\n        return table;\n    }\n    _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) timestamps.splice(0, 0, min);\n        if (!timestamps.includes(max) || timestamps.length === 1) timestamps.push(max);\n        return timestamps.sort((a, b)=>a - b);\n    }\n    _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) return timestamps;\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) timestamps = this.normalize(data.concat(label));\n        else timestamps = data.length ? data : label;\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n    getDecimalForValue(value) {\n        return ($143c3a913eb38704$var$interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n    getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return $143c3a913eb38704$var$interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\nvar $143c3a913eb38704$export$bcac1c16f1530ec2 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    CategoryScale: $143c3a913eb38704$export$29e663ba4d09fe7,\n    LinearScale: $143c3a913eb38704$export$e7f4e5e8656f0b93,\n    LogarithmicScale: $143c3a913eb38704$export$85295eaf7cb3ac3e,\n    RadialLinearScale: $143c3a913eb38704$export$cfafc36d95386d38,\n    TimeScale: $143c3a913eb38704$export$a894c72689ff3ec,\n    TimeSeriesScale: $143c3a913eb38704$export$85df64a8eb6dc986\n});\nconst $143c3a913eb38704$export$e8959e79e3af550f = [\n    $143c3a913eb38704$export$a6506504f799c5d5,\n    $143c3a913eb38704$export$7a5d735b2ab6389d,\n    $143c3a913eb38704$export$8b3ca321c77fdea6,\n    $143c3a913eb38704$export$bcac1c16f1530ec2\n];\n\n});\nparcelRequire.register(\"iUM1U\", function(module, exports) {\n\n$parcel$export(module.exports, \"aF\", () => $dc52b6b1090eba81$export$cf2f7c5792f80b46);\n$parcel$export(module.exports, \"ac\", () => $dc52b6b1090eba81$export$2219238a014317b0);\n$parcel$export(module.exports, \"k\", () => $dc52b6b1090eba81$export$342063e11d6c3cad);\n$parcel$export(module.exports, \"b\", () => $dc52b6b1090eba81$export$8b22cf2602fb60ce);\n$parcel$export(module.exports, \"i\", () => $dc52b6b1090eba81$export$23f2a1d2818174ef);\n$parcel$export(module.exports, \"g\", () => $dc52b6b1090eba81$export$39b482c5e57630a8);\n$parcel$export(module.exports, \"O\", () => $dc52b6b1090eba81$export$c4ce752e73470fba);\n$parcel$export(module.exports, \"v\", () => $dc52b6b1090eba81$export$90a7f3efeed30595);\n$parcel$export(module.exports, \"m\", () => $dc52b6b1090eba81$export$953cecd6e717a553);\n$parcel$export(module.exports, \"n\", () => $dc52b6b1090eba81$export$7ccc53e8f1e7dfc5);\n$parcel$export(module.exports, \"Q\", () => $dc52b6b1090eba81$export$3722cfe417b6ed86);\n$parcel$export(module.exports, \"F\", () => $dc52b6b1090eba81$export$d66501df72047452);\n$parcel$export(module.exports, \"ah\", () => $dc52b6b1090eba81$export$995eb9fca571757);\n$parcel$export(module.exports, \"a4\", () => $dc52b6b1090eba81$export$efca4cbe5dd06740);\n$parcel$export(module.exports, \"ab\", () => $dc52b6b1090eba81$export$555508cbc6add439);\n$parcel$export(module.exports, \"f\", () => $dc52b6b1090eba81$export$2d1720544b23b823);\n$parcel$export(module.exports, \"a5\", () => $dc52b6b1090eba81$export$a8550f7dbe79f93a);\n$parcel$export(module.exports, \"h\", () => $dc52b6b1090eba81$export$dda1d9f60106f0e9);\n$parcel$export(module.exports, \"a7\", () => $dc52b6b1090eba81$export$a93c5207d687da10);\n$parcel$export(module.exports, \"ag\", () => $dc52b6b1090eba81$export$ee7c8ad385a60b7b);\n$parcel$export(module.exports, \"ai\", () => $dc52b6b1090eba81$export$f38c853ae54ed474);\n$parcel$export(module.exports, \"P\", () => $dc52b6b1090eba81$export$56c0d5a1e737357d);\n$parcel$export(module.exports, \"T\", () => $dc52b6b1090eba81$export$971d5caa766a69d7);\n$parcel$export(module.exports, \"H\", () => $dc52b6b1090eba81$export$7f8ddf7c7c20b3cd);\n$parcel$export(module.exports, \"aM\", () => $dc52b6b1090eba81$export$9f4f30ee63539e24);\n$parcel$export(module.exports, \"s\", () => $dc52b6b1090eba81$export$2408f22a0fab9ae5);\n$parcel$export(module.exports, \"aJ\", () => $dc52b6b1090eba81$export$a05254e7c3aeba6e);\n$parcel$export(module.exports, \"aH\", () => $dc52b6b1090eba81$export$a33b77bbdbb8366c);\n$parcel$export(module.exports, \"N\", () => $dc52b6b1090eba81$export$a07804094c3ecf2d);\n$parcel$export(module.exports, \"x\", () => $dc52b6b1090eba81$export$d141bba7fdc215a3);\n$parcel$export(module.exports, \"aI\", () => $dc52b6b1090eba81$export$b9a6b53f9be3734);\n$parcel$export(module.exports, \"aG\", () => $dc52b6b1090eba81$export$53a70dd1ebbae346);\n$parcel$export(module.exports, \"t\", () => $dc52b6b1090eba81$export$625550452a3fa3ec);\n$parcel$export(module.exports, \"U\", () => $dc52b6b1090eba81$export$3a6d5c9ae78a2c08);\n$parcel$export(module.exports, \"aK\", () => $dc52b6b1090eba81$export$23ebac1979863676);\n$parcel$export(module.exports, \"D\", () => $dc52b6b1090eba81$export$96f57966bedc81b4);\n$parcel$export(module.exports, \"aE\", () => $dc52b6b1090eba81$export$158acd800e1ef08b);\n$parcel$export(module.exports, \"ay\", () => $dc52b6b1090eba81$export$28f7fcd39efa255);\n$parcel$export(module.exports, \"p\", () => $dc52b6b1090eba81$export$ffb5f4729a158638);\n$parcel$export(module.exports, \"S\", () => $dc52b6b1090eba81$export$25ce5a424b770e84);\n$parcel$export(module.exports, \"W\", () => $dc52b6b1090eba81$export$71cec2538cb2c617);\n$parcel$export(module.exports, \"aj\", () => $dc52b6b1090eba81$export$3b513254972cfc9c);\n$parcel$export(module.exports, \"aP\", () => $dc52b6b1090eba81$export$2ed0fc6709e59212);\n$parcel$export(module.exports, \"B\", () => $dc52b6b1090eba81$export$ef35774e6d314e91);\n$parcel$export(module.exports, \"A\", () => $dc52b6b1090eba81$export$ebd11618f299a286);\n$parcel$export(module.exports, \"aO\", () => $dc52b6b1090eba81$export$c03999cb2f36933f);\n$parcel$export(module.exports, \"l\", () => $dc52b6b1090eba81$export$882b5998b3b9117c);\n$parcel$export(module.exports, \"u\", () => $dc52b6b1090eba81$export$3b14a55fb2447963);\n$parcel$export(module.exports, \"_\", () => $dc52b6b1090eba81$export$71511d61b312f219);\n$parcel$export(module.exports, \"r\", () => $dc52b6b1090eba81$export$43caf9889c228507);\n$parcel$export(module.exports, \"L\", () => $dc52b6b1090eba81$export$61196ced6d74a310);\n$parcel$export(module.exports, \"ad\", () => $dc52b6b1090eba81$export$4c3d22f3d993c33f);\n$parcel$export(module.exports, \"a1\", () => $dc52b6b1090eba81$export$3c2fa207a37baaea);\n$parcel$export(module.exports, \"a2\", () => $dc52b6b1090eba81$export$ce26c07117d59d6a);\n$parcel$export(module.exports, \"aB\", () => $dc52b6b1090eba81$export$9d398bebfec1c039);\n$parcel$export(module.exports, \"q\", () => $dc52b6b1090eba81$export$9e5f44173e64f162);\n$parcel$export(module.exports, \"w\", () => $dc52b6b1090eba81$export$efccba1c4a2ef57b);\n$parcel$export(module.exports, \"e\", () => $dc52b6b1090eba81$export$f1e1789686576879);\n$parcel$export(module.exports, \"c\", () => $dc52b6b1090eba81$export$db3b6bfb95261072);\n$parcel$export(module.exports, \"o\", () => $dc52b6b1090eba81$export$ae1af26003f05816);\n$parcel$export(module.exports, \"aL\", () => $dc52b6b1090eba81$export$91477dc880baac21);\n$parcel$export(module.exports, \"a3\", () => $dc52b6b1090eba81$export$6559d589eb85fbb6);\n$parcel$export(module.exports, \"a6\", () => $dc52b6b1090eba81$export$2e2af4578d910ddf);\n$parcel$export(module.exports, \"d\", () => $dc52b6b1090eba81$export$4368d992c4eafac0);\n$parcel$export(module.exports, \"V\", () => $dc52b6b1090eba81$export$e7c866399fa523f5);\n$parcel$export(module.exports, \"aN\", () => $dc52b6b1090eba81$export$faec65b429be379);\n$parcel$export(module.exports, \"X\", () => $dc52b6b1090eba81$export$78acf4525d8a74c4);\n$parcel$export(module.exports, \"af\", () => $dc52b6b1090eba81$export$c9170ad7d4cd7e57);\n$parcel$export(module.exports, \"at\", () => $dc52b6b1090eba81$export$493d36ec626b6698);\n$parcel$export(module.exports, \"aD\", () => $dc52b6b1090eba81$export$24baa2b76016ce0e);\n$parcel$export(module.exports, \"C\", () => $dc52b6b1090eba81$export$e7094788287c5e9b);\n$parcel$export(module.exports, \"Y\", () => $dc52b6b1090eba81$export$8743009a87fcb00f);\n$parcel$export(module.exports, \"$\", () => $dc52b6b1090eba81$export$3d8c2f653ac9d0b9);\n$parcel$export(module.exports, \"ar\", () => $dc52b6b1090eba81$export$d24c54395ce0c509);\n$parcel$export(module.exports, \"as\", () => $dc52b6b1090eba81$export$6554612db691658e);\n$parcel$export(module.exports, \"Z\", () => $dc52b6b1090eba81$export$dc98b0b04f4c7758);\n$parcel$export(module.exports, \"au\", () => $dc52b6b1090eba81$export$1fbe638ecf81657e);\n$parcel$export(module.exports, \"ak\", () => $dc52b6b1090eba81$export$21579262ef46735b);\n$parcel$export(module.exports, \"av\", () => $dc52b6b1090eba81$export$d66dc83d8cfc8dd);\n$parcel$export(module.exports, \"aw\", () => $dc52b6b1090eba81$export$92108d983e8ee699);\n$parcel$export(module.exports, \"E\", () => $dc52b6b1090eba81$export$a9c23c6ac3fc3eca);\n$parcel$export(module.exports, \"a0\", () => $dc52b6b1090eba81$export$34aec0b863436764);\n$parcel$export(module.exports, \"a\", () => $dc52b6b1090eba81$export$407448d2b89b1813);\n$parcel$export(module.exports, \"R\", () => $dc52b6b1090eba81$export$db202ddc8be9136);\n$parcel$export(module.exports, \"j\", () => $dc52b6b1090eba81$export$35e795649ee09318);\n$parcel$export(module.exports, \"a9\", () => $dc52b6b1090eba81$export$a9c996f45e5784d0);\n$parcel$export(module.exports, \"a8\", () => $dc52b6b1090eba81$export$c3950d9923825c02);\n$parcel$export(module.exports, \"aa\", () => $dc52b6b1090eba81$export$7910e0436ed8d1de);\n$parcel$export(module.exports, \"y\", () => $dc52b6b1090eba81$export$4a5767248b18ef41);\n$parcel$export(module.exports, \"al\", () => $dc52b6b1090eba81$export$ab83b03e4111b1d0);\n$parcel$export(module.exports, \"M\", () => $dc52b6b1090eba81$export$3a1a48c8f6ef640e);\n$parcel$export(module.exports, \"I\", () => $dc52b6b1090eba81$export$9bb611d729802a56);\n$parcel$export(module.exports, \"z\", () => $dc52b6b1090eba81$export$df995fae86a55f06);\n$parcel$export(module.exports, \"G\", () => $dc52b6b1090eba81$export$2329c99376c9d0a4);\n$parcel$export(module.exports, \"ae\", () => $dc52b6b1090eba81$export$f787f51d84a910ad);\n$parcel$export(module.exports, \"K\", () => $dc52b6b1090eba81$export$3466f893ebf79586);\n$parcel$export(module.exports, \"J\", () => $dc52b6b1090eba81$export$b4171a6734a65d42);\n$parcel$export(module.exports, \"aq\", () => $dc52b6b1090eba81$export$8a5498727ef6be21);\n$parcel$export(module.exports, \"ao\", () => $dc52b6b1090eba81$export$7a38258bbe170828);\n$parcel$export(module.exports, \"ap\", () => $dc52b6b1090eba81$export$2f6ca3d3b1f80bf5);\n$parcel$export(module.exports, \"az\", () => $dc52b6b1090eba81$export$3d12bd131bb975d1);\n$parcel$export(module.exports, \"aA\", () => $dc52b6b1090eba81$export$91c6e00c14e7e6fd);\n$parcel$export(module.exports, \"aC\", () => $dc52b6b1090eba81$export$890c4ad488842ce7);\n$parcel$export(module.exports, \"ax\", () => $dc52b6b1090eba81$export$9fa96a7d116ea3ce);\n$parcel$export(module.exports, \"an\", () => $dc52b6b1090eba81$export$306ddfe3a8403e2);\n$parcel$export(module.exports, \"am\", () => $dc52b6b1090eba81$export$1a82df3d29112e01);\n/*!\n * Chart.js v4.4.0\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */ \nvar $fLie1 = parcelRequire(\"fLie1\");\n/**\n * @namespace Chart.helpers\n */ /**\n * An empty function that can be used, for example, for optional callback.\n */ function $dc52b6b1090eba81$export$cf2f7c5792f80b46() {\n/* noop */ }\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */ const $dc52b6b1090eba81$export$2219238a014317b0 = (()=>{\n    let id = 0;\n    return ()=>id++;\n})();\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function $dc52b6b1090eba81$export$342063e11d6c3cad(value) {\n    return value === null || typeof value === \"undefined\";\n}\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */ function $dc52b6b1090eba81$export$8b22cf2602fb60ce(value) {\n    if (Array.isArray && Array.isArray(value)) return true;\n    const type = Object.prototype.toString.call(value);\n    if (type.slice(0, 7) === \"[object\" && type.slice(-6) === \"Array]\") return true;\n    return false;\n}\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function $dc52b6b1090eba81$export$23f2a1d2818174ef(value) {\n    return value !== null && Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */ function $dc52b6b1090eba81$export$39b482c5e57630a8(value) {\n    return (typeof value === \"number\" || value instanceof Number) && isFinite(+value);\n}\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */ function $dc52b6b1090eba81$export$c4ce752e73470fba(value, defaultValue) {\n    return $dc52b6b1090eba81$export$39b482c5e57630a8(value) ? value : defaultValue;\n}\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */ function $dc52b6b1090eba81$export$90a7f3efeed30595(value, defaultValue) {\n    return typeof value === \"undefined\" ? defaultValue : value;\n}\nconst $dc52b6b1090eba81$export$953cecd6e717a553 = (value, dimension)=>typeof value === \"string\" && value.endsWith(\"%\") ? parseFloat(value) / 100 : +value / dimension;\nconst $dc52b6b1090eba81$export$7ccc53e8f1e7dfc5 = (value, dimension)=>typeof value === \"string\" && value.endsWith(\"%\") ? parseFloat(value) / 100 * dimension : +value;\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */ function $dc52b6b1090eba81$export$3722cfe417b6ed86(fn, args, thisArg) {\n    if (fn && typeof fn.call === \"function\") return fn.apply(thisArg, args);\n}\nfunction $dc52b6b1090eba81$export$d66501df72047452(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if ($dc52b6b1090eba81$export$8b22cf2602fb60ce(loopable)) {\n        len = loopable.length;\n        if (reverse) for(i = len - 1; i >= 0; i--)fn.call(thisArg, loopable[i], i);\n        else for(i = 0; i < len; i++)fn.call(thisArg, loopable[i], i);\n    } else if ($dc52b6b1090eba81$export$23f2a1d2818174ef(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n        for(i = 0; i < len; i++)fn.call(thisArg, loopable[keys[i]], keys[i]);\n    }\n}\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */ function $dc52b6b1090eba81$export$995eb9fca571757(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) return false;\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\n        v0 = a0[i];\n        v1 = a1[i];\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) return false;\n    }\n    return true;\n}\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */ function $dc52b6b1090eba81$export$d377dcb2b61d6c4e(source) {\n    if ($dc52b6b1090eba81$export$8b22cf2602fb60ce(source)) return source.map($dc52b6b1090eba81$export$d377dcb2b61d6c4e);\n    if ($dc52b6b1090eba81$export$23f2a1d2818174ef(source)) {\n        const target = Object.create(null);\n        const keys = Object.keys(source);\n        const klen = keys.length;\n        let k = 0;\n        for(; k < klen; ++k)target[keys[k]] = $dc52b6b1090eba81$export$d377dcb2b61d6c4e(source[keys[k]]);\n        return target;\n    }\n    return source;\n}\nfunction $dc52b6b1090eba81$var$isValidKey(key) {\n    return [\n        \"__proto__\",\n        \"prototype\",\n        \"constructor\"\n    ].indexOf(key) === -1;\n}\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */ function $dc52b6b1090eba81$export$667d3bf0c5f83305(key, target, source, options) {\n    if (!$dc52b6b1090eba81$var$isValidKey(key)) return;\n    const tval = target[key];\n    const sval = source[key];\n    if ($dc52b6b1090eba81$export$23f2a1d2818174ef(tval) && $dc52b6b1090eba81$export$23f2a1d2818174ef(sval)) // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    $dc52b6b1090eba81$export$efca4cbe5dd06740(tval, sval, options);\n    else target[key] = $dc52b6b1090eba81$export$d377dcb2b61d6c4e(sval);\n}\nfunction $dc52b6b1090eba81$export$efca4cbe5dd06740(target, source, options) {\n    const sources = $dc52b6b1090eba81$export$8b22cf2602fb60ce(source) ? source : [\n        source\n    ];\n    const ilen = sources.length;\n    if (!$dc52b6b1090eba81$export$23f2a1d2818174ef(target)) return target;\n    options = options || {};\n    const merger = options.merger || $dc52b6b1090eba81$export$667d3bf0c5f83305;\n    let current;\n    for(let i = 0; i < ilen; ++i){\n        current = sources[i];\n        if (!$dc52b6b1090eba81$export$23f2a1d2818174ef(current)) continue;\n        const keys = Object.keys(current);\n        for(let k = 0, klen = keys.length; k < klen; ++k)merger(keys[k], target, current, options);\n    }\n    return target;\n}\nfunction $dc52b6b1090eba81$export$555508cbc6add439(target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return $dc52b6b1090eba81$export$efca4cbe5dd06740(target, source, {\n        merger: $dc52b6b1090eba81$export$317a3d46287192d8\n    });\n}\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */ function $dc52b6b1090eba81$export$317a3d46287192d8(key, target, source) {\n    if (!$dc52b6b1090eba81$var$isValidKey(key)) return;\n    const tval = target[key];\n    const sval = source[key];\n    if ($dc52b6b1090eba81$export$23f2a1d2818174ef(tval) && $dc52b6b1090eba81$export$23f2a1d2818174ef(sval)) $dc52b6b1090eba81$export$555508cbc6add439(tval, sval);\n    else if (!Object.prototype.hasOwnProperty.call(target, key)) target[key] = $dc52b6b1090eba81$export$d377dcb2b61d6c4e(sval);\n}\n/**\n * @private\n */ function $dc52b6b1090eba81$export$1ee57be6f6687d2c(scope, value, previous, current) {\n    if (value !== undefined) console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n}\n// resolveObjectKey resolver cache\nconst $dc52b6b1090eba81$var$keyResolvers = {\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n    \"\": (v)=>v,\n    // default resolvers\n    x: (o)=>o.x,\n    y: (o)=>o.y\n};\n/**\n * @private\n */ function $dc52b6b1090eba81$export$9d0e2d13d04f7070(key) {\n    const parts = key.split(\".\");\n    const keys = [];\n    let tmp = \"\";\n    for (const part of parts){\n        tmp += part;\n        if (tmp.endsWith(\"\\\\\")) tmp = tmp.slice(0, -1) + \".\";\n        else {\n            keys.push(tmp);\n            tmp = \"\";\n        }\n    }\n    return keys;\n}\nfunction $dc52b6b1090eba81$var$_getKeyResolver(key) {\n    const keys = $dc52b6b1090eba81$export$9d0e2d13d04f7070(key);\n    return (obj)=>{\n        for (const k of keys){\n            if (k === \"\") break;\n            obj = obj && obj[k];\n        }\n        return obj;\n    };\n}\nfunction $dc52b6b1090eba81$export$2d1720544b23b823(obj, key) {\n    const resolver = $dc52b6b1090eba81$var$keyResolvers[key] || ($dc52b6b1090eba81$var$keyResolvers[key] = $dc52b6b1090eba81$var$_getKeyResolver(key));\n    return resolver(obj);\n}\n/**\n * @private\n */ function $dc52b6b1090eba81$export$a8550f7dbe79f93a(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst $dc52b6b1090eba81$export$dda1d9f60106f0e9 = (value)=>typeof value !== \"undefined\";\nconst $dc52b6b1090eba81$export$a93c5207d687da10 = (value)=>typeof value === \"function\";\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nconst $dc52b6b1090eba81$export$ee7c8ad385a60b7b = (a, b)=>{\n    if (a.size !== b.size) return false;\n    for (const item of a){\n        if (!b.has(item)) return false;\n    }\n    return true;\n};\n/**\n * @param e - The event\n * @private\n */ function $dc52b6b1090eba81$export$f38c853ae54ed474(e) {\n    return e.type === \"mouseup\" || e.type === \"click\" || e.type === \"contextmenu\";\n}\n/**\n * @alias Chart.helpers.math\n * @namespace\n */ const $dc52b6b1090eba81$export$56c0d5a1e737357d = Math.PI;\nconst $dc52b6b1090eba81$export$971d5caa766a69d7 = 2 * $dc52b6b1090eba81$export$56c0d5a1e737357d;\nconst $dc52b6b1090eba81$export$d29e374196577086 = $dc52b6b1090eba81$export$971d5caa766a69d7 + $dc52b6b1090eba81$export$56c0d5a1e737357d;\nconst $dc52b6b1090eba81$export$2ec5befb9e6c97d4 = Number.POSITIVE_INFINITY;\nconst $dc52b6b1090eba81$export$53c86fa97d611818 = $dc52b6b1090eba81$export$56c0d5a1e737357d / 180;\nconst $dc52b6b1090eba81$export$7f8ddf7c7c20b3cd = $dc52b6b1090eba81$export$56c0d5a1e737357d / 2;\nconst $dc52b6b1090eba81$export$39c1cc7c062529d4 = $dc52b6b1090eba81$export$56c0d5a1e737357d / 4;\nconst $dc52b6b1090eba81$export$7a0bdf7d4a91ea88 = $dc52b6b1090eba81$export$56c0d5a1e737357d * 2 / 3;\nconst $dc52b6b1090eba81$export$9f4f30ee63539e24 = Math.log10;\nconst $dc52b6b1090eba81$export$2408f22a0fab9ae5 = Math.sign;\nfunction $dc52b6b1090eba81$export$a05254e7c3aeba6e(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n}\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */ function $dc52b6b1090eba81$export$a33b77bbdbb8366c(range) {\n    const roundedRange = Math.round(range);\n    range = $dc52b6b1090eba81$export$a05254e7c3aeba6e(range, roundedRange, range / 1000) ? roundedRange : range;\n    const niceRange = Math.pow(10, Math.floor($dc52b6b1090eba81$export$9f4f30ee63539e24(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n}\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */ function $dc52b6b1090eba81$export$a07804094c3ecf2d(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for(i = 1; i < sqrt; i++)if (value % i === 0) {\n        result.push(i);\n        result.push(value / i);\n    }\n    if (sqrt === (sqrt | 0)) result.push(sqrt);\n    result.sort((a, b)=>a - b).pop();\n    return result;\n}\nfunction $dc52b6b1090eba81$export$d141bba7fdc215a3(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction $dc52b6b1090eba81$export$b9a6b53f9be3734(x, epsilon) {\n    const rounded = Math.round(x);\n    return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n/**\n * @private\n */ function $dc52b6b1090eba81$export$53a70dd1ebbae346(array, target, property) {\n    let i, ilen, value;\n    for(i = 0, ilen = array.length; i < ilen; i++){\n        value = array[i][property];\n        if (!isNaN(value)) {\n            target.min = Math.min(target.min, value);\n            target.max = Math.max(target.max, value);\n        }\n    }\n}\nfunction $dc52b6b1090eba81$export$625550452a3fa3ec(degrees) {\n    return degrees * ($dc52b6b1090eba81$export$56c0d5a1e737357d / 180);\n}\nfunction $dc52b6b1090eba81$export$3a6d5c9ae78a2c08(radians) {\n    return radians * (180 / $dc52b6b1090eba81$export$56c0d5a1e737357d);\n}\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */ function $dc52b6b1090eba81$export$23ebac1979863676(x) {\n    if (!$dc52b6b1090eba81$export$39b482c5e57630a8(x)) return;\n    let e = 1;\n    let p = 0;\n    while(Math.round(x * e) / e !== x){\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n// Gets the angle from vertical upright to the point about a centre.\nfunction $dc52b6b1090eba81$export$96f57966bedc81b4(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < -0.5 * $dc52b6b1090eba81$export$56c0d5a1e737357d) angle += $dc52b6b1090eba81$export$971d5caa766a69d7; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n    return {\n        angle: angle,\n        distance: radialDistanceFromCenter\n    };\n}\nfunction $dc52b6b1090eba81$export$158acd800e1ef08b(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */ function $dc52b6b1090eba81$export$c18d01048907ea92(a, b) {\n    return (a - b + $dc52b6b1090eba81$export$d29e374196577086) % $dc52b6b1090eba81$export$971d5caa766a69d7 - $dc52b6b1090eba81$export$56c0d5a1e737357d;\n}\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */ function $dc52b6b1090eba81$export$28f7fcd39efa255(a) {\n    return (a % $dc52b6b1090eba81$export$971d5caa766a69d7 + $dc52b6b1090eba81$export$971d5caa766a69d7) % $dc52b6b1090eba81$export$971d5caa766a69d7;\n}\n/**\n * @private\n */ function $dc52b6b1090eba81$export$ffb5f4729a158638(angle, start, end, sameAngleIsFullCircle) {\n    const a = $dc52b6b1090eba81$export$28f7fcd39efa255(angle);\n    const s = $dc52b6b1090eba81$export$28f7fcd39efa255(start);\n    const e = $dc52b6b1090eba81$export$28f7fcd39efa255(end);\n    const angleToStart = $dc52b6b1090eba81$export$28f7fcd39efa255(s - a);\n    const angleToEnd = $dc52b6b1090eba81$export$28f7fcd39efa255(e - a);\n    const startToAngle = $dc52b6b1090eba81$export$28f7fcd39efa255(a - s);\n    const endToAngle = $dc52b6b1090eba81$export$28f7fcd39efa255(a - e);\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */ function $dc52b6b1090eba81$export$25ce5a424b770e84(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * @param {number} value\n * @private\n */ function $dc52b6b1090eba81$export$71cec2538cb2c617(value) {\n    return $dc52b6b1090eba81$export$25ce5a424b770e84(value, -32768, 32767);\n}\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */ function $dc52b6b1090eba81$export$3b513254972cfc9c(value, start, end, epsilon = 1e-6) {\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\nfunction $dc52b6b1090eba81$export$2ed0fc6709e59212(table, value, cmp) {\n    cmp = cmp || ((index)=>table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while(hi - lo > 1){\n        mid = lo + hi >> 1;\n        if (cmp(mid)) lo = mid;\n        else hi = mid;\n    }\n    return {\n        lo: lo,\n        hi: hi\n    };\n}\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */ const $dc52b6b1090eba81$export$ef35774e6d314e91 = (table, key, value, last)=>$dc52b6b1090eba81$export$2ed0fc6709e59212(table, value, last ? (index)=>{\n        const ti = table[index][key];\n        return ti < value || ti === value && table[index + 1][key] === value;\n    } : (index)=>table[index][key] < value);\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */ const $dc52b6b1090eba81$export$ebd11618f299a286 = (table, key, value)=>$dc52b6b1090eba81$export$2ed0fc6709e59212(table, value, (index)=>table[index][key] >= value);\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */ function $dc52b6b1090eba81$export$c03999cb2f36933f(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while(start < end && values[start] < min)start++;\n    while(end > start && values[end - 1] > max)end--;\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\nconst $dc52b6b1090eba81$var$arrayEvents = [\n    \"push\",\n    \"pop\",\n    \"shift\",\n    \"splice\",\n    \"unshift\"\n];\nfunction $dc52b6b1090eba81$export$882b5998b3b9117c(array, listener) {\n    if (array._chartjs) {\n        array._chartjs.listeners.push(listener);\n        return;\n    }\n    Object.defineProperty(array, \"_chartjs\", {\n        configurable: true,\n        enumerable: false,\n        value: {\n            listeners: [\n                listener\n            ]\n        }\n    });\n    $dc52b6b1090eba81$var$arrayEvents.forEach((key)=>{\n        const method = \"_onData\" + $dc52b6b1090eba81$export$a8550f7dbe79f93a(key);\n        const base = array[key];\n        Object.defineProperty(array, key, {\n            configurable: true,\n            enumerable: false,\n            value (...args) {\n                const res = base.apply(this, args);\n                array._chartjs.listeners.forEach((object)=>{\n                    if (typeof object[method] === \"function\") object[method](...args);\n                });\n                return res;\n            }\n        });\n    });\n}\nfunction $dc52b6b1090eba81$export$3b14a55fb2447963(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) return;\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) listeners.splice(index, 1);\n    if (listeners.length > 0) return;\n    $dc52b6b1090eba81$var$arrayEvents.forEach((key)=>{\n        delete array[key];\n    });\n    delete array._chartjs;\n}\n/**\n * @param items\n */ function $dc52b6b1090eba81$export$71511d61b312f219(items) {\n    const set = new Set(items);\n    if (set.size === items.length) return items;\n    return Array.from(set);\n}\nfunction $dc52b6b1090eba81$export$fef3dfd9bad05307(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + \" \" + pixelSize + \"px \" + fontFamily;\n}\n/**\n* Request animation polyfill\n*/ const $dc52b6b1090eba81$export$43caf9889c228507 = function() {\n    if (typeof window === \"undefined\") return function(callback) {\n        return callback();\n    };\n    return window.requestAnimationFrame;\n}();\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */ function $dc52b6b1090eba81$export$61196ced6d74a310(fn, thisArg) {\n    let argsToUse = [];\n    let ticking = false;\n    return function(...args) {\n        // Save the args for use later\n        argsToUse = args;\n        if (!ticking) {\n            ticking = true;\n            $dc52b6b1090eba81$export$43caf9889c228507.call(window, ()=>{\n                ticking = false;\n                fn.apply(thisArg, argsToUse);\n            });\n        }\n    };\n}\n/**\n * Debounces calling `fn` for `delay` ms\n */ function $dc52b6b1090eba81$export$4c3d22f3d993c33f(fn, delay) {\n    let timeout;\n    return function(...args) {\n        if (delay) {\n            clearTimeout(timeout);\n            timeout = setTimeout(fn, delay, args);\n        } else fn.apply(this, args);\n        return delay;\n    };\n}\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */ const $dc52b6b1090eba81$export$3c2fa207a37baaea = (align)=>align === \"start\" ? \"left\" : align === \"end\" ? \"right\" : \"center\";\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */ const $dc52b6b1090eba81$export$ce26c07117d59d6a = (align, start, end)=>align === \"start\" ? start : align === \"end\" ? end : (start + end) / 2;\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */ const $dc52b6b1090eba81$export$9d398bebfec1c039 = (align, left, right, rtl)=>{\n    const check = rtl ? \"left\" : \"right\";\n    return align === check ? right : align === \"center\" ? (left + right) / 2 : left;\n};\n/**\n * Return start and count of visible points.\n * @private\n */ function $dc52b6b1090eba81$export$9e5f44173e64f162(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n        const { iScale: iScale, _parsed: _parsed } = meta;\n        const axis = iScale.axis;\n        const { min: min, max: max, minDefined: minDefined, maxDefined: maxDefined } = iScale.getUserBounds();\n        if (minDefined) start = $dc52b6b1090eba81$export$25ce5a424b770e84(Math.min($dc52b6b1090eba81$export$ef35774e6d314e91(_parsed, axis, min).lo, animationsDisabled ? pointCount : $dc52b6b1090eba81$export$ef35774e6d314e91(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);\n        if (maxDefined) count = $dc52b6b1090eba81$export$25ce5a424b770e84(Math.max($dc52b6b1090eba81$export$ef35774e6d314e91(_parsed, iScale.axis, max, true).hi + 1, animationsDisabled ? 0 : $dc52b6b1090eba81$export$ef35774e6d314e91(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;\n        else count = pointCount - start;\n    }\n    return {\n        start: start,\n        count: count\n    };\n}\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */ function $dc52b6b1090eba81$export$efccba1c4a2ef57b(meta) {\n    const { xScale: xScale, yScale: yScale, _scaleRanges: _scaleRanges } = meta;\n    const newRanges = {\n        xmin: xScale.min,\n        xmax: xScale.max,\n        ymin: yScale.min,\n        ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n        meta._scaleRanges = newRanges;\n        return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n}\nconst $dc52b6b1090eba81$var$atEdge = (t)=>t === 0 || t === 1;\nconst $dc52b6b1090eba81$var$elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * $dc52b6b1090eba81$export$971d5caa766a69d7 / p));\nconst $dc52b6b1090eba81$var$elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * $dc52b6b1090eba81$export$971d5caa766a69d7 / p) + 1;\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */ const $dc52b6b1090eba81$export$f1e1789686576879 = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>-t * (t - 2),\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: (t)=>-Math.cos(t * $dc52b6b1090eba81$export$7f8ddf7c7c20b3cd) + 1,\n    easeOutSine: (t)=>Math.sin(t * $dc52b6b1090eba81$export$7f8ddf7c7c20b3cd),\n    easeInOutSine: (t)=>-0.5 * (Math.cos($dc52b6b1090eba81$export$56c0d5a1e737357d * t) - 1),\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: (t)=>$dc52b6b1090eba81$var$atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: (t)=>$dc52b6b1090eba81$var$atEdge(t) ? t : $dc52b6b1090eba81$var$elasticIn(t, 0.075, 0.3),\n    easeOutElastic: (t)=>$dc52b6b1090eba81$var$atEdge(t) ? t : $dc52b6b1090eba81$var$elasticOut(t, 0.075, 0.3),\n    easeInOutElastic (t) {\n        const s = 0.1125;\n        const p = 0.45;\n        return $dc52b6b1090eba81$var$atEdge(t) ? t : t < 0.5 ? 0.5 * $dc52b6b1090eba81$var$elasticIn(t * 2, s, p) : 0.5 + 0.5 * $dc52b6b1090eba81$var$elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack (t) {\n        const s = 1.70158;\n        return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack (t) {\n        const s = 1.70158;\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack (t) {\n        let s = 1.70158;\n        if ((t /= 0.5) < 1) return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: (t)=>1 - $dc52b6b1090eba81$export$f1e1789686576879.easeOutBounce(1 - t),\n    easeOutBounce (t) {\n        const m = 7.5625;\n        const d = 2.75;\n        if (t < 1 / d) return m * t * t;\n        if (t < 2 / d) return m * (t -= 1.5 / d) * t + 0.75;\n        if (t < 2.5 / d) return m * (t -= 2.25 / d) * t + 0.9375;\n        return m * (t -= 2.625 / d) * t + 0.984375;\n    },\n    easeInOutBounce: (t)=>t < 0.5 ? $dc52b6b1090eba81$export$f1e1789686576879.easeInBounce(t * 2) * 0.5 : $dc52b6b1090eba81$export$f1e1789686576879.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\nfunction $dc52b6b1090eba81$export$f96d196f7728bb5(value) {\n    if (value && typeof value === \"object\") {\n        const type = value.toString();\n        return type === \"[object CanvasPattern]\" || type === \"[object CanvasGradient]\";\n    }\n    return false;\n}\nfunction $dc52b6b1090eba81$export$db3b6bfb95261072(value) {\n    return $dc52b6b1090eba81$export$f96d196f7728bb5(value) ? value : new (0, $fLie1.Color)(value);\n}\nfunction $dc52b6b1090eba81$export$738ab4df8bf92ae9(value) {\n    return $dc52b6b1090eba81$export$f96d196f7728bb5(value) ? value : new (0, $fLie1.Color)(value).saturate(0.5).darken(0.1).hexString();\n}\nconst $dc52b6b1090eba81$var$numbers = [\n    \"x\",\n    \"y\",\n    \"borderWidth\",\n    \"radius\",\n    \"tension\"\n];\nconst $dc52b6b1090eba81$var$colors = [\n    \"color\",\n    \"borderColor\",\n    \"backgroundColor\"\n];\nfunction $dc52b6b1090eba81$var$applyAnimationsDefaults(defaults) {\n    defaults.set(\"animation\", {\n        delay: undefined,\n        duration: 1000,\n        easing: \"easeOutQuart\",\n        fn: undefined,\n        from: undefined,\n        loop: undefined,\n        to: undefined,\n        type: undefined\n    });\n    defaults.describe(\"animation\", {\n        _fallback: false,\n        _indexable: false,\n        _scriptable: (name)=>name !== \"onProgress\" && name !== \"onComplete\" && name !== \"fn\"\n    });\n    defaults.set(\"animations\", {\n        colors: {\n            type: \"color\",\n            properties: $dc52b6b1090eba81$var$colors\n        },\n        numbers: {\n            type: \"number\",\n            properties: $dc52b6b1090eba81$var$numbers\n        }\n    });\n    defaults.describe(\"animations\", {\n        _fallback: \"animation\"\n    });\n    defaults.set(\"transitions\", {\n        active: {\n            animation: {\n                duration: 400\n            }\n        },\n        resize: {\n            animation: {\n                duration: 0\n            }\n        },\n        show: {\n            animations: {\n                colors: {\n                    from: \"transparent\"\n                },\n                visible: {\n                    type: \"boolean\",\n                    duration: 0\n                }\n            }\n        },\n        hide: {\n            animations: {\n                colors: {\n                    to: \"transparent\"\n                },\n                visible: {\n                    type: \"boolean\",\n                    easing: \"linear\",\n                    fn: (v)=>v | 0\n                }\n            }\n        }\n    });\n}\nfunction $dc52b6b1090eba81$var$applyLayoutsDefaults(defaults) {\n    defaults.set(\"layout\", {\n        autoPadding: true,\n        padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    });\n}\nconst $dc52b6b1090eba81$var$intlCache = new Map();\nfunction $dc52b6b1090eba81$var$getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = $dc52b6b1090eba81$var$intlCache.get(cacheKey);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(locale, options);\n        $dc52b6b1090eba81$var$intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n}\nfunction $dc52b6b1090eba81$export$ae1af26003f05816(num, locale, options) {\n    return $dc52b6b1090eba81$var$getNumberFormat(locale, options).format(num);\n}\nconst $dc52b6b1090eba81$var$formatters = {\n    values (value) {\n        return $dc52b6b1090eba81$export$8b22cf2602fb60ce(value) ? value : \"\" + value;\n    },\n    numeric (tickValue, index, ticks) {\n        if (tickValue === 0) return \"0\";\n        const locale = this.chart.options.locale;\n        let notation;\n        let delta = tickValue;\n        if (ticks.length > 1) {\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n            if (maxTick < 1e-4 || maxTick > 1e+15) notation = \"scientific\";\n            delta = $dc52b6b1090eba81$var$calculateDelta(tickValue, ticks);\n        }\n        const logDelta = $dc52b6b1090eba81$export$9f4f30ee63539e24(Math.abs(delta));\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n        const options = {\n            notation: notation,\n            minimumFractionDigits: numDecimal,\n            maximumFractionDigits: numDecimal\n        };\n        Object.assign(options, this.options.ticks.format);\n        return $dc52b6b1090eba81$export$ae1af26003f05816(tickValue, locale, options);\n    },\n    logarithmic (tickValue, index, ticks) {\n        if (tickValue === 0) return \"0\";\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor($dc52b6b1090eba81$export$9f4f30ee63539e24(tickValue)));\n        if ([\n            1,\n            2,\n            3,\n            5,\n            10,\n            15\n        ].includes(remain) || index > 0.8 * ticks.length) return $dc52b6b1090eba81$var$formatters.numeric.call(this, tickValue, index, ticks);\n        return \"\";\n    }\n};\nfunction $dc52b6b1090eba81$var$calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) delta = tickValue - Math.floor(tickValue);\n    return delta;\n}\nvar $dc52b6b1090eba81$export$91477dc880baac21 = {\n    formatters: $dc52b6b1090eba81$var$formatters\n};\nfunction $dc52b6b1090eba81$var$applyScaleDefaults(defaults) {\n    defaults.set(\"scale\", {\n        display: true,\n        offset: false,\n        reverse: false,\n        beginAtZero: false,\n        bounds: \"ticks\",\n        clip: true,\n        grace: 0,\n        grid: {\n            display: true,\n            lineWidth: 1,\n            drawOnChartArea: true,\n            drawTicks: true,\n            tickLength: 8,\n            tickWidth: (_ctx, options)=>options.lineWidth,\n            tickColor: (_ctx, options)=>options.color,\n            offset: false\n        },\n        border: {\n            display: true,\n            dash: [],\n            dashOffset: 0.0,\n            width: 1\n        },\n        title: {\n            display: false,\n            text: \"\",\n            padding: {\n                top: 4,\n                bottom: 4\n            }\n        },\n        ticks: {\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: false,\n            textStrokeWidth: 0,\n            textStrokeColor: \"\",\n            padding: 3,\n            display: true,\n            autoSkip: true,\n            autoSkipPadding: 3,\n            labelOffset: 0,\n            callback: $dc52b6b1090eba81$export$91477dc880baac21.formatters.values,\n            minor: {},\n            major: {},\n            align: \"center\",\n            crossAlign: \"near\",\n            showLabelBackdrop: false,\n            backdropColor: \"rgba(255, 255, 255, 0.75)\",\n            backdropPadding: 2\n        }\n    });\n    defaults.route(\"scale.ticks\", \"color\", \"\", \"color\");\n    defaults.route(\"scale.grid\", \"color\", \"\", \"borderColor\");\n    defaults.route(\"scale.border\", \"color\", \"\", \"borderColor\");\n    defaults.route(\"scale.title\", \"color\", \"\", \"color\");\n    defaults.describe(\"scale\", {\n        _fallback: false,\n        _scriptable: (name)=>!name.startsWith(\"before\") && !name.startsWith(\"after\") && name !== \"callback\" && name !== \"parser\",\n        _indexable: (name)=>name !== \"borderDash\" && name !== \"tickBorderDash\" && name !== \"dash\"\n    });\n    defaults.describe(\"scales\", {\n        _fallback: \"scale\"\n    });\n    defaults.describe(\"scale.ticks\", {\n        _scriptable: (name)=>name !== \"backdropPadding\" && name !== \"callback\",\n        _indexable: (name)=>name !== \"backdropPadding\"\n    });\n}\nconst $dc52b6b1090eba81$export$6559d589eb85fbb6 = Object.create(null);\nconst $dc52b6b1090eba81$export$2e2af4578d910ddf = Object.create(null);\nfunction $dc52b6b1090eba81$var$getScope$1(node, key) {\n    if (!key) return node;\n    const keys = key.split(\".\");\n    for(let i = 0, n = keys.length; i < n; ++i){\n        const k = keys[i];\n        node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n}\nfunction $dc52b6b1090eba81$var$set(root, scope, values) {\n    if (typeof scope === \"string\") return $dc52b6b1090eba81$export$efca4cbe5dd06740($dc52b6b1090eba81$var$getScope$1(root, scope), values);\n    return $dc52b6b1090eba81$export$efca4cbe5dd06740($dc52b6b1090eba81$var$getScope$1(root, \"\"), scope);\n}\nclass $dc52b6b1090eba81$var$Defaults {\n    constructor(_descriptors, _appliers){\n        this.animation = undefined;\n        this.backgroundColor = \"rgba(0,0,0,0.1)\";\n        this.borderColor = \"rgba(0,0,0,0.1)\";\n        this.color = \"#666\";\n        this.datasets = {};\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\n        this.elements = {};\n        this.events = [\n            \"mousemove\",\n            \"mouseout\",\n            \"click\",\n            \"touchstart\",\n            \"touchmove\"\n        ];\n        this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: \"normal\",\n            lineHeight: 1.2,\n            weight: null\n        };\n        this.hover = {};\n        this.hoverBackgroundColor = (ctx, options)=>$dc52b6b1090eba81$export$738ab4df8bf92ae9(options.backgroundColor);\n        this.hoverBorderColor = (ctx, options)=>$dc52b6b1090eba81$export$738ab4df8bf92ae9(options.borderColor);\n        this.hoverColor = (ctx, options)=>$dc52b6b1090eba81$export$738ab4df8bf92ae9(options.color);\n        this.indexAxis = \"x\";\n        this.interaction = {\n            mode: \"nearest\",\n            intersect: true,\n            includeInvisible: false\n        };\n        this.maintainAspectRatio = true;\n        this.onHover = null;\n        this.onClick = null;\n        this.parsing = true;\n        this.plugins = {};\n        this.responsive = true;\n        this.scale = undefined;\n        this.scales = {};\n        this.showLine = true;\n        this.drawActiveElementsOnTop = true;\n        this.describe(_descriptors);\n        this.apply(_appliers);\n    }\n    set(scope, values) {\n        return $dc52b6b1090eba81$var$set(this, scope, values);\n    }\n    get(scope) {\n        return $dc52b6b1090eba81$var$getScope$1(this, scope);\n    }\n    describe(scope, values) {\n        return $dc52b6b1090eba81$var$set($dc52b6b1090eba81$export$2e2af4578d910ddf, scope, values);\n    }\n    override(scope, values) {\n        return $dc52b6b1090eba81$var$set($dc52b6b1090eba81$export$6559d589eb85fbb6, scope, values);\n    }\n    route(scope, name, targetScope, targetName) {\n        const scopeObject = $dc52b6b1090eba81$var$getScope$1(this, scope);\n        const targetScopeObject = $dc52b6b1090eba81$var$getScope$1(this, targetScope);\n        const privateName = \"_\" + name;\n        Object.defineProperties(scopeObject, {\n            [privateName]: {\n                value: scopeObject[name],\n                writable: true\n            },\n            [name]: {\n                enumerable: true,\n                get () {\n                    const local = this[privateName];\n                    const target = targetScopeObject[targetName];\n                    if ($dc52b6b1090eba81$export$23f2a1d2818174ef(local)) return Object.assign({}, target, local);\n                    return $dc52b6b1090eba81$export$90a7f3efeed30595(local, target);\n                },\n                set (value) {\n                    this[privateName] = value;\n                }\n            }\n        });\n    }\n    apply(appliers) {\n        appliers.forEach((apply)=>apply(this));\n    }\n}\nvar $dc52b6b1090eba81$export$4368d992c4eafac0 = /* #__PURE__ */ new $dc52b6b1090eba81$var$Defaults({\n    _scriptable: (name)=>!name.startsWith(\"on\"),\n    _indexable: (name)=>name !== \"events\",\n    hover: {\n        _fallback: \"interaction\"\n    },\n    interaction: {\n        _scriptable: false,\n        _indexable: false\n    }\n}, [\n    $dc52b6b1090eba81$var$applyAnimationsDefaults,\n    $dc52b6b1090eba81$var$applyLayoutsDefaults,\n    $dc52b6b1090eba81$var$applyScaleDefaults\n]);\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */ function $dc52b6b1090eba81$export$1a8f5705751d8277(font) {\n    if (!font || $dc52b6b1090eba81$export$342063e11d6c3cad(font.size) || $dc52b6b1090eba81$export$342063e11d6c3cad(font.family)) return null;\n    return (font.style ? font.style + \" \" : \"\") + (font.weight ? font.weight + \" \" : \"\") + font.size + \"px \" + font.family;\n}\n/**\n * @private\n */ function $dc52b6b1090eba81$export$e7c866399fa523f5(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n    }\n    if (textWidth > longest) longest = textWidth;\n    return longest;\n}\n/**\n * @private\n */ // eslint-disable-next-line complexity\nfunction $dc52b6b1090eba81$export$faec65b429be379(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for(i = 0; i < ilen; i++){\n        thing = arrayOfThings[i];\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && !$dc52b6b1090eba81$export$8b22cf2602fb60ce(thing)) longest = $dc52b6b1090eba81$export$e7c866399fa523f5(ctx, data, gc, longest, thing);\n        else if ($dc52b6b1090eba81$export$8b22cf2602fb60ce(thing)) // if it is an array lets measure each element\n        // to do maybe simplify this function a bit so we can do this more recursively?\n        for(j = 0, jlen = thing.length; j < jlen; j++){\n            nestedThing = thing[j];\n            // Undefined strings and arrays should not be measured\n            if (nestedThing !== undefined && nestedThing !== null && !$dc52b6b1090eba81$export$8b22cf2602fb60ce(nestedThing)) longest = $dc52b6b1090eba81$export$e7c866399fa523f5(ctx, data, gc, longest, nestedThing);\n        }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n        for(i = 0; i < gcLen; i++)delete data[gc[i]];\n        gc.splice(0, gcLen);\n    }\n    return longest;\n}\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */ function $dc52b6b1090eba81$export$78acf4525d8a74c4(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n/**\n * Clears the entire canvas.\n */ function $dc52b6b1090eba81$export$c9170ad7d4cd7e57(canvas, ctx) {\n    ctx = ctx || canvas.getContext(\"2d\");\n    ctx.save();\n    // canvas.width and canvas.height do not consider the canvas transform,\n    // while clearRect does\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n}\nfunction $dc52b6b1090eba81$export$493d36ec626b6698(ctx, options, x, y) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    $dc52b6b1090eba81$export$24baa2b76016ce0e(ctx, options, x, y, null);\n}\n// eslint-disable-next-line complexity\nfunction $dc52b6b1090eba81$export$24baa2b76016ce0e(ctx, options, x, y, w) {\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * $dc52b6b1090eba81$export$53c86fa97d611818;\n    if (style && typeof style === \"object\") {\n        type = style.toString();\n        if (type === \"[object HTMLImageElement]\" || type === \"[object HTMLCanvasElement]\") {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rad);\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n            ctx.restore();\n            return;\n        }\n    }\n    if (isNaN(radius) || radius <= 0) return;\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            if (w) ctx.ellipse(x, y, w / 2, radius, 0, 0, $dc52b6b1090eba81$export$971d5caa766a69d7);\n            else ctx.arc(x, y, radius, 0, $dc52b6b1090eba81$export$971d5caa766a69d7);\n            ctx.closePath();\n            break;\n        case \"triangle\":\n            width = w ? w / 2 : radius;\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += $dc52b6b1090eba81$export$7a0bdf7d4a91ea88;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += $dc52b6b1090eba81$export$7a0bdf7d4a91ea88;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case \"rectRounded\":\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + $dc52b6b1090eba81$export$39c1cc7c062529d4) * size;\n            xOffsetW = Math.cos(rad + $dc52b6b1090eba81$export$39c1cc7c062529d4) * (w ? w / 2 - cornerRadius : size);\n            yOffset = Math.sin(rad + $dc52b6b1090eba81$export$39c1cc7c062529d4) * size;\n            yOffsetW = Math.sin(rad + $dc52b6b1090eba81$export$39c1cc7c062529d4) * (w ? w / 2 - cornerRadius : size);\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - $dc52b6b1090eba81$export$56c0d5a1e737357d, rad - $dc52b6b1090eba81$export$7f8ddf7c7c20b3cd);\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - $dc52b6b1090eba81$export$7f8ddf7c7c20b3cd, rad);\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + $dc52b6b1090eba81$export$7f8ddf7c7c20b3cd);\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + $dc52b6b1090eba81$export$7f8ddf7c7c20b3cd, rad + $dc52b6b1090eba81$export$56c0d5a1e737357d);\n            ctx.closePath();\n            break;\n        case \"rect\":\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                width = w ? w / 2 : size;\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\n                break;\n            }\n            rad += $dc52b6b1090eba81$export$39c1cc7c062529d4;\n        /* falls through */ case \"rectRot\":\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            ctx.closePath();\n            break;\n        case \"crossRot\":\n            rad += $dc52b6b1090eba81$export$39c1cc7c062529d4;\n        /* falls through */ case \"cross\":\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case \"star\":\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            rad += $dc52b6b1090eba81$export$39c1cc7c062529d4;\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case \"line\":\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case \"dash\":\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n            break;\n        case false:\n            ctx.closePath();\n            break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) ctx.stroke();\n}\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */ function $dc52b6b1090eba81$export$e7094788287c5e9b(point, area, margin) {\n    margin = margin || 0.5; // margin - default is to match rounded decimals\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\nfunction $dc52b6b1090eba81$export$8743009a87fcb00f(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n}\nfunction $dc52b6b1090eba81$export$3d8c2f653ac9d0b9(ctx) {\n    ctx.restore();\n}\n/**\n * @private\n */ function $dc52b6b1090eba81$export$d24c54395ce0c509(ctx, previous, target, flip, mode) {\n    if (!previous) return ctx.lineTo(target.x, target.y);\n    if (mode === \"middle\") {\n        const midpoint = (previous.x + target.x) / 2.0;\n        ctx.lineTo(midpoint, previous.y);\n        ctx.lineTo(midpoint, target.y);\n    } else if (mode === \"after\" !== !!flip) ctx.lineTo(previous.x, target.y);\n    else ctx.lineTo(target.x, previous.y);\n    ctx.lineTo(target.x, target.y);\n}\n/**\n * @private\n */ function $dc52b6b1090eba81$export$6554612db691658e(ctx, previous, target, flip) {\n    if (!previous) return ctx.lineTo(target.x, target.y);\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\nfunction $dc52b6b1090eba81$var$setRenderOpts(ctx, opts) {\n    if (opts.translation) ctx.translate(opts.translation[0], opts.translation[1]);\n    if (!$dc52b6b1090eba81$export$342063e11d6c3cad(opts.rotation)) ctx.rotate(opts.rotation);\n    if (opts.color) ctx.fillStyle = opts.color;\n    if (opts.textAlign) ctx.textAlign = opts.textAlign;\n    if (opts.textBaseline) ctx.textBaseline = opts.textBaseline;\n}\nfunction $dc52b6b1090eba81$var$decorateText(ctx, x, y, line, opts) {\n    if (opts.strikethrough || opts.underline) {\n        /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */ const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n    }\n}\nfunction $dc52b6b1090eba81$var$drawBackdrop(ctx, opts) {\n    const oldColor = ctx.fillStyle;\n    ctx.fillStyle = opts.color;\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n    ctx.fillStyle = oldColor;\n}\n/**\n * Render text onto the canvas\n */ function $dc52b6b1090eba81$export$dc98b0b04f4c7758(ctx, text, x, y, font, opts = {}) {\n    const lines = $dc52b6b1090eba81$export$8b22cf2602fb60ce(text) ? text : [\n        text\n    ];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== \"\";\n    let i, line;\n    ctx.save();\n    ctx.font = font.string;\n    $dc52b6b1090eba81$var$setRenderOpts(ctx, opts);\n    for(i = 0; i < lines.length; ++i){\n        line = lines[i];\n        if (opts.backdrop) $dc52b6b1090eba81$var$drawBackdrop(ctx, opts.backdrop);\n        if (stroke) {\n            if (opts.strokeColor) ctx.strokeStyle = opts.strokeColor;\n            if (!$dc52b6b1090eba81$export$342063e11d6c3cad(opts.strokeWidth)) ctx.lineWidth = opts.strokeWidth;\n            ctx.strokeText(line, x, y, opts.maxWidth);\n        }\n        ctx.fillText(line, x, y, opts.maxWidth);\n        $dc52b6b1090eba81$var$decorateText(ctx, x, y, line, opts);\n        y += Number(font.lineHeight);\n    }\n    ctx.restore();\n}\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */ function $dc52b6b1090eba81$export$1fbe638ecf81657e(ctx, rect) {\n    const { x: x, y: y, w: w, h: h, radius: radius } = rect;\n    // top left arc\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * $dc52b6b1090eba81$export$56c0d5a1e737357d, $dc52b6b1090eba81$export$56c0d5a1e737357d, true);\n    // line from top left to bottom left\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    // bottom left arc\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, $dc52b6b1090eba81$export$56c0d5a1e737357d, $dc52b6b1090eba81$export$7f8ddf7c7c20b3cd, true);\n    // line from bottom left to bottom right\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    // bottom right arc\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, $dc52b6b1090eba81$export$7f8ddf7c7c20b3cd, 0, true);\n    // line from bottom right to top right\n    ctx.lineTo(x + w, y + radius.topRight);\n    // top right arc\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -$dc52b6b1090eba81$export$7f8ddf7c7c20b3cd, true);\n    // line from top right to top left\n    ctx.lineTo(x + radius.topLeft, y);\n}\nconst $dc52b6b1090eba81$var$LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst $dc52b6b1090eba81$var$FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n/**\n * @alias Chart.helpers.options\n * @namespace\n */ /**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */ function $dc52b6b1090eba81$export$8c78c7c36408ea29(value, size) {\n    const matches = (\"\" + value).match($dc52b6b1090eba81$var$LINE_HEIGHT);\n    if (!matches || matches[1] === \"normal\") return size * 1.2;\n    value = +matches[2];\n    switch(matches[3]){\n        case \"px\":\n            return value;\n        case \"%\":\n            value /= 100;\n            break;\n    }\n    return size * value;\n}\nconst $dc52b6b1090eba81$var$numberOrZero = (v)=>+v || 0;\nfunction $dc52b6b1090eba81$export$21579262ef46735b(value, props) {\n    const ret = {};\n    const objProps = $dc52b6b1090eba81$export$23f2a1d2818174ef(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = $dc52b6b1090eba81$export$23f2a1d2818174ef(value) ? objProps ? (prop)=>$dc52b6b1090eba81$export$90a7f3efeed30595(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\n    for (const prop of keys)ret[prop] = $dc52b6b1090eba81$var$numberOrZero(read(prop));\n    return ret;\n}\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */ function $dc52b6b1090eba81$export$d66dc83d8cfc8dd(value) {\n    return $dc52b6b1090eba81$export$21579262ef46735b(value, {\n        top: \"y\",\n        right: \"x\",\n        bottom: \"y\",\n        left: \"x\"\n    });\n}\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */ function $dc52b6b1090eba81$export$92108d983e8ee699(value) {\n    return $dc52b6b1090eba81$export$21579262ef46735b(value, [\n        \"topLeft\",\n        \"topRight\",\n        \"bottomLeft\",\n        \"bottomRight\"\n    ]);\n}\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */ function $dc52b6b1090eba81$export$a9c23c6ac3fc3eca(value) {\n    const obj = $dc52b6b1090eba81$export$d66dc83d8cfc8dd(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n}\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */ function $dc52b6b1090eba81$export$34aec0b863436764(options, fallback) {\n    options = options || {};\n    fallback = fallback || $dc52b6b1090eba81$export$4368d992c4eafac0.font;\n    let size = $dc52b6b1090eba81$export$90a7f3efeed30595(options.size, fallback.size);\n    if (typeof size === \"string\") size = parseInt(size, 10);\n    let style = $dc52b6b1090eba81$export$90a7f3efeed30595(options.style, fallback.style);\n    if (style && !(\"\" + style).match($dc52b6b1090eba81$var$FONT_STYLE)) {\n        console.warn('Invalid font style specified: \"' + style + '\"');\n        style = undefined;\n    }\n    const font = {\n        family: $dc52b6b1090eba81$export$90a7f3efeed30595(options.family, fallback.family),\n        lineHeight: $dc52b6b1090eba81$export$8c78c7c36408ea29($dc52b6b1090eba81$export$90a7f3efeed30595(options.lineHeight, fallback.lineHeight), size),\n        size: size,\n        style: style,\n        weight: $dc52b6b1090eba81$export$90a7f3efeed30595(options.weight, fallback.weight),\n        string: \"\"\n    };\n    font.string = $dc52b6b1090eba81$export$1a8f5705751d8277(font);\n    return font;\n}\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */ function $dc52b6b1090eba81$export$407448d2b89b1813(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\n        value = inputs[i];\n        if (value === undefined) continue;\n        if (context !== undefined && typeof value === \"function\") {\n            value = value(context);\n            cacheable = false;\n        }\n        if (index !== undefined && $dc52b6b1090eba81$export$8b22cf2602fb60ce(value)) {\n            value = value[index % value.length];\n            cacheable = false;\n        }\n        if (value !== undefined) {\n            if (info && !cacheable) info.cacheable = false;\n            return value;\n        }\n    }\n}\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */ function $dc52b6b1090eba81$export$db202ddc8be9136(minmax, grace, beginAtZero) {\n    const { min: min, max: max } = minmax;\n    const change = $dc52b6b1090eba81$export$7ccc53e8f1e7dfc5(grace, (max - min) / 2);\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\n    return {\n        min: keepZero(min, -Math.abs(change)),\n        max: keepZero(max, change)\n    };\n}\nfunction $dc52b6b1090eba81$export$35e795649ee09318(parentContext, context) {\n    return Object.assign(Object.create(parentContext), context);\n}\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */ function $dc52b6b1090eba81$export$a9c996f45e5784d0(scopes, prefixes = [\n    \"\"\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\n    const finalRootScopes = rootScopes || scopes;\n    if (typeof fallback === \"undefined\") fallback = $dc52b6b1090eba81$var$_resolve(\"_fallback\", scopes);\n    const cache = {\n        [Symbol.toStringTag]: \"Object\",\n        _cacheable: true,\n        _scopes: scopes,\n        _rootScopes: finalRootScopes,\n        _fallback: fallback,\n        _getTarget: getTarget,\n        override: (scope)=>$dc52b6b1090eba81$export$a9c996f45e5784d0([\n                scope,\n                ...scopes\n            ], prefixes, finalRootScopes, fallback)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete target._keys; // remove cached keys\n            delete scopes[0][prop]; // remove from top level scope\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop) {\n            return $dc52b6b1090eba81$var$_cached(target, prop, ()=>$dc52b6b1090eba81$var$_resolveWithPrefixes(prop, prefixes, scopes, target));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(scopes[0]);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return $dc52b6b1090eba81$var$getKeysFromAllScopes(target).includes(prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys (target) {\n            return $dc52b6b1090eba81$var$getKeysFromAllScopes(target);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            const storage = target._storage || (target._storage = getTarget());\n            target[prop] = storage[prop] = value; // set to top level scope + cache\n            delete target._keys; // remove cached keys\n            return true;\n        }\n    });\n}\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */ function $dc52b6b1090eba81$export$c3950d9923825c02(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n        _cacheable: false,\n        _proxy: proxy,\n        _context: context,\n        _subProxy: subProxy,\n        _stack: new Set(),\n        _descriptors: $dc52b6b1090eba81$export$7910e0436ed8d1de(proxy, descriptorDefaults),\n        setContext: (ctx)=>$dc52b6b1090eba81$export$c3950d9923825c02(proxy, ctx, subProxy, descriptorDefaults),\n        override: (scope)=>$dc52b6b1090eba81$export$c3950d9923825c02(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete proxy[prop]; // remove from proxy\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop, receiver) {\n            return $dc52b6b1090eba81$var$_cached(target, prop, ()=>$dc52b6b1090eba81$var$_resolveWithContext(target, prop, receiver));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n                enumerable: true,\n                configurable: true\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(proxy);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return Reflect.has(proxy, prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys () {\n            return Reflect.ownKeys(proxy);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            proxy[prop] = value; // set to proxy\n            delete target[prop]; // remove from cache\n            return true;\n        }\n    });\n}\n/**\n * @private\n */ function $dc52b6b1090eba81$export$7910e0436ed8d1de(proxy, defaults = {\n    scriptable: true,\n    indexable: true\n}) {\n    const { _scriptable: _scriptable = defaults.scriptable, _indexable: _indexable = defaults.indexable, _allKeys: _allKeys = defaults.allKeys } = proxy;\n    return {\n        allKeys: _allKeys,\n        scriptable: _scriptable,\n        indexable: _indexable,\n        isScriptable: $dc52b6b1090eba81$export$a93c5207d687da10(_scriptable) ? _scriptable : ()=>_scriptable,\n        isIndexable: $dc52b6b1090eba81$export$a93c5207d687da10(_indexable) ? _indexable : ()=>_indexable\n    };\n}\nconst $dc52b6b1090eba81$var$readKey = (prefix, name)=>prefix ? prefix + $dc52b6b1090eba81$export$a8550f7dbe79f93a(name) : name;\nconst $dc52b6b1090eba81$var$needsSubResolver = (prop, value)=>$dc52b6b1090eba81$export$23f2a1d2818174ef(value) && prop !== \"adapters\" && (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction $dc52b6b1090eba81$var$_cached(target, prop, resolve) {\n    if (Object.prototype.hasOwnProperty.call(target, prop)) return target[prop];\n    const value = resolve();\n    // cache the resolved value\n    target[prop] = value;\n    return value;\n}\nfunction $dc52b6b1090eba81$var$_resolveWithContext(target, prop, receiver) {\n    const { _proxy: _proxy, _context: _context, _subProxy: _subProxy, _descriptors: descriptors } = target;\n    let value = _proxy[prop]; // resolve from proxy\n    // resolve with context\n    if ($dc52b6b1090eba81$export$a93c5207d687da10(value) && descriptors.isScriptable(prop)) value = $dc52b6b1090eba81$var$_resolveScriptable(prop, value, target, receiver);\n    if ($dc52b6b1090eba81$export$8b22cf2602fb60ce(value) && value.length) value = $dc52b6b1090eba81$var$_resolveArray(prop, value, target, descriptors.isIndexable);\n    if ($dc52b6b1090eba81$var$needsSubResolver(prop, value)) // if the resolved value is an object, create a sub resolver for it\n    value = $dc52b6b1090eba81$export$c3950d9923825c02(value, _context, _subProxy && _subProxy[prop], descriptors);\n    return value;\n}\nfunction $dc52b6b1090eba81$var$_resolveScriptable(prop, getValue, target, receiver) {\n    const { _proxy: _proxy, _context: _context, _subProxy: _subProxy, _stack: _stack } = target;\n    if (_stack.has(prop)) throw new Error(\"Recursion detected: \" + Array.from(_stack).join(\"->\") + \"->\" + prop);\n    _stack.add(prop);\n    let value = getValue(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if ($dc52b6b1090eba81$var$needsSubResolver(prop, value)) // When scriptable option returns an object, create a resolver on that.\n    value = $dc52b6b1090eba81$var$createSubResolver(_proxy._scopes, _proxy, prop, value);\n    return value;\n}\nfunction $dc52b6b1090eba81$var$_resolveArray(prop, value, target, isIndexable) {\n    const { _proxy: _proxy, _context: _context, _subProxy: _subProxy, _descriptors: descriptors } = target;\n    if (typeof _context.index !== \"undefined\" && isIndexable(prop)) return value[_context.index % value.length];\n    else if ($dc52b6b1090eba81$export$23f2a1d2818174ef(value[0])) {\n        // Array of objects, return array or resolvers\n        const arr = value;\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\n        value = [];\n        for (const item of arr){\n            const resolver = $dc52b6b1090eba81$var$createSubResolver(scopes, _proxy, prop, item);\n            value.push($dc52b6b1090eba81$export$c3950d9923825c02(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n        }\n    }\n    return value;\n}\nfunction $dc52b6b1090eba81$var$resolveFallback(fallback, prop, value) {\n    return $dc52b6b1090eba81$export$a93c5207d687da10(fallback) ? fallback(prop, value) : fallback;\n}\nconst $dc52b6b1090eba81$var$getScope = (key, parent)=>key === true ? parent : typeof key === \"string\" ? $dc52b6b1090eba81$export$2d1720544b23b823(parent, key) : undefined;\nfunction $dc52b6b1090eba81$var$addScopes(set, parentScopes, key, parentFallback, value) {\n    for (const parent of parentScopes){\n        const scope = $dc52b6b1090eba81$var$getScope(key, parent);\n        if (scope) {\n            set.add(scope);\n            const fallback = $dc52b6b1090eba81$var$resolveFallback(scope._fallback, key, value);\n            if (typeof fallback !== \"undefined\" && fallback !== key && fallback !== parentFallback) // When we reach the descriptor that defines a new _fallback, return that.\n            // The fallback will resume to that new scope.\n            return fallback;\n        } else if (scope === false && typeof parentFallback !== \"undefined\" && key !== parentFallback) // Fallback to `false` results to `false`, when falling back to different key.\n        // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n        return null;\n    }\n    return false;\n}\nfunction $dc52b6b1090eba81$var$createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = $dc52b6b1090eba81$var$resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [\n        ...parentScopes,\n        ...rootScopes\n    ];\n    const set = new Set();\n    set.add(value);\n    let key = $dc52b6b1090eba81$var$addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n    if (key === null) return false;\n    if (typeof fallback !== \"undefined\" && fallback !== prop) {\n        key = $dc52b6b1090eba81$var$addScopesFromKey(set, allScopes, fallback, key, value);\n        if (key === null) return false;\n    }\n    return $dc52b6b1090eba81$export$a9c996f45e5784d0(Array.from(set), [\n        \"\"\n    ], rootScopes, fallback, ()=>$dc52b6b1090eba81$var$subGetTarget(resolver, prop, value));\n}\nfunction $dc52b6b1090eba81$var$addScopesFromKey(set, allScopes, key, fallback, item) {\n    while(key)key = $dc52b6b1090eba81$var$addScopes(set, allScopes, key, fallback, item);\n    return key;\n}\nfunction $dc52b6b1090eba81$var$subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) parent[prop] = {};\n    const target = parent[prop];\n    if ($dc52b6b1090eba81$export$8b22cf2602fb60ce(target) && $dc52b6b1090eba81$export$23f2a1d2818174ef(value)) // For array of objects, the object is used to store updated values\n    return value;\n    return target || {};\n}\nfunction $dc52b6b1090eba81$var$_resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes){\n        value = $dc52b6b1090eba81$var$_resolve($dc52b6b1090eba81$var$readKey(prefix, prop), scopes);\n        if (typeof value !== \"undefined\") return $dc52b6b1090eba81$var$needsSubResolver(prop, value) ? $dc52b6b1090eba81$var$createSubResolver(scopes, proxy, prop, value) : value;\n    }\n}\nfunction $dc52b6b1090eba81$var$_resolve(key, scopes) {\n    for (const scope of scopes){\n        if (!scope) continue;\n        const value = scope[key];\n        if (typeof value !== \"undefined\") return value;\n    }\n}\nfunction $dc52b6b1090eba81$var$getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) keys = target._keys = $dc52b6b1090eba81$var$resolveKeysFromAllScopes(target._scopes);\n    return keys;\n}\nfunction $dc52b6b1090eba81$var$resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes)for (const key of Object.keys(scope).filter((k)=>!k.startsWith(\"_\")))set.add(key);\n    return Array.from(set);\n}\nfunction $dc52b6b1090eba81$export$4a5767248b18ef41(meta, data, start, count) {\n    const { iScale: iScale } = meta;\n    const { key: key = \"r\" } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for(i = 0, ilen = count; i < ilen; ++i){\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n            r: iScale.parse($dc52b6b1090eba81$export$2d1720544b23b823(item, key), index)\n        };\n    }\n    return parsed;\n}\nconst $dc52b6b1090eba81$var$EPSILON = Number.EPSILON || 1e-14;\nconst $dc52b6b1090eba81$var$getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\nconst $dc52b6b1090eba81$var$getValueAxis = (indexAxis)=>indexAxis === \"x\" ? \"y\" : \"x\";\nfunction $dc52b6b1090eba81$export$e171bab687b50e0(firstPoint, middlePoint, afterPoint, t) {\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n    // This function must also respect \"skipped\" points\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = $dc52b6b1090eba81$export$158acd800e1ef08b(current, previous);\n    const d12 = $dc52b6b1090eba81$export$158acd800e1ef08b(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    // If all points are the same, s01 & s02 will be inf\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01; // scaling factor for triangle Ta\n    const fb = t * s12;\n    return {\n        previous: {\n            x: current.x - fa * (next.x - previous.x),\n            y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n            x: current.x + fb * (next.x - previous.x),\n            y: current.y + fb * (next.y - previous.y)\n        }\n    };\n}\n/**\n * Adjust tangents to ensure monotonic properties\n */ function $dc52b6b1090eba81$var$monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = $dc52b6b1090eba81$var$getPoint(points, 0);\n    for(let i = 0; i < pointsLen - 1; ++i){\n        pointCurrent = pointAfter;\n        pointAfter = $dc52b6b1090eba81$var$getPoint(points, i + 1);\n        if (!pointCurrent || !pointAfter) continue;\n        if ($dc52b6b1090eba81$export$a05254e7c3aeba6e(deltaK[i], 0, $dc52b6b1090eba81$var$EPSILON)) {\n            mK[i] = mK[i + 1] = 0;\n            continue;\n        }\n        alphaK = mK[i] / deltaK[i];\n        betaK = mK[i + 1] / deltaK[i];\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n        if (squaredMagnitude <= 9) continue;\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        mK[i] = alphaK * tauK * deltaK[i];\n        mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n}\nfunction $dc52b6b1090eba81$var$monotoneCompute(points, mK, indexAxis = \"x\") {\n    const valueAxis = $dc52b6b1090eba81$var$getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = $dc52b6b1090eba81$var$getPoint(points, 0);\n    for(let i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = $dc52b6b1090eba81$var$getPoint(points, i + 1);\n        if (!pointCurrent) continue;\n        const iPixel = pointCurrent[indexAxis];\n        const vPixel = pointCurrent[valueAxis];\n        if (pointBefore) {\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n        }\n        if (pointAfter) {\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n        }\n    }\n}\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */ function $dc52b6b1090eba81$export$527e9aa3390079e9(points, indexAxis = \"x\") {\n    const valueAxis = $dc52b6b1090eba81$var$getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    // Calculate slopes (deltaK) and initialize tangents (mK)\n    let i, pointBefore, pointCurrent;\n    let pointAfter = $dc52b6b1090eba81$var$getPoint(points, 0);\n    for(i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = $dc52b6b1090eba81$var$getPoint(points, i + 1);\n        if (!pointCurrent) continue;\n        if (pointAfter) {\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n        }\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : $dc52b6b1090eba81$export$2408f22a0fab9ae5(deltaK[i - 1]) !== $dc52b6b1090eba81$export$2408f22a0fab9ae5(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    $dc52b6b1090eba81$var$monotoneAdjust(points, deltaK, mK);\n    $dc52b6b1090eba81$var$monotoneCompute(points, mK, indexAxis);\n}\nfunction $dc52b6b1090eba81$var$capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n}\nfunction $dc52b6b1090eba81$var$capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = $dc52b6b1090eba81$export$e7094788287c5e9b(points[0], area);\n    for(i = 0, ilen = points.length; i < ilen; ++i){\n        inAreaPrev = inArea;\n        inArea = inAreaNext;\n        inAreaNext = i < ilen - 1 && $dc52b6b1090eba81$export$e7094788287c5e9b(points[i + 1], area);\n        if (!inArea) continue;\n        point = points[i];\n        if (inAreaPrev) {\n            point.cp1x = $dc52b6b1090eba81$var$capControlPoint(point.cp1x, area.left, area.right);\n            point.cp1y = $dc52b6b1090eba81$var$capControlPoint(point.cp1y, area.top, area.bottom);\n        }\n        if (inAreaNext) {\n            point.cp2x = $dc52b6b1090eba81$var$capControlPoint(point.cp2x, area.left, area.right);\n            point.cp2y = $dc52b6b1090eba81$var$capControlPoint(point.cp2y, area.top, area.bottom);\n        }\n    }\n}\n/**\n * @private\n */ function $dc52b6b1090eba81$export$ab83b03e4111b1d0(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    // Only consider points that are drawn in case the spanGaps option is used\n    if (options.spanGaps) points = points.filter((pt)=>!pt.skip);\n    if (options.cubicInterpolationMode === \"monotone\") $dc52b6b1090eba81$export$527e9aa3390079e9(points, indexAxis);\n    else {\n        let prev = loop ? points[points.length - 1] : points[0];\n        for(i = 0, ilen = points.length; i < ilen; ++i){\n            point = points[i];\n            controlPoints = $dc52b6b1090eba81$export$e171bab687b50e0(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n            point.cp1x = controlPoints.previous.x;\n            point.cp1y = controlPoints.previous.y;\n            point.cp2x = controlPoints.next.x;\n            point.cp2y = controlPoints.next.y;\n            prev = point;\n        }\n    }\n    if (options.capBezierPoints) $dc52b6b1090eba81$var$capBezierPoints(points, area);\n}\n/**\n * Note: typedefs are auto-exported, so use a made-up `dom` namespace where\n * necessary to avoid duplicates with `export * from './helpers`; see\n * https://github.com/microsoft/TypeScript/issues/46011\n * @typedef { import('../core/core.controller.js').default } dom.Chart\n * @typedef { import('../../types').ChartEvent } ChartEvent\n */ /**\n * @private\n */ function $dc52b6b1090eba81$export$3a1a48c8f6ef640e() {\n    return typeof window !== \"undefined\" && typeof document !== \"undefined\";\n}\n/**\n * @private\n */ function $dc52b6b1090eba81$export$9bb611d729802a56(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === \"[object ShadowRoot]\") parent = parent.host;\n    return parent;\n}\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */ function $dc52b6b1090eba81$var$parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === \"string\") {\n        valueInPixels = parseInt(styleValue, 10);\n        if (styleValue.indexOf(\"%\") !== -1) // percentage * size in dimension\n        valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n    } else valueInPixels = styleValue;\n    return valueInPixels;\n}\nconst $dc52b6b1090eba81$var$getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\nfunction $dc52b6b1090eba81$export$a17c37559e1db147(el, property) {\n    return $dc52b6b1090eba81$var$getComputedStyle(el).getPropertyValue(property);\n}\nconst $dc52b6b1090eba81$var$positions = [\n    \"top\",\n    \"right\",\n    \"bottom\",\n    \"left\"\n];\nfunction $dc52b6b1090eba81$var$getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? \"-\" + suffix : \"\";\n    for(let i = 0; i < 4; i++){\n        const pos = $dc52b6b1090eba81$var$positions[i];\n        result[pos] = parseFloat(styles[style + \"-\" + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n}\nconst $dc52b6b1090eba81$var$useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */ function $dc52b6b1090eba81$var$getCanvasPosition(e, canvas) {\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX: offsetX, offsetY: offsetY } = source;\n    let box = false;\n    let x, y;\n    if ($dc52b6b1090eba81$var$useOffsetPos(offsetX, offsetY, e.target)) {\n        x = offsetX;\n        y = offsetY;\n    } else {\n        const rect = canvas.getBoundingClientRect();\n        x = source.clientX - rect.left;\n        y = source.clientY - rect.top;\n        box = true;\n    }\n    return {\n        x: x,\n        y: y,\n        box: box\n    };\n}\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */ function $dc52b6b1090eba81$export$df995fae86a55f06(event, chart) {\n    if (\"native\" in event) return event;\n    const { canvas: canvas, currentDevicePixelRatio: currentDevicePixelRatio } = chart;\n    const style = $dc52b6b1090eba81$var$getComputedStyle(canvas);\n    const borderBox = style.boxSizing === \"border-box\";\n    const paddings = $dc52b6b1090eba81$var$getPositionedStyle(style, \"padding\");\n    const borders = $dc52b6b1090eba81$var$getPositionedStyle(style, \"border\", \"width\");\n    const { x: x, y: y, box: box } = $dc52b6b1090eba81$var$getCanvasPosition(event, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width: width, height: height } = chart;\n    if (borderBox) {\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    return {\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n}\nfunction $dc52b6b1090eba81$var$getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n        const container = $dc52b6b1090eba81$export$9bb611d729802a56(canvas);\n        if (!container) {\n            width = canvas.clientWidth;\n            height = canvas.clientHeight;\n        } else {\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\n            const containerStyle = $dc52b6b1090eba81$var$getComputedStyle(container);\n            const containerBorder = $dc52b6b1090eba81$var$getPositionedStyle(containerStyle, \"border\", \"width\");\n            const containerPadding = $dc52b6b1090eba81$var$getPositionedStyle(containerStyle, \"padding\");\n            width = rect.width - containerPadding.width - containerBorder.width;\n            height = rect.height - containerPadding.height - containerBorder.height;\n            maxWidth = $dc52b6b1090eba81$var$parseMaxStyle(containerStyle.maxWidth, container, \"clientWidth\");\n            maxHeight = $dc52b6b1090eba81$var$parseMaxStyle(containerStyle.maxHeight, container, \"clientHeight\");\n        }\n    }\n    return {\n        width: width,\n        height: height,\n        maxWidth: maxWidth || $dc52b6b1090eba81$export$2ec5befb9e6c97d4,\n        maxHeight: maxHeight || $dc52b6b1090eba81$export$2ec5befb9e6c97d4\n    };\n}\nconst $dc52b6b1090eba81$var$round1 = (v)=>Math.round(v * 10) / 10;\n// eslint-disable-next-line complexity\nfunction $dc52b6b1090eba81$export$2329c99376c9d0a4(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = $dc52b6b1090eba81$var$getComputedStyle(canvas);\n    const margins = $dc52b6b1090eba81$var$getPositionedStyle(style, \"margin\");\n    const maxWidth = $dc52b6b1090eba81$var$parseMaxStyle(style.maxWidth, canvas, \"clientWidth\") || $dc52b6b1090eba81$export$2ec5befb9e6c97d4;\n    const maxHeight = $dc52b6b1090eba81$var$parseMaxStyle(style.maxHeight, canvas, \"clientHeight\") || $dc52b6b1090eba81$export$2ec5befb9e6c97d4;\n    const containerSize = $dc52b6b1090eba81$var$getContainerSize(canvas, bbWidth, bbHeight);\n    let { width: width, height: height } = containerSize;\n    if (style.boxSizing === \"content-box\") {\n        const borders = $dc52b6b1090eba81$var$getPositionedStyle(style, \"border\", \"width\");\n        const paddings = $dc52b6b1090eba81$var$getPositionedStyle(style, \"padding\");\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n    width = $dc52b6b1090eba81$var$round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = $dc52b6b1090eba81$var$round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) // https://github.com/chartjs/Chart.js/issues/4659\n    // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n    height = $dc52b6b1090eba81$var$round1(width / 2);\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n        height = containerSize.height;\n        width = $dc52b6b1090eba81$var$round1(Math.floor(height * aspectRatio));\n    }\n    return {\n        width: width,\n        height: height\n    };\n}\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */ function $dc52b6b1090eba81$export$f787f51d84a910ad(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = Math.floor(chart.height * pixelRatio);\n    const deviceWidth = Math.floor(chart.width * pixelRatio);\n    chart.height = Math.floor(chart.height);\n    chart.width = Math.floor(chart.width);\n    const canvas = chart.canvas;\n    // If no style has been set on the canvas, the render size is used as display size,\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n    // See https://github.com/chartjs/Chart.js/issues/3575\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n        canvas.style.height = `${chart.height}px`;\n        canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n        chart.currentDevicePixelRatio = pixelRatio;\n        canvas.height = deviceHeight;\n        canvas.width = deviceWidth;\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        return true;\n    }\n    return false;\n}\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */ const $dc52b6b1090eba81$export$3466f893ebf79586 = function() {\n    let passiveSupported = false;\n    try {\n        const options = {\n            get passive () {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        window.addEventListener(\"test\", null, options);\n        window.removeEventListener(\"test\", null, options);\n    } catch (e) {\n    // continue regardless of error\n    }\n    return passiveSupported;\n}();\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */ function $dc52b6b1090eba81$export$b4171a6734a65d42(element, property) {\n    const value = $dc52b6b1090eba81$export$a17c37559e1db147(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n}\n/**\n * @private\n */ function $dc52b6b1090eba81$export$8a5498727ef6be21(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n}\n/**\n * @private\n */ function $dc52b6b1090eba81$export$7a38258bbe170828(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: mode === \"middle\" ? t < 0.5 ? p1.y : p2.y : mode === \"after\" ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n    };\n}\n/**\n * @private\n */ function $dc52b6b1090eba81$export$2f6ca3d3b1f80bf5(p1, p2, t, mode) {\n    const cp1 = {\n        x: p1.cp2x,\n        y: p1.cp2y\n    };\n    const cp2 = {\n        x: p2.cp1x,\n        y: p2.cp1y\n    };\n    const a = $dc52b6b1090eba81$export$8a5498727ef6be21(p1, cp1, t);\n    const b = $dc52b6b1090eba81$export$8a5498727ef6be21(cp1, cp2, t);\n    const c = $dc52b6b1090eba81$export$8a5498727ef6be21(cp2, p2, t);\n    const d = $dc52b6b1090eba81$export$8a5498727ef6be21(a, b, t);\n    const e = $dc52b6b1090eba81$export$8a5498727ef6be21(b, c, t);\n    return $dc52b6b1090eba81$export$8a5498727ef6be21(d, e, t);\n}\nconst $dc52b6b1090eba81$var$getRightToLeftAdapter = function(rectX, width) {\n    return {\n        x (x) {\n            return rectX + rectX + width - x;\n        },\n        setWidth (w) {\n            width = w;\n        },\n        textAlign (align) {\n            if (align === \"center\") return align;\n            return align === \"right\" ? \"left\" : \"right\";\n        },\n        xPlus (x, value) {\n            return x - value;\n        },\n        leftForLtr (x, itemWidth) {\n            return x - itemWidth;\n        }\n    };\n};\nconst $dc52b6b1090eba81$var$getLeftToRightAdapter = function() {\n    return {\n        x (x) {\n            return x;\n        },\n        setWidth (w) {},\n        textAlign (align) {\n            return align;\n        },\n        xPlus (x, value) {\n            return x + value;\n        },\n        leftForLtr (x, _itemWidth) {\n            return x;\n        }\n    };\n};\nfunction $dc52b6b1090eba81$export$3d12bd131bb975d1(rtl, rectX, width) {\n    return rtl ? $dc52b6b1090eba81$var$getRightToLeftAdapter(rectX, width) : $dc52b6b1090eba81$var$getLeftToRightAdapter();\n}\nfunction $dc52b6b1090eba81$export$91c6e00c14e7e6fd(ctx, direction) {\n    let style, original;\n    if (direction === \"ltr\" || direction === \"rtl\") {\n        style = ctx.canvas.style;\n        original = [\n            style.getPropertyValue(\"direction\"),\n            style.getPropertyPriority(\"direction\")\n        ];\n        style.setProperty(\"direction\", direction, \"important\");\n        ctx.prevTextDirection = original;\n    }\n}\nfunction $dc52b6b1090eba81$export$890c4ad488842ce7(ctx, original) {\n    if (original !== undefined) {\n        delete ctx.prevTextDirection;\n        ctx.canvas.style.setProperty(\"direction\", original[0], original[1]);\n    }\n}\nfunction $dc52b6b1090eba81$var$propertyFn(property) {\n    if (property === \"angle\") return {\n        between: $dc52b6b1090eba81$export$ffb5f4729a158638,\n        compare: $dc52b6b1090eba81$export$c18d01048907ea92,\n        normalize: $dc52b6b1090eba81$export$28f7fcd39efa255\n    };\n    return {\n        between: $dc52b6b1090eba81$export$3b513254972cfc9c,\n        compare: (a, b)=>a - b,\n        normalize: (x)=>x\n    };\n}\nfunction $dc52b6b1090eba81$var$normalizeSegment({ start: start, end: end, count: count, loop: loop, style: style }) {\n    return {\n        start: start % count,\n        end: end % count,\n        loop: loop && (end - start + 1) % count === 0,\n        style: style\n    };\n}\nfunction $dc52b6b1090eba81$var$getSegment(segment, points, bounds) {\n    const { property: property, start: startBound, end: endBound } = bounds;\n    const { between: between, normalize: normalize } = $dc52b6b1090eba81$var$propertyFn(property);\n    const count = points.length;\n    let { start: start, end: end, loop: loop } = segment;\n    let i, ilen;\n    if (loop) {\n        start += count;\n        end += count;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) break;\n            start--;\n            end--;\n        }\n        start %= count;\n        end %= count;\n    }\n    if (end < start) end += count;\n    return {\n        start: start,\n        end: end,\n        loop: loop,\n        style: segment.style\n    };\n}\nfunction $dc52b6b1090eba81$export$9fa96a7d116ea3ce(segment, points, bounds) {\n    if (!bounds) return [\n        segment\n    ];\n    const { property: property, start: startBound, end: endBound } = bounds;\n    const count = points.length;\n    const { compare: compare, between: between, normalize: normalize } = $dc52b6b1090eba81$var$propertyFn(property);\n    const { start: start, end: end, loop: loop, style: style } = $dc52b6b1090eba81$var$getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = ()=>inside || startIsBefore();\n    const shouldStop = ()=>!inside || endIsBefore();\n    for(let i = start, prev = start; i <= end; ++i){\n        point = points[i % count];\n        if (point.skip) continue;\n        value = normalize(point[property]);\n        if (value === prevValue) continue;\n        inside = between(value, startBound, endBound);\n        if (subStart === null && shouldStart()) subStart = compare(value, startBound) === 0 ? i : prev;\n        if (subStart !== null && shouldStop()) {\n            result.push($dc52b6b1090eba81$var$normalizeSegment({\n                start: subStart,\n                end: i,\n                loop: loop,\n                count: count,\n                style: style\n            }));\n            subStart = null;\n        }\n        prev = i;\n        prevValue = value;\n    }\n    if (subStart !== null) result.push($dc52b6b1090eba81$var$normalizeSegment({\n        start: subStart,\n        end: end,\n        loop: loop,\n        count: count,\n        style: style\n    }));\n    return result;\n}\nfunction $dc52b6b1090eba81$export$306ddfe3a8403e2(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for(let i = 0; i < segments.length; i++){\n        const sub = $dc52b6b1090eba81$export$9fa96a7d116ea3ce(segments[i], line.points, bounds);\n        if (sub.length) result.push(...sub);\n    }\n    return result;\n}\nfunction $dc52b6b1090eba81$var$findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) while(start < count && !points[start].skip)start++;\n    while(start < count && points[start].skip)start++;\n    start %= count;\n    if (loop) end += start;\n    while(end > start && points[end % count].skip)end--;\n    end %= count;\n    return {\n        start: start,\n        end: end\n    };\n}\nfunction $dc52b6b1090eba81$var$solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for(end = start + 1; end <= max; ++end){\n        const cur = points[end % count];\n        if (cur.skip || cur.stop) {\n            if (!prev.skip) {\n                loop = false;\n                result.push({\n                    start: start % count,\n                    end: (end - 1) % count,\n                    loop: loop\n                });\n                start = last = cur.stop ? end : null;\n            }\n        } else {\n            last = end;\n            if (prev.skip) start = end;\n        }\n        prev = cur;\n    }\n    if (last !== null) result.push({\n        start: start % count,\n        end: last % count,\n        loop: loop\n    });\n    return result;\n}\nfunction $dc52b6b1090eba81$export$1a82df3d29112e01(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) return [];\n    const loop = !!line._loop;\n    const { start: start, end: end } = $dc52b6b1090eba81$var$findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) return $dc52b6b1090eba81$var$splitByStyles(line, [\n        {\n            start: start,\n            end: end,\n            loop: loop\n        }\n    ], points, segmentOptions);\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return $dc52b6b1090eba81$var$splitByStyles(line, $dc52b6b1090eba81$var$solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\nfunction $dc52b6b1090eba81$var$splitByStyles(line, segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) return segments;\n    return $dc52b6b1090eba81$var$doSplitByStyles(line, segments, points, segmentOptions);\n}\nfunction $dc52b6b1090eba81$var$doSplitByStyles(line, segments, points, segmentOptions) {\n    const chartContext = line._chart.getContext();\n    const baseStyle = $dc52b6b1090eba81$var$readStyle(line.options);\n    const { _datasetIndex: datasetIndex, options: { spanGaps: spanGaps } } = line;\n    const count = points.length;\n    const result = [];\n    let prevStyle = baseStyle;\n    let start = segments[0].start;\n    let i = start;\n    function addStyle(s, e, l, st) {\n        const dir = spanGaps ? -1 : 1;\n        if (s === e) return;\n        s += count;\n        while(points[s % count].skip)s -= dir;\n        while(points[e % count].skip)e += dir;\n        if (s % count !== e % count) {\n            result.push({\n                start: s % count,\n                end: e % count,\n                loop: l,\n                style: st\n            });\n            prevStyle = st;\n            start = e % count;\n        }\n    }\n    for (const segment of segments){\n        start = spanGaps ? start : segment.start;\n        let prev = points[start % count];\n        let style;\n        for(i = start + 1; i <= segment.end; i++){\n            const pt = points[i % count];\n            style = $dc52b6b1090eba81$var$readStyle(segmentOptions.setContext($dc52b6b1090eba81$export$35e795649ee09318(chartContext, {\n                type: \"segment\",\n                p0: prev,\n                p1: pt,\n                p0DataIndex: (i - 1) % count,\n                p1DataIndex: i % count,\n                datasetIndex: datasetIndex\n            })));\n            if ($dc52b6b1090eba81$var$styleChanged(style, prevStyle)) addStyle(start, i - 1, segment.loop, prevStyle);\n            prev = pt;\n            prevStyle = style;\n        }\n        if (start < i - 1) addStyle(start, i - 1, segment.loop, prevStyle);\n    }\n    return result;\n}\nfunction $dc52b6b1090eba81$var$readStyle(options) {\n    return {\n        backgroundColor: options.backgroundColor,\n        borderCapStyle: options.borderCapStyle,\n        borderDash: options.borderDash,\n        borderDashOffset: options.borderDashOffset,\n        borderJoinStyle: options.borderJoinStyle,\n        borderWidth: options.borderWidth,\n        borderColor: options.borderColor\n    };\n}\nfunction $dc52b6b1090eba81$var$styleChanged(style, prevStyle) {\n    if (!prevStyle) return false;\n    const cache = [];\n    const replacer = function(key, value) {\n        if (!$dc52b6b1090eba81$export$f96d196f7728bb5(value)) return value;\n        if (!cache.includes(value)) cache.push(value);\n        return cache.indexOf(value);\n    };\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n\n});\nparcelRequire.register(\"fLie1\", function(module, exports) {\n\n$parcel$export(module.exports, \"Color\", () => $b79961ef84658051$export$892596cec99bc70e);\n/*!\n * @kurkle/color v0.3.2\n * https://github.com/kurkle/color#readme\n * (c) 2023 Jukka Kurkela\n * Released under the MIT License\n */ function $b79961ef84658051$export$2077e0241d6afd3c(v) {\n    return v + 0.5 | 0;\n}\nconst $b79961ef84658051$export$837ba5c449269406 = (v, l, h)=>Math.max(Math.min(v, h), l);\nfunction $b79961ef84658051$export$bcc6e673dfa14d36(v) {\n    return $b79961ef84658051$export$837ba5c449269406($b79961ef84658051$export$2077e0241d6afd3c(v * 2.55), 0, 255);\n}\nfunction $b79961ef84658051$export$869b26d4e1bbdb63(v) {\n    return $b79961ef84658051$export$837ba5c449269406($b79961ef84658051$export$2077e0241d6afd3c(v / 2.55), 0, 100);\n}\nfunction $b79961ef84658051$export$ed9bd8dcaeba14f6(v) {\n    return $b79961ef84658051$export$837ba5c449269406($b79961ef84658051$export$2077e0241d6afd3c(v * 255), 0, 255);\n}\nfunction $b79961ef84658051$export$dbf961a8d278dbef(v) {\n    return $b79961ef84658051$export$837ba5c449269406($b79961ef84658051$export$2077e0241d6afd3c(v / 2.55) / 100, 0, 1);\n}\nfunction $b79961ef84658051$export$aa35ef1f24408ab9(v) {\n    return $b79961ef84658051$export$837ba5c449269406($b79961ef84658051$export$2077e0241d6afd3c(v * 100), 0, 100);\n}\nconst $b79961ef84658051$var$map$1 = {\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15,\n    a: 10,\n    b: 11,\n    c: 12,\n    d: 13,\n    e: 14,\n    f: 15\n};\nconst $b79961ef84658051$var$hex = [\n    ...\"0123456789ABCDEF\"\n];\nconst $b79961ef84658051$var$h1 = (b)=>$b79961ef84658051$var$hex[b & 0xF];\nconst $b79961ef84658051$var$h2 = (b)=>$b79961ef84658051$var$hex[(b & 0xF0) >> 4] + $b79961ef84658051$var$hex[b & 0xF];\nconst $b79961ef84658051$var$eq = (b)=>(b & 0xF0) >> 4 === (b & 0xF);\nconst $b79961ef84658051$var$isShort = (v)=>$b79961ef84658051$var$eq(v.r) && $b79961ef84658051$var$eq(v.g) && $b79961ef84658051$var$eq(v.b) && $b79961ef84658051$var$eq(v.a);\nfunction $b79961ef84658051$export$625a38b961e8b5e9(str) {\n    var len = str.length;\n    var ret;\n    if (str[0] === \"#\") {\n        if (len === 4 || len === 5) ret = {\n            r: 255 & $b79961ef84658051$var$map$1[str[1]] * 17,\n            g: 255 & $b79961ef84658051$var$map$1[str[2]] * 17,\n            b: 255 & $b79961ef84658051$var$map$1[str[3]] * 17,\n            a: len === 5 ? $b79961ef84658051$var$map$1[str[4]] * 17 : 255\n        };\n        else if (len === 7 || len === 9) ret = {\n            r: $b79961ef84658051$var$map$1[str[1]] << 4 | $b79961ef84658051$var$map$1[str[2]],\n            g: $b79961ef84658051$var$map$1[str[3]] << 4 | $b79961ef84658051$var$map$1[str[4]],\n            b: $b79961ef84658051$var$map$1[str[5]] << 4 | $b79961ef84658051$var$map$1[str[6]],\n            a: len === 9 ? $b79961ef84658051$var$map$1[str[7]] << 4 | $b79961ef84658051$var$map$1[str[8]] : 255\n        };\n    }\n    return ret;\n}\nconst $b79961ef84658051$var$alpha = (a, f)=>a < 255 ? f(a) : \"\";\nfunction $b79961ef84658051$export$1b06654353ef9f67(v) {\n    var f = $b79961ef84658051$var$isShort(v) ? $b79961ef84658051$var$h1 : $b79961ef84658051$var$h2;\n    return v ? \"#\" + f(v.r) + f(v.g) + f(v.b) + $b79961ef84658051$var$alpha(v.a, f) : undefined;\n}\nconst $b79961ef84658051$var$HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction $b79961ef84658051$var$hsl2rgbn(h, s, l) {\n    const a = s * Math.min(l, 1 - l);\n    const f = (n, k = (n + h / 30) % 12)=>l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n    return [\n        f(0),\n        f(8),\n        f(4)\n    ];\n}\nfunction $b79961ef84658051$var$hsv2rgbn(h, s, v) {\n    const f = (n, k = (n + h / 60) % 6)=>v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n    return [\n        f(5),\n        f(3),\n        f(1)\n    ];\n}\nfunction $b79961ef84658051$var$hwb2rgbn(h, w, b) {\n    const rgb = $b79961ef84658051$var$hsl2rgbn(h, 1, 0.5);\n    let i;\n    if (w + b > 1) {\n        i = 1 / (w + b);\n        w *= i;\n        b *= i;\n    }\n    for(i = 0; i < 3; i++){\n        rgb[i] *= 1 - w - b;\n        rgb[i] += w;\n    }\n    return rgb;\n}\nfunction $b79961ef84658051$var$hueValue(r, g, b, d, max) {\n    if (r === max) return (g - b) / d + (g < b ? 6 : 0);\n    if (g === max) return (b - r) / d + 2;\n    return (r - g) / d + 4;\n}\nfunction $b79961ef84658051$export$b5ba70b240f8f7f(v) {\n    const range = 255;\n    const r = v.r / range;\n    const g = v.g / range;\n    const b = v.b / range;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const l = (max + min) / 2;\n    let h, s, d;\n    if (max !== min) {\n        d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        h = $b79961ef84658051$var$hueValue(r, g, b, d, max);\n        h = h * 60 + 0.5;\n    }\n    return [\n        h | 0,\n        s || 0,\n        l\n    ];\n}\nfunction $b79961ef84658051$var$calln(f, a, b, c) {\n    return (Array.isArray(a) ? f(a[0], a[1], a[2]) : f(a, b, c)).map($b79961ef84658051$export$ed9bd8dcaeba14f6);\n}\nfunction $b79961ef84658051$export$4c15bd42559b811d(h, s, l) {\n    return $b79961ef84658051$var$calln($b79961ef84658051$var$hsl2rgbn, h, s, l);\n}\nfunction $b79961ef84658051$export$e2710022c70fc9ee(h, w, b) {\n    return $b79961ef84658051$var$calln($b79961ef84658051$var$hwb2rgbn, h, w, b);\n}\nfunction $b79961ef84658051$export$b785a357c84e4a04(h, s, v) {\n    return $b79961ef84658051$var$calln($b79961ef84658051$var$hsv2rgbn, h, s, v);\n}\nfunction $b79961ef84658051$var$hue(h) {\n    return (h % 360 + 360) % 360;\n}\nfunction $b79961ef84658051$export$5e91288c399be4f9(str) {\n    const m = $b79961ef84658051$var$HUE_RE.exec(str);\n    let a = 255;\n    let v;\n    if (!m) return;\n    if (m[5] !== v) a = m[6] ? $b79961ef84658051$export$bcc6e673dfa14d36(+m[5]) : $b79961ef84658051$export$ed9bd8dcaeba14f6(+m[5]);\n    const h = $b79961ef84658051$var$hue(+m[2]);\n    const p1 = +m[3] / 100;\n    const p2 = +m[4] / 100;\n    if (m[1] === \"hwb\") v = $b79961ef84658051$export$e2710022c70fc9ee(h, p1, p2);\n    else if (m[1] === \"hsv\") v = $b79961ef84658051$export$b785a357c84e4a04(h, p1, p2);\n    else v = $b79961ef84658051$export$4c15bd42559b811d(h, p1, p2);\n    return {\n        r: v[0],\n        g: v[1],\n        b: v[2],\n        a: a\n    };\n}\nfunction $b79961ef84658051$export$bb628a54ab399bc9(v, deg) {\n    var h = $b79961ef84658051$export$b5ba70b240f8f7f(v);\n    h[0] = $b79961ef84658051$var$hue(h[0] + deg);\n    h = $b79961ef84658051$export$4c15bd42559b811d(h);\n    v.r = h[0];\n    v.g = h[1];\n    v.b = h[2];\n}\nfunction $b79961ef84658051$export$a197af1c58e6260c(v) {\n    if (!v) return;\n    const a = $b79961ef84658051$export$b5ba70b240f8f7f(v);\n    const h = a[0];\n    const s = $b79961ef84658051$export$aa35ef1f24408ab9(a[1]);\n    const l = $b79961ef84658051$export$aa35ef1f24408ab9(a[2]);\n    return v.a < 255 ? `hsla(${h}, ${s}%, ${l}%, ${$b79961ef84658051$export$dbf961a8d278dbef(v.a)})` : `hsl(${h}, ${s}%, ${l}%)`;\n}\nconst $b79961ef84658051$var$map = {\n    x: \"dark\",\n    Z: \"light\",\n    Y: \"re\",\n    X: \"blu\",\n    W: \"gr\",\n    V: \"medium\",\n    U: \"slate\",\n    A: \"ee\",\n    T: \"ol\",\n    S: \"or\",\n    B: \"ra\",\n    C: \"lateg\",\n    D: \"ights\",\n    R: \"in\",\n    Q: \"turquois\",\n    E: \"hi\",\n    P: \"ro\",\n    O: \"al\",\n    N: \"le\",\n    M: \"de\",\n    L: \"yello\",\n    F: \"en\",\n    K: \"ch\",\n    G: \"arks\",\n    H: \"ea\",\n    I: \"ightg\",\n    J: \"wh\"\n};\nconst $b79961ef84658051$var$names$1 = {\n    OiceXe: \"f0f8ff\",\n    antiquewEte: \"faebd7\",\n    aqua: \"ffff\",\n    aquamarRe: \"7fffd4\",\n    azuY: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"0\",\n    blanKedOmond: \"ffebcd\",\n    Xe: \"ff\",\n    XeviTet: \"8a2be2\",\n    bPwn: \"a52a2a\",\n    burlywood: \"deb887\",\n    caMtXe: \"5f9ea0\",\n    KartYuse: \"7fff00\",\n    KocTate: \"d2691e\",\n    cSO: \"ff7f50\",\n    cSnflowerXe: \"6495ed\",\n    cSnsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"ffff\",\n    xXe: \"8b\",\n    xcyan: \"8b8b\",\n    xgTMnPd: \"b8860b\",\n    xWay: \"a9a9a9\",\n    xgYF: \"6400\",\n    xgYy: \"a9a9a9\",\n    xkhaki: \"bdb76b\",\n    xmagFta: \"8b008b\",\n    xTivegYF: \"556b2f\",\n    xSange: \"ff8c00\",\n    xScEd: \"9932cc\",\n    xYd: \"8b0000\",\n    xsOmon: \"e9967a\",\n    xsHgYF: \"8fbc8f\",\n    xUXe: \"483d8b\",\n    xUWay: \"2f4f4f\",\n    xUgYy: \"2f4f4f\",\n    xQe: \"ced1\",\n    xviTet: \"9400d3\",\n    dAppRk: \"ff1493\",\n    dApskyXe: \"bfff\",\n    dimWay: \"696969\",\n    dimgYy: \"696969\",\n    dodgerXe: \"1e90ff\",\n    fiYbrick: \"b22222\",\n    flSOwEte: \"fffaf0\",\n    foYstWAn: \"228b22\",\n    fuKsia: \"ff00ff\",\n    gaRsbSo: \"dcdcdc\",\n    ghostwEte: \"f8f8ff\",\n    gTd: \"ffd700\",\n    gTMnPd: \"daa520\",\n    Way: \"808080\",\n    gYF: \"8000\",\n    gYFLw: \"adff2f\",\n    gYy: \"808080\",\n    honeyMw: \"f0fff0\",\n    hotpRk: \"ff69b4\",\n    RdianYd: \"cd5c5c\",\n    Rdigo: \"4b0082\",\n    ivSy: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavFMr: \"e6e6fa\",\n    lavFMrXsh: \"fff0f5\",\n    lawngYF: \"7cfc00\",\n    NmoncEffon: \"fffacd\",\n    ZXe: \"add8e6\",\n    ZcSO: \"f08080\",\n    Zcyan: \"e0ffff\",\n    ZgTMnPdLw: \"fafad2\",\n    ZWay: \"d3d3d3\",\n    ZgYF: \"90ee90\",\n    ZgYy: \"d3d3d3\",\n    ZpRk: \"ffb6c1\",\n    ZsOmon: \"ffa07a\",\n    ZsHgYF: \"20b2aa\",\n    ZskyXe: \"87cefa\",\n    ZUWay: \"778899\",\n    ZUgYy: \"778899\",\n    ZstAlXe: \"b0c4de\",\n    ZLw: \"ffffe0\",\n    lime: \"ff00\",\n    limegYF: \"32cd32\",\n    lRF: \"faf0e6\",\n    magFta: \"ff00ff\",\n    maPon: \"800000\",\n    VaquamarRe: \"66cdaa\",\n    VXe: \"cd\",\n    VScEd: \"ba55d3\",\n    VpurpN: \"9370db\",\n    VsHgYF: \"3cb371\",\n    VUXe: \"7b68ee\",\n    VsprRggYF: \"fa9a\",\n    VQe: \"48d1cc\",\n    VviTetYd: \"c71585\",\n    midnightXe: \"191970\",\n    mRtcYam: \"f5fffa\",\n    mistyPse: \"ffe4e1\",\n    moccasR: \"ffe4b5\",\n    navajowEte: \"ffdead\",\n    navy: \"80\",\n    Tdlace: \"fdf5e6\",\n    Tive: \"808000\",\n    TivedBb: \"6b8e23\",\n    Sange: \"ffa500\",\n    SangeYd: \"ff4500\",\n    ScEd: \"da70d6\",\n    pOegTMnPd: \"eee8aa\",\n    pOegYF: \"98fb98\",\n    pOeQe: \"afeeee\",\n    pOeviTetYd: \"db7093\",\n    papayawEp: \"ffefd5\",\n    pHKpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pRk: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powMrXe: \"b0e0e6\",\n    purpN: \"800080\",\n    YbeccapurpN: \"663399\",\n    Yd: \"ff0000\",\n    Psybrown: \"bc8f8f\",\n    PyOXe: \"4169e1\",\n    saddNbPwn: \"8b4513\",\n    sOmon: \"fa8072\",\n    sandybPwn: \"f4a460\",\n    sHgYF: \"2e8b57\",\n    sHshell: \"fff5ee\",\n    siFna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyXe: \"87ceeb\",\n    UXe: \"6a5acd\",\n    UWay: \"708090\",\n    UgYy: \"708090\",\n    snow: \"fffafa\",\n    sprRggYF: \"ff7f\",\n    stAlXe: \"4682b4\",\n    tan: \"d2b48c\",\n    teO: \"8080\",\n    tEstN: \"d8bfd8\",\n    tomato: \"ff6347\",\n    Qe: \"40e0d0\",\n    viTet: \"ee82ee\",\n    JHt: \"f5deb3\",\n    wEte: \"ffffff\",\n    wEtesmoke: \"f5f5f5\",\n    Lw: \"ffff00\",\n    LwgYF: \"9acd32\"\n};\nfunction $b79961ef84658051$var$unpack() {\n    const unpacked = {};\n    const keys = Object.keys($b79961ef84658051$var$names$1);\n    const tkeys = Object.keys($b79961ef84658051$var$map);\n    let i, j, k, ok, nk;\n    for(i = 0; i < keys.length; i++){\n        ok = nk = keys[i];\n        for(j = 0; j < tkeys.length; j++){\n            k = tkeys[j];\n            nk = nk.replace(k, $b79961ef84658051$var$map[k]);\n        }\n        k = parseInt($b79961ef84658051$var$names$1[ok], 16);\n        unpacked[nk] = [\n            k >> 16 & 0xFF,\n            k >> 8 & 0xFF,\n            k & 0xFF\n        ];\n    }\n    return unpacked;\n}\nlet $b79961ef84658051$var$names;\nfunction $b79961ef84658051$export$b2f06b640faad956(str) {\n    if (!$b79961ef84658051$var$names) {\n        $b79961ef84658051$var$names = $b79961ef84658051$var$unpack();\n        $b79961ef84658051$var$names.transparent = [\n            0,\n            0,\n            0,\n            0\n        ];\n    }\n    const a = $b79961ef84658051$var$names[str.toLowerCase()];\n    return a && {\n        r: a[0],\n        g: a[1],\n        b: a[2],\n        a: a.length === 4 ? a[3] : 255\n    };\n}\nconst $b79961ef84658051$var$RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction $b79961ef84658051$export$91aedb20f296e541(str) {\n    const m = $b79961ef84658051$var$RGB_RE.exec(str);\n    let a = 255;\n    let r, g, b;\n    if (!m) return;\n    if (m[7] !== r) {\n        const v = +m[7];\n        a = m[8] ? $b79961ef84658051$export$bcc6e673dfa14d36(v) : $b79961ef84658051$export$837ba5c449269406(v * 255, 0, 255);\n    }\n    r = +m[1];\n    g = +m[3];\n    b = +m[5];\n    r = 255 & (m[2] ? $b79961ef84658051$export$bcc6e673dfa14d36(r) : $b79961ef84658051$export$837ba5c449269406(r, 0, 255));\n    g = 255 & (m[4] ? $b79961ef84658051$export$bcc6e673dfa14d36(g) : $b79961ef84658051$export$837ba5c449269406(g, 0, 255));\n    b = 255 & (m[6] ? $b79961ef84658051$export$bcc6e673dfa14d36(b) : $b79961ef84658051$export$837ba5c449269406(b, 0, 255));\n    return {\n        r: r,\n        g: g,\n        b: b,\n        a: a\n    };\n}\nfunction $b79961ef84658051$export$9595423f22cf925a(v) {\n    return v && (v.a < 255 ? `rgba(${v.r}, ${v.g}, ${v.b}, ${$b79961ef84658051$export$dbf961a8d278dbef(v.a)})` : `rgb(${v.r}, ${v.g}, ${v.b})`);\n}\nconst $b79961ef84658051$var$to = (v)=>v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst $b79961ef84658051$var$from = (v)=>v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction $b79961ef84658051$var$interpolate(rgb1, rgb2, t) {\n    const r = $b79961ef84658051$var$from($b79961ef84658051$export$dbf961a8d278dbef(rgb1.r));\n    const g = $b79961ef84658051$var$from($b79961ef84658051$export$dbf961a8d278dbef(rgb1.g));\n    const b = $b79961ef84658051$var$from($b79961ef84658051$export$dbf961a8d278dbef(rgb1.b));\n    return {\n        r: $b79961ef84658051$export$ed9bd8dcaeba14f6($b79961ef84658051$var$to(r + t * ($b79961ef84658051$var$from($b79961ef84658051$export$dbf961a8d278dbef(rgb2.r)) - r))),\n        g: $b79961ef84658051$export$ed9bd8dcaeba14f6($b79961ef84658051$var$to(g + t * ($b79961ef84658051$var$from($b79961ef84658051$export$dbf961a8d278dbef(rgb2.g)) - g))),\n        b: $b79961ef84658051$export$ed9bd8dcaeba14f6($b79961ef84658051$var$to(b + t * ($b79961ef84658051$var$from($b79961ef84658051$export$dbf961a8d278dbef(rgb2.b)) - b))),\n        a: rgb1.a + t * (rgb2.a - rgb1.a)\n    };\n}\nfunction $b79961ef84658051$var$modHSL(v, i, ratio) {\n    if (v) {\n        let tmp = $b79961ef84658051$export$b5ba70b240f8f7f(v);\n        tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n        tmp = $b79961ef84658051$export$4c15bd42559b811d(tmp);\n        v.r = tmp[0];\n        v.g = tmp[1];\n        v.b = tmp[2];\n    }\n}\nfunction $b79961ef84658051$var$clone(v, proto) {\n    return v ? Object.assign(proto || {}, v) : v;\n}\nfunction $b79961ef84658051$var$fromObject(input) {\n    var v = {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 255\n    };\n    if (Array.isArray(input)) {\n        if (input.length >= 3) {\n            v = {\n                r: input[0],\n                g: input[1],\n                b: input[2],\n                a: 255\n            };\n            if (input.length > 3) v.a = $b79961ef84658051$export$ed9bd8dcaeba14f6(input[3]);\n        }\n    } else {\n        v = $b79961ef84658051$var$clone(input, {\n            r: 0,\n            g: 0,\n            b: 0,\n            a: 1\n        });\n        v.a = $b79961ef84658051$export$ed9bd8dcaeba14f6(v.a);\n    }\n    return v;\n}\nfunction $b79961ef84658051$var$functionParse(str) {\n    if (str.charAt(0) === \"r\") return $b79961ef84658051$export$91aedb20f296e541(str);\n    return $b79961ef84658051$export$5e91288c399be4f9(str);\n}\nclass $b79961ef84658051$export$892596cec99bc70e {\n    constructor(input){\n        if (input instanceof $b79961ef84658051$export$892596cec99bc70e) return input;\n        const type = typeof input;\n        let v;\n        if (type === \"object\") v = $b79961ef84658051$var$fromObject(input);\n        else if (type === \"string\") v = $b79961ef84658051$export$625a38b961e8b5e9(input) || $b79961ef84658051$export$b2f06b640faad956(input) || $b79961ef84658051$var$functionParse(input);\n        this._rgb = v;\n        this._valid = !!v;\n    }\n    get valid() {\n        return this._valid;\n    }\n    get rgb() {\n        var v = $b79961ef84658051$var$clone(this._rgb);\n        if (v) v.a = $b79961ef84658051$export$dbf961a8d278dbef(v.a);\n        return v;\n    }\n    set rgb(obj) {\n        this._rgb = $b79961ef84658051$var$fromObject(obj);\n    }\n    rgbString() {\n        return this._valid ? $b79961ef84658051$export$9595423f22cf925a(this._rgb) : undefined;\n    }\n    hexString() {\n        return this._valid ? $b79961ef84658051$export$1b06654353ef9f67(this._rgb) : undefined;\n    }\n    hslString() {\n        return this._valid ? $b79961ef84658051$export$a197af1c58e6260c(this._rgb) : undefined;\n    }\n    mix(color, weight) {\n        if (color) {\n            const c1 = this.rgb;\n            const c2 = color.rgb;\n            let w2;\n            const p = weight === w2 ? 0.5 : weight;\n            const w = 2 * p - 1;\n            const a = c1.a - c2.a;\n            const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n            w2 = 1 - w1;\n            c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n            c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n            c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n            c1.a = p * c1.a + (1 - p) * c2.a;\n            this.rgb = c1;\n        }\n        return this;\n    }\n    interpolate(color, t) {\n        if (color) this._rgb = $b79961ef84658051$var$interpolate(this._rgb, color._rgb, t);\n        return this;\n    }\n    clone() {\n        return new $b79961ef84658051$export$892596cec99bc70e(this.rgb);\n    }\n    alpha(a) {\n        this._rgb.a = $b79961ef84658051$export$ed9bd8dcaeba14f6(a);\n        return this;\n    }\n    clearer(ratio) {\n        const rgb = this._rgb;\n        rgb.a *= 1 - ratio;\n        return this;\n    }\n    greyscale() {\n        const rgb = this._rgb;\n        const val = $b79961ef84658051$export$2077e0241d6afd3c(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n        rgb.r = rgb.g = rgb.b = val;\n        return this;\n    }\n    opaquer(ratio) {\n        const rgb = this._rgb;\n        rgb.a *= 1 + ratio;\n        return this;\n    }\n    negate() {\n        const v = this._rgb;\n        v.r = 255 - v.r;\n        v.g = 255 - v.g;\n        v.b = 255 - v.b;\n        return this;\n    }\n    lighten(ratio) {\n        $b79961ef84658051$var$modHSL(this._rgb, 2, ratio);\n        return this;\n    }\n    darken(ratio) {\n        $b79961ef84658051$var$modHSL(this._rgb, 2, -ratio);\n        return this;\n    }\n    saturate(ratio) {\n        $b79961ef84658051$var$modHSL(this._rgb, 1, ratio);\n        return this;\n    }\n    desaturate(ratio) {\n        $b79961ef84658051$var$modHSL(this._rgb, 1, -ratio);\n        return this;\n    }\n    rotate(deg) {\n        $b79961ef84658051$export$bb628a54ab399bc9(this._rgb, deg);\n        return this;\n    }\n}\nfunction $b79961ef84658051$export$2e2bcd8739ae039(input) {\n    return new $b79961ef84658051$export$892596cec99bc70e(input);\n}\n\n});\n\n\n\n\nparcelRequire.register(\"h5k33\", function(module, exports) {\n\nvar $b5NLL = parcelRequire(\"b5NLL\");\n\nvar $3JNfW = parcelRequire(\"3JNfW\");\nconst $c7027472f2342e55$var$skippedModels = [\n    // To be honest, I don't really feel like keyword belongs in color convert, but eh.\n    \"keyword\",\n    // Gray conflicts with some method names, and has its own method defined.\n    \"gray\",\n    // Shouldn't really be in color-convert either...\n    \"hex\"\n];\nconst $c7027472f2342e55$var$hashedModelKeys = {};\nfor (const model of Object.keys($3JNfW))$c7027472f2342e55$var$hashedModelKeys[[\n    ...$3JNfW[model].labels\n].sort().join(\"\")] = model;\nconst $c7027472f2342e55$var$limiters = {};\nfunction $c7027472f2342e55$var$Color(object, model) {\n    if (!(this instanceof $c7027472f2342e55$var$Color)) return new $c7027472f2342e55$var$Color(object, model);\n    if (model && model in $c7027472f2342e55$var$skippedModels) model = null;\n    if (model && !(model in $3JNfW)) throw new Error(\"Unknown model: \" + model);\n    let i;\n    let channels;\n    if (object == null) {\n        this.model = \"rgb\";\n        this.color = [\n            0,\n            0,\n            0\n        ];\n        this.valpha = 1;\n    } else if (object instanceof $c7027472f2342e55$var$Color) {\n        this.model = object.model;\n        this.color = [\n            ...object.color\n        ];\n        this.valpha = object.valpha;\n    } else if (typeof object === \"string\") {\n        const result = $b5NLL.get(object);\n        if (result === null) throw new Error(\"Unable to parse color from string: \" + object);\n        this.model = result.model;\n        channels = $3JNfW[this.model].channels;\n        this.color = result.value.slice(0, channels);\n        this.valpha = typeof result.value[channels] === \"number\" ? result.value[channels] : 1;\n    } else if (object.length > 0) {\n        this.model = model || \"rgb\";\n        channels = $3JNfW[this.model].channels;\n        const newArray = Array.prototype.slice.call(object, 0, channels);\n        this.color = $c7027472f2342e55$var$zeroArray(newArray, channels);\n        this.valpha = typeof object[channels] === \"number\" ? object[channels] : 1;\n    } else if (typeof object === \"number\") {\n        // This is always RGB - can be converted later on.\n        this.model = \"rgb\";\n        this.color = [\n            object >> 16 & 0xFF,\n            object >> 8 & 0xFF,\n            object & 0xFF\n        ];\n        this.valpha = 1;\n    } else {\n        this.valpha = 1;\n        const keys = Object.keys(object);\n        if (\"alpha\" in object) {\n            keys.splice(keys.indexOf(\"alpha\"), 1);\n            this.valpha = typeof object.alpha === \"number\" ? object.alpha : 0;\n        }\n        const hashedKeys = keys.sort().join(\"\");\n        if (!(hashedKeys in $c7027472f2342e55$var$hashedModelKeys)) throw new Error(\"Unable to parse color from object: \" + JSON.stringify(object));\n        this.model = $c7027472f2342e55$var$hashedModelKeys[hashedKeys];\n        const { labels: labels } = $3JNfW[this.model];\n        const color = [];\n        for(i = 0; i < labels.length; i++)color.push(object[labels[i]]);\n        this.color = $c7027472f2342e55$var$zeroArray(color);\n    }\n    // Perform limitations (clamping, etc.)\n    if ($c7027472f2342e55$var$limiters[this.model]) {\n        channels = $3JNfW[this.model].channels;\n        for(i = 0; i < channels; i++){\n            const limit = $c7027472f2342e55$var$limiters[this.model][i];\n            if (limit) this.color[i] = limit(this.color[i]);\n        }\n    }\n    this.valpha = Math.max(0, Math.min(1, this.valpha));\n    if (Object.freeze) Object.freeze(this);\n}\n$c7027472f2342e55$var$Color.prototype = {\n    toString () {\n        return this.string();\n    },\n    toJSON () {\n        return this[this.model]();\n    },\n    string (places) {\n        let self = this.model in $b5NLL.to ? this : this.rgb();\n        self = self.round(typeof places === \"number\" ? places : 1);\n        const args = self.valpha === 1 ? self.color : [\n            ...self.color,\n            this.valpha\n        ];\n        return $b5NLL.to[self.model](args);\n    },\n    percentString (places) {\n        const self = this.rgb().round(typeof places === \"number\" ? places : 1);\n        const args = self.valpha === 1 ? self.color : [\n            ...self.color,\n            this.valpha\n        ];\n        return $b5NLL.to.rgb.percent(args);\n    },\n    array () {\n        return this.valpha === 1 ? [\n            ...this.color\n        ] : [\n            ...this.color,\n            this.valpha\n        ];\n    },\n    object () {\n        const result = {};\n        const { channels: channels } = $3JNfW[this.model];\n        const { labels: labels } = $3JNfW[this.model];\n        for(let i = 0; i < channels; i++)result[labels[i]] = this.color[i];\n        if (this.valpha !== 1) result.alpha = this.valpha;\n        return result;\n    },\n    unitArray () {\n        const rgb = this.rgb().color;\n        rgb[0] /= 255;\n        rgb[1] /= 255;\n        rgb[2] /= 255;\n        if (this.valpha !== 1) rgb.push(this.valpha);\n        return rgb;\n    },\n    unitObject () {\n        const rgb = this.rgb().object();\n        rgb.r /= 255;\n        rgb.g /= 255;\n        rgb.b /= 255;\n        if (this.valpha !== 1) rgb.alpha = this.valpha;\n        return rgb;\n    },\n    round (places) {\n        places = Math.max(places || 0, 0);\n        return new $c7027472f2342e55$var$Color([\n            ...this.color.map($c7027472f2342e55$var$roundToPlace(places)),\n            this.valpha\n        ], this.model);\n    },\n    alpha (value) {\n        if (value !== undefined) return new $c7027472f2342e55$var$Color([\n            ...this.color,\n            Math.max(0, Math.min(1, value))\n        ], this.model);\n        return this.valpha;\n    },\n    // Rgb\n    red: $c7027472f2342e55$var$getset(\"rgb\", 0, $c7027472f2342e55$var$maxfn(255)),\n    green: $c7027472f2342e55$var$getset(\"rgb\", 1, $c7027472f2342e55$var$maxfn(255)),\n    blue: $c7027472f2342e55$var$getset(\"rgb\", 2, $c7027472f2342e55$var$maxfn(255)),\n    hue: $c7027472f2342e55$var$getset([\n        \"hsl\",\n        \"hsv\",\n        \"hsl\",\n        \"hwb\",\n        \"hcg\"\n    ], 0, (value)=>(value % 360 + 360) % 360),\n    saturationl: $c7027472f2342e55$var$getset(\"hsl\", 1, $c7027472f2342e55$var$maxfn(100)),\n    lightness: $c7027472f2342e55$var$getset(\"hsl\", 2, $c7027472f2342e55$var$maxfn(100)),\n    saturationv: $c7027472f2342e55$var$getset(\"hsv\", 1, $c7027472f2342e55$var$maxfn(100)),\n    value: $c7027472f2342e55$var$getset(\"hsv\", 2, $c7027472f2342e55$var$maxfn(100)),\n    chroma: $c7027472f2342e55$var$getset(\"hcg\", 1, $c7027472f2342e55$var$maxfn(100)),\n    gray: $c7027472f2342e55$var$getset(\"hcg\", 2, $c7027472f2342e55$var$maxfn(100)),\n    white: $c7027472f2342e55$var$getset(\"hwb\", 1, $c7027472f2342e55$var$maxfn(100)),\n    wblack: $c7027472f2342e55$var$getset(\"hwb\", 2, $c7027472f2342e55$var$maxfn(100)),\n    cyan: $c7027472f2342e55$var$getset(\"cmyk\", 0, $c7027472f2342e55$var$maxfn(100)),\n    magenta: $c7027472f2342e55$var$getset(\"cmyk\", 1, $c7027472f2342e55$var$maxfn(100)),\n    yellow: $c7027472f2342e55$var$getset(\"cmyk\", 2, $c7027472f2342e55$var$maxfn(100)),\n    black: $c7027472f2342e55$var$getset(\"cmyk\", 3, $c7027472f2342e55$var$maxfn(100)),\n    x: $c7027472f2342e55$var$getset(\"xyz\", 0, $c7027472f2342e55$var$maxfn(95.047)),\n    y: $c7027472f2342e55$var$getset(\"xyz\", 1, $c7027472f2342e55$var$maxfn(100)),\n    z: $c7027472f2342e55$var$getset(\"xyz\", 2, $c7027472f2342e55$var$maxfn(108.833)),\n    l: $c7027472f2342e55$var$getset(\"lab\", 0, $c7027472f2342e55$var$maxfn(100)),\n    a: $c7027472f2342e55$var$getset(\"lab\", 1),\n    b: $c7027472f2342e55$var$getset(\"lab\", 2),\n    keyword (value) {\n        if (value !== undefined) return new $c7027472f2342e55$var$Color(value);\n        return $3JNfW[this.model].keyword(this.color);\n    },\n    hex (value) {\n        if (value !== undefined) return new $c7027472f2342e55$var$Color(value);\n        return $b5NLL.to.hex(this.rgb().round().color);\n    },\n    hexa (value) {\n        if (value !== undefined) return new $c7027472f2342e55$var$Color(value);\n        const rgbArray = this.rgb().round().color;\n        let alphaHex = Math.round(this.valpha * 255).toString(16).toUpperCase();\n        if (alphaHex.length === 1) alphaHex = \"0\" + alphaHex;\n        return $b5NLL.to.hex(rgbArray) + alphaHex;\n    },\n    rgbNumber () {\n        const rgb = this.rgb().color;\n        return (rgb[0] & 0xFF) << 16 | (rgb[1] & 0xFF) << 8 | rgb[2] & 0xFF;\n    },\n    luminosity () {\n        // http://www.w3.org/TR/WCAG20/#relativeluminancedef\n        const rgb = this.rgb().color;\n        const lum = [];\n        for (const [i, element] of rgb.entries()){\n            const chan = element / 255;\n            lum[i] = chan <= 0.04045 ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;\n        }\n        return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n    },\n    contrast (color2) {\n        // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n        const lum1 = this.luminosity();\n        const lum2 = color2.luminosity();\n        if (lum1 > lum2) return (lum1 + 0.05) / (lum2 + 0.05);\n        return (lum2 + 0.05) / (lum1 + 0.05);\n    },\n    level (color2) {\n        // https://www.w3.org/TR/WCAG/#contrast-enhanced\n        const contrastRatio = this.contrast(color2);\n        if (contrastRatio >= 7) return \"AAA\";\n        return contrastRatio >= 4.5 ? \"AA\" : \"\";\n    },\n    isDark () {\n        // YIQ equation from http://24ways.org/2010/calculating-color-contrast\n        const rgb = this.rgb().color;\n        const yiq = (rgb[0] * 2126 + rgb[1] * 7152 + rgb[2] * 722) / 10000;\n        return yiq < 128;\n    },\n    isLight () {\n        return !this.isDark();\n    },\n    negate () {\n        const rgb = this.rgb();\n        for(let i = 0; i < 3; i++)rgb.color[i] = 255 - rgb.color[i];\n        return rgb;\n    },\n    lighten (ratio) {\n        const hsl = this.hsl();\n        hsl.color[2] += hsl.color[2] * ratio;\n        return hsl;\n    },\n    darken (ratio) {\n        const hsl = this.hsl();\n        hsl.color[2] -= hsl.color[2] * ratio;\n        return hsl;\n    },\n    saturate (ratio) {\n        const hsl = this.hsl();\n        hsl.color[1] += hsl.color[1] * ratio;\n        return hsl;\n    },\n    desaturate (ratio) {\n        const hsl = this.hsl();\n        hsl.color[1] -= hsl.color[1] * ratio;\n        return hsl;\n    },\n    whiten (ratio) {\n        const hwb = this.hwb();\n        hwb.color[1] += hwb.color[1] * ratio;\n        return hwb;\n    },\n    blacken (ratio) {\n        const hwb = this.hwb();\n        hwb.color[2] += hwb.color[2] * ratio;\n        return hwb;\n    },\n    grayscale () {\n        // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n        const rgb = this.rgb().color;\n        const value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n        return $c7027472f2342e55$var$Color.rgb(value, value, value);\n    },\n    fade (ratio) {\n        return this.alpha(this.valpha - this.valpha * ratio);\n    },\n    opaquer (ratio) {\n        return this.alpha(this.valpha + this.valpha * ratio);\n    },\n    rotate (degrees) {\n        const hsl = this.hsl();\n        let hue = hsl.color[0];\n        hue = (hue + degrees) % 360;\n        hue = hue < 0 ? 360 + hue : hue;\n        hsl.color[0] = hue;\n        return hsl;\n    },\n    mix (mixinColor, weight) {\n        // Ported from sass implementation in C\n        // https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n        if (!mixinColor || !mixinColor.rgb) throw new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\n        const color1 = mixinColor.rgb();\n        const color2 = this.rgb();\n        const p = weight === undefined ? 0.5 : weight;\n        const w = 2 * p - 1;\n        const a = color1.alpha() - color2.alpha();\n        const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;\n        const w2 = 1 - w1;\n        return $c7027472f2342e55$var$Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));\n    }\n};\n// Model conversion methods and static constructors\nfor (const model of Object.keys($3JNfW)){\n    if ($c7027472f2342e55$var$skippedModels.includes(model)) continue;\n    const { channels: channels } = $3JNfW[model];\n    // Conversion methods\n    $c7027472f2342e55$var$Color.prototype[model] = function(...args) {\n        if (this.model === model) return new $c7027472f2342e55$var$Color(this);\n        if (args.length > 0) return new $c7027472f2342e55$var$Color(args, model);\n        return new $c7027472f2342e55$var$Color([\n            ...$c7027472f2342e55$var$assertArray($3JNfW[this.model][model].raw(this.color)),\n            this.valpha\n        ], model);\n    };\n    // 'static' construction methods\n    $c7027472f2342e55$var$Color[model] = function(...args) {\n        let color = args[0];\n        if (typeof color === \"number\") color = $c7027472f2342e55$var$zeroArray(args, channels);\n        return new $c7027472f2342e55$var$Color(color, model);\n    };\n}\nfunction $c7027472f2342e55$var$roundTo(number, places) {\n    return Number(number.toFixed(places));\n}\nfunction $c7027472f2342e55$var$roundToPlace(places) {\n    return function(number) {\n        return $c7027472f2342e55$var$roundTo(number, places);\n    };\n}\nfunction $c7027472f2342e55$var$getset(model, channel, modifier) {\n    model = Array.isArray(model) ? model : [\n        model\n    ];\n    for (const m of model)($c7027472f2342e55$var$limiters[m] || ($c7027472f2342e55$var$limiters[m] = []))[channel] = modifier;\n    model = model[0];\n    return function(value) {\n        let result;\n        if (value !== undefined) {\n            if (modifier) value = modifier(value);\n            result = this[model]();\n            result.color[channel] = value;\n            return result;\n        }\n        result = this[model]().color[channel];\n        if (modifier) result = modifier(result);\n        return result;\n    };\n}\nfunction $c7027472f2342e55$var$maxfn(max) {\n    return function(v) {\n        return Math.max(0, Math.min(max, v));\n    };\n}\nfunction $c7027472f2342e55$var$assertArray(value) {\n    return Array.isArray(value) ? value : [\n        value\n    ];\n}\nfunction $c7027472f2342e55$var$zeroArray(array, length) {\n    for(let i = 0; i < length; i++)if (typeof array[i] !== \"number\") array[i] = 0;\n    return array;\n}\nmodule.exports = $c7027472f2342e55$var$Color;\n\n});\nparcelRequire.register(\"b5NLL\", function(module, exports) {\n/* MIT license */ \nvar $iXgRS = parcelRequire(\"iXgRS\");\n\nvar $fiNA2 = parcelRequire(\"fiNA2\");\nvar $8136c47c546fcb63$var$hasOwnProperty = Object.hasOwnProperty;\nvar $8136c47c546fcb63$var$reverseNames = Object.create(null);\n// create a list of reverse color names\nfor(var $8136c47c546fcb63$var$name in $iXgRS)if ($8136c47c546fcb63$var$hasOwnProperty.call($iXgRS, $8136c47c546fcb63$var$name)) $8136c47c546fcb63$var$reverseNames[$iXgRS[$8136c47c546fcb63$var$name]] = $8136c47c546fcb63$var$name;\nvar $8136c47c546fcb63$var$cs = module.exports = {\n    to: {},\n    get: {}\n};\n$8136c47c546fcb63$var$cs.get = function(string) {\n    var prefix = string.substring(0, 3).toLowerCase();\n    var val;\n    var model;\n    switch(prefix){\n        case \"hsl\":\n            val = $8136c47c546fcb63$var$cs.get.hsl(string);\n            model = \"hsl\";\n            break;\n        case \"hwb\":\n            val = $8136c47c546fcb63$var$cs.get.hwb(string);\n            model = \"hwb\";\n            break;\n        default:\n            val = $8136c47c546fcb63$var$cs.get.rgb(string);\n            model = \"rgb\";\n            break;\n    }\n    if (!val) return null;\n    return {\n        model: model,\n        value: val\n    };\n};\n$8136c47c546fcb63$var$cs.get.rgb = function(string) {\n    if (!string) return null;\n    var abbr = /^#([a-f0-9]{3,4})$/i;\n    var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n    var rgba = /^rgba?\\(\\s*([+-]?\\d+)(?=[\\s,])\\s*(?:,\\s*)?([+-]?\\d+)(?=[\\s,])\\s*(?:,\\s*)?([+-]?\\d+)\\s*(?:[,|\\/]\\s*([+-]?[\\d\\.]+)(%?)\\s*)?\\)$/;\n    var per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,?\\s*([+-]?[\\d\\.]+)\\%\\s*,?\\s*([+-]?[\\d\\.]+)\\%\\s*(?:[,|\\/]\\s*([+-]?[\\d\\.]+)(%?)\\s*)?\\)$/;\n    var keyword = /^(\\w+)$/;\n    var rgb = [\n        0,\n        0,\n        0,\n        1\n    ];\n    var match;\n    var i;\n    var hexAlpha;\n    if (match = string.match(hex)) {\n        hexAlpha = match[2];\n        match = match[1];\n        for(i = 0; i < 3; i++){\n            // https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n            var i2 = i * 2;\n            rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n        }\n        if (hexAlpha) rgb[3] = parseInt(hexAlpha, 16) / 255;\n    } else if (match = string.match(abbr)) {\n        match = match[1];\n        hexAlpha = match[3];\n        for(i = 0; i < 3; i++)rgb[i] = parseInt(match[i] + match[i], 16);\n        if (hexAlpha) rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;\n    } else if (match = string.match(rgba)) {\n        for(i = 0; i < 3; i++)rgb[i] = parseInt(match[i + 1], 0);\n        if (match[4]) {\n            if (match[5]) rgb[3] = parseFloat(match[4]) * 0.01;\n            else rgb[3] = parseFloat(match[4]);\n        }\n    } else if (match = string.match(per)) {\n        for(i = 0; i < 3; i++)rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n        if (match[4]) {\n            if (match[5]) rgb[3] = parseFloat(match[4]) * 0.01;\n            else rgb[3] = parseFloat(match[4]);\n        }\n    } else if (match = string.match(keyword)) {\n        if (match[1] === \"transparent\") return [\n            0,\n            0,\n            0,\n            0\n        ];\n        if (!$8136c47c546fcb63$var$hasOwnProperty.call($iXgRS, match[1])) return null;\n        rgb = $iXgRS[match[1]];\n        rgb[3] = 1;\n        return rgb;\n    } else return null;\n    for(i = 0; i < 3; i++)rgb[i] = $8136c47c546fcb63$var$clamp(rgb[i], 0, 255);\n    rgb[3] = $8136c47c546fcb63$var$clamp(rgb[3], 0, 1);\n    return rgb;\n};\n$8136c47c546fcb63$var$cs.get.hsl = function(string) {\n    if (!string) return null;\n    var hsl = /^hsla?\\(\\s*([+-]?(?:\\d{0,3}\\.)?\\d+)(?:deg)?\\s*,?\\s*([+-]?[\\d\\.]+)%\\s*,?\\s*([+-]?[\\d\\.]+)%\\s*(?:[,|\\/]\\s*([+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\s*)?\\)$/;\n    var match = string.match(hsl);\n    if (match) {\n        var alpha = parseFloat(match[4]);\n        var h = (parseFloat(match[1]) % 360 + 360) % 360;\n        var s = $8136c47c546fcb63$var$clamp(parseFloat(match[2]), 0, 100);\n        var l = $8136c47c546fcb63$var$clamp(parseFloat(match[3]), 0, 100);\n        var a = $8136c47c546fcb63$var$clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n        return [\n            h,\n            s,\n            l,\n            a\n        ];\n    }\n    return null;\n};\n$8136c47c546fcb63$var$cs.get.hwb = function(string) {\n    if (!string) return null;\n    var hwb = /^hwb\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\s*)?\\)$/;\n    var match = string.match(hwb);\n    if (match) {\n        var alpha = parseFloat(match[4]);\n        var h = (parseFloat(match[1]) % 360 + 360) % 360;\n        var w = $8136c47c546fcb63$var$clamp(parseFloat(match[2]), 0, 100);\n        var b = $8136c47c546fcb63$var$clamp(parseFloat(match[3]), 0, 100);\n        var a = $8136c47c546fcb63$var$clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n        return [\n            h,\n            w,\n            b,\n            a\n        ];\n    }\n    return null;\n};\n$8136c47c546fcb63$var$cs.to.hex = function() {\n    var rgba = $fiNA2(arguments);\n    return \"#\" + $8136c47c546fcb63$var$hexDouble(rgba[0]) + $8136c47c546fcb63$var$hexDouble(rgba[1]) + $8136c47c546fcb63$var$hexDouble(rgba[2]) + (rgba[3] < 1 ? $8136c47c546fcb63$var$hexDouble(Math.round(rgba[3] * 255)) : \"\");\n};\n$8136c47c546fcb63$var$cs.to.rgb = function() {\n    var rgba = $fiNA2(arguments);\n    return rgba.length < 4 || rgba[3] === 1 ? \"rgb(\" + Math.round(rgba[0]) + \", \" + Math.round(rgba[1]) + \", \" + Math.round(rgba[2]) + \")\" : \"rgba(\" + Math.round(rgba[0]) + \", \" + Math.round(rgba[1]) + \", \" + Math.round(rgba[2]) + \", \" + rgba[3] + \")\";\n};\n$8136c47c546fcb63$var$cs.to.rgb.percent = function() {\n    var rgba = $fiNA2(arguments);\n    var r = Math.round(rgba[0] / 255 * 100);\n    var g = Math.round(rgba[1] / 255 * 100);\n    var b = Math.round(rgba[2] / 255 * 100);\n    return rgba.length < 4 || rgba[3] === 1 ? \"rgb(\" + r + \"%, \" + g + \"%, \" + b + \"%)\" : \"rgba(\" + r + \"%, \" + g + \"%, \" + b + \"%, \" + rgba[3] + \")\";\n};\n$8136c47c546fcb63$var$cs.to.hsl = function() {\n    var hsla = $fiNA2(arguments);\n    return hsla.length < 4 || hsla[3] === 1 ? \"hsl(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%)\" : \"hsla(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%, \" + hsla[3] + \")\";\n};\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\n$8136c47c546fcb63$var$cs.to.hwb = function() {\n    var hwba = $fiNA2(arguments);\n    var a = \"\";\n    if (hwba.length >= 4 && hwba[3] !== 1) a = \", \" + hwba[3];\n    return \"hwb(\" + hwba[0] + \", \" + hwba[1] + \"%, \" + hwba[2] + \"%\" + a + \")\";\n};\n$8136c47c546fcb63$var$cs.to.keyword = function(rgb) {\n    return $8136c47c546fcb63$var$reverseNames[rgb.slice(0, 3)];\n};\n// helpers\nfunction $8136c47c546fcb63$var$clamp(num, min, max) {\n    return Math.min(Math.max(min, num), max);\n}\nfunction $8136c47c546fcb63$var$hexDouble(num) {\n    var str = Math.round(num).toString(16).toUpperCase();\n    return str.length < 2 ? \"0\" + str : str;\n}\n\n});\nparcelRequire.register(\"iXgRS\", function(module, exports) {\n\"use strict\";\nmodule.exports = {\n    \"aliceblue\": [\n        240,\n        248,\n        255\n    ],\n    \"antiquewhite\": [\n        250,\n        235,\n        215\n    ],\n    \"aqua\": [\n        0,\n        255,\n        255\n    ],\n    \"aquamarine\": [\n        127,\n        255,\n        212\n    ],\n    \"azure\": [\n        240,\n        255,\n        255\n    ],\n    \"beige\": [\n        245,\n        245,\n        220\n    ],\n    \"bisque\": [\n        255,\n        228,\n        196\n    ],\n    \"black\": [\n        0,\n        0,\n        0\n    ],\n    \"blanchedalmond\": [\n        255,\n        235,\n        205\n    ],\n    \"blue\": [\n        0,\n        0,\n        255\n    ],\n    \"blueviolet\": [\n        138,\n        43,\n        226\n    ],\n    \"brown\": [\n        165,\n        42,\n        42\n    ],\n    \"burlywood\": [\n        222,\n        184,\n        135\n    ],\n    \"cadetblue\": [\n        95,\n        158,\n        160\n    ],\n    \"chartreuse\": [\n        127,\n        255,\n        0\n    ],\n    \"chocolate\": [\n        210,\n        105,\n        30\n    ],\n    \"coral\": [\n        255,\n        127,\n        80\n    ],\n    \"cornflowerblue\": [\n        100,\n        149,\n        237\n    ],\n    \"cornsilk\": [\n        255,\n        248,\n        220\n    ],\n    \"crimson\": [\n        220,\n        20,\n        60\n    ],\n    \"cyan\": [\n        0,\n        255,\n        255\n    ],\n    \"darkblue\": [\n        0,\n        0,\n        139\n    ],\n    \"darkcyan\": [\n        0,\n        139,\n        139\n    ],\n    \"darkgoldenrod\": [\n        184,\n        134,\n        11\n    ],\n    \"darkgray\": [\n        169,\n        169,\n        169\n    ],\n    \"darkgreen\": [\n        0,\n        100,\n        0\n    ],\n    \"darkgrey\": [\n        169,\n        169,\n        169\n    ],\n    \"darkkhaki\": [\n        189,\n        183,\n        107\n    ],\n    \"darkmagenta\": [\n        139,\n        0,\n        139\n    ],\n    \"darkolivegreen\": [\n        85,\n        107,\n        47\n    ],\n    \"darkorange\": [\n        255,\n        140,\n        0\n    ],\n    \"darkorchid\": [\n        153,\n        50,\n        204\n    ],\n    \"darkred\": [\n        139,\n        0,\n        0\n    ],\n    \"darksalmon\": [\n        233,\n        150,\n        122\n    ],\n    \"darkseagreen\": [\n        143,\n        188,\n        143\n    ],\n    \"darkslateblue\": [\n        72,\n        61,\n        139\n    ],\n    \"darkslategray\": [\n        47,\n        79,\n        79\n    ],\n    \"darkslategrey\": [\n        47,\n        79,\n        79\n    ],\n    \"darkturquoise\": [\n        0,\n        206,\n        209\n    ],\n    \"darkviolet\": [\n        148,\n        0,\n        211\n    ],\n    \"deeppink\": [\n        255,\n        20,\n        147\n    ],\n    \"deepskyblue\": [\n        0,\n        191,\n        255\n    ],\n    \"dimgray\": [\n        105,\n        105,\n        105\n    ],\n    \"dimgrey\": [\n        105,\n        105,\n        105\n    ],\n    \"dodgerblue\": [\n        30,\n        144,\n        255\n    ],\n    \"firebrick\": [\n        178,\n        34,\n        34\n    ],\n    \"floralwhite\": [\n        255,\n        250,\n        240\n    ],\n    \"forestgreen\": [\n        34,\n        139,\n        34\n    ],\n    \"fuchsia\": [\n        255,\n        0,\n        255\n    ],\n    \"gainsboro\": [\n        220,\n        220,\n        220\n    ],\n    \"ghostwhite\": [\n        248,\n        248,\n        255\n    ],\n    \"gold\": [\n        255,\n        215,\n        0\n    ],\n    \"goldenrod\": [\n        218,\n        165,\n        32\n    ],\n    \"gray\": [\n        128,\n        128,\n        128\n    ],\n    \"green\": [\n        0,\n        128,\n        0\n    ],\n    \"greenyellow\": [\n        173,\n        255,\n        47\n    ],\n    \"grey\": [\n        128,\n        128,\n        128\n    ],\n    \"honeydew\": [\n        240,\n        255,\n        240\n    ],\n    \"hotpink\": [\n        255,\n        105,\n        180\n    ],\n    \"indianred\": [\n        205,\n        92,\n        92\n    ],\n    \"indigo\": [\n        75,\n        0,\n        130\n    ],\n    \"ivory\": [\n        255,\n        255,\n        240\n    ],\n    \"khaki\": [\n        240,\n        230,\n        140\n    ],\n    \"lavender\": [\n        230,\n        230,\n        250\n    ],\n    \"lavenderblush\": [\n        255,\n        240,\n        245\n    ],\n    \"lawngreen\": [\n        124,\n        252,\n        0\n    ],\n    \"lemonchiffon\": [\n        255,\n        250,\n        205\n    ],\n    \"lightblue\": [\n        173,\n        216,\n        230\n    ],\n    \"lightcoral\": [\n        240,\n        128,\n        128\n    ],\n    \"lightcyan\": [\n        224,\n        255,\n        255\n    ],\n    \"lightgoldenrodyellow\": [\n        250,\n        250,\n        210\n    ],\n    \"lightgray\": [\n        211,\n        211,\n        211\n    ],\n    \"lightgreen\": [\n        144,\n        238,\n        144\n    ],\n    \"lightgrey\": [\n        211,\n        211,\n        211\n    ],\n    \"lightpink\": [\n        255,\n        182,\n        193\n    ],\n    \"lightsalmon\": [\n        255,\n        160,\n        122\n    ],\n    \"lightseagreen\": [\n        32,\n        178,\n        170\n    ],\n    \"lightskyblue\": [\n        135,\n        206,\n        250\n    ],\n    \"lightslategray\": [\n        119,\n        136,\n        153\n    ],\n    \"lightslategrey\": [\n        119,\n        136,\n        153\n    ],\n    \"lightsteelblue\": [\n        176,\n        196,\n        222\n    ],\n    \"lightyellow\": [\n        255,\n        255,\n        224\n    ],\n    \"lime\": [\n        0,\n        255,\n        0\n    ],\n    \"limegreen\": [\n        50,\n        205,\n        50\n    ],\n    \"linen\": [\n        250,\n        240,\n        230\n    ],\n    \"magenta\": [\n        255,\n        0,\n        255\n    ],\n    \"maroon\": [\n        128,\n        0,\n        0\n    ],\n    \"mediumaquamarine\": [\n        102,\n        205,\n        170\n    ],\n    \"mediumblue\": [\n        0,\n        0,\n        205\n    ],\n    \"mediumorchid\": [\n        186,\n        85,\n        211\n    ],\n    \"mediumpurple\": [\n        147,\n        112,\n        219\n    ],\n    \"mediumseagreen\": [\n        60,\n        179,\n        113\n    ],\n    \"mediumslateblue\": [\n        123,\n        104,\n        238\n    ],\n    \"mediumspringgreen\": [\n        0,\n        250,\n        154\n    ],\n    \"mediumturquoise\": [\n        72,\n        209,\n        204\n    ],\n    \"mediumvioletred\": [\n        199,\n        21,\n        133\n    ],\n    \"midnightblue\": [\n        25,\n        25,\n        112\n    ],\n    \"mintcream\": [\n        245,\n        255,\n        250\n    ],\n    \"mistyrose\": [\n        255,\n        228,\n        225\n    ],\n    \"moccasin\": [\n        255,\n        228,\n        181\n    ],\n    \"navajowhite\": [\n        255,\n        222,\n        173\n    ],\n    \"navy\": [\n        0,\n        0,\n        128\n    ],\n    \"oldlace\": [\n        253,\n        245,\n        230\n    ],\n    \"olive\": [\n        128,\n        128,\n        0\n    ],\n    \"olivedrab\": [\n        107,\n        142,\n        35\n    ],\n    \"orange\": [\n        255,\n        165,\n        0\n    ],\n    \"orangered\": [\n        255,\n        69,\n        0\n    ],\n    \"orchid\": [\n        218,\n        112,\n        214\n    ],\n    \"palegoldenrod\": [\n        238,\n        232,\n        170\n    ],\n    \"palegreen\": [\n        152,\n        251,\n        152\n    ],\n    \"paleturquoise\": [\n        175,\n        238,\n        238\n    ],\n    \"palevioletred\": [\n        219,\n        112,\n        147\n    ],\n    \"papayawhip\": [\n        255,\n        239,\n        213\n    ],\n    \"peachpuff\": [\n        255,\n        218,\n        185\n    ],\n    \"peru\": [\n        205,\n        133,\n        63\n    ],\n    \"pink\": [\n        255,\n        192,\n        203\n    ],\n    \"plum\": [\n        221,\n        160,\n        221\n    ],\n    \"powderblue\": [\n        176,\n        224,\n        230\n    ],\n    \"purple\": [\n        128,\n        0,\n        128\n    ],\n    \"rebeccapurple\": [\n        102,\n        51,\n        153\n    ],\n    \"red\": [\n        255,\n        0,\n        0\n    ],\n    \"rosybrown\": [\n        188,\n        143,\n        143\n    ],\n    \"royalblue\": [\n        65,\n        105,\n        225\n    ],\n    \"saddlebrown\": [\n        139,\n        69,\n        19\n    ],\n    \"salmon\": [\n        250,\n        128,\n        114\n    ],\n    \"sandybrown\": [\n        244,\n        164,\n        96\n    ],\n    \"seagreen\": [\n        46,\n        139,\n        87\n    ],\n    \"seashell\": [\n        255,\n        245,\n        238\n    ],\n    \"sienna\": [\n        160,\n        82,\n        45\n    ],\n    \"silver\": [\n        192,\n        192,\n        192\n    ],\n    \"skyblue\": [\n        135,\n        206,\n        235\n    ],\n    \"slateblue\": [\n        106,\n        90,\n        205\n    ],\n    \"slategray\": [\n        112,\n        128,\n        144\n    ],\n    \"slategrey\": [\n        112,\n        128,\n        144\n    ],\n    \"snow\": [\n        255,\n        250,\n        250\n    ],\n    \"springgreen\": [\n        0,\n        255,\n        127\n    ],\n    \"steelblue\": [\n        70,\n        130,\n        180\n    ],\n    \"tan\": [\n        210,\n        180,\n        140\n    ],\n    \"teal\": [\n        0,\n        128,\n        128\n    ],\n    \"thistle\": [\n        216,\n        191,\n        216\n    ],\n    \"tomato\": [\n        255,\n        99,\n        71\n    ],\n    \"turquoise\": [\n        64,\n        224,\n        208\n    ],\n    \"violet\": [\n        238,\n        130,\n        238\n    ],\n    \"wheat\": [\n        245,\n        222,\n        179\n    ],\n    \"white\": [\n        255,\n        255,\n        255\n    ],\n    \"whitesmoke\": [\n        245,\n        245,\n        245\n    ],\n    \"yellow\": [\n        255,\n        255,\n        0\n    ],\n    \"yellowgreen\": [\n        154,\n        205,\n        50\n    ]\n};\n\n});\n\nparcelRequire.register(\"fiNA2\", function(module, exports) {\n\"use strict\";\n\nvar $eRiD0 = parcelRequire(\"eRiD0\");\nvar $b23eff0c3c350e64$var$concat = Array.prototype.concat;\nvar $b23eff0c3c350e64$var$slice = Array.prototype.slice;\nvar $b23eff0c3c350e64$var$swizzle = module.exports = function swizzle(args) {\n    var results = [];\n    for(var i = 0, len = args.length; i < len; i++){\n        var arg = args[i];\n        if ($eRiD0(arg)) // http://jsperf.com/javascript-array-concat-vs-push/98\n        results = $b23eff0c3c350e64$var$concat.call(results, $b23eff0c3c350e64$var$slice.call(arg));\n        else results.push(arg);\n    }\n    return results;\n};\n$b23eff0c3c350e64$var$swizzle.wrap = function(fn) {\n    return function() {\n        return fn($b23eff0c3c350e64$var$swizzle(arguments));\n    };\n};\n\n});\nparcelRequire.register(\"eRiD0\", function(module, exports) {\nmodule.exports = function isArrayish(obj) {\n    if (!obj || typeof obj === \"string\") return false;\n    return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== \"String\");\n};\n\n});\n\n\n\nparcelRequire.register(\"3JNfW\", function(module, exports) {\n\nvar $34eeA = parcelRequire(\"34eeA\");\n\nvar $lIrBP = parcelRequire(\"lIrBP\");\nconst $2b8bc8511c5c8bbe$var$convert = {};\nconst $2b8bc8511c5c8bbe$var$models = Object.keys($34eeA);\nfunction $2b8bc8511c5c8bbe$var$wrapRaw(fn) {\n    const wrappedFn = function(...args) {\n        const arg0 = args[0];\n        if (arg0 === undefined || arg0 === null) return arg0;\n        if (arg0.length > 1) args = arg0;\n        return fn(args);\n    };\n    // Preserve .conversion property if there is one\n    if (\"conversion\" in fn) wrappedFn.conversion = fn.conversion;\n    return wrappedFn;\n}\nfunction $2b8bc8511c5c8bbe$var$wrapRounded(fn) {\n    const wrappedFn = function(...args) {\n        const arg0 = args[0];\n        if (arg0 === undefined || arg0 === null) return arg0;\n        if (arg0.length > 1) args = arg0;\n        const result = fn(args);\n        // We're assuming the result is an array here.\n        // see notice in conversions.js; don't use box types\n        // in conversion functions.\n        if (typeof result === \"object\") for(let len = result.length, i = 0; i < len; i++)result[i] = Math.round(result[i]);\n        return result;\n    };\n    // Preserve .conversion property if there is one\n    if (\"conversion\" in fn) wrappedFn.conversion = fn.conversion;\n    return wrappedFn;\n}\n$2b8bc8511c5c8bbe$var$models.forEach((fromModel)=>{\n    $2b8bc8511c5c8bbe$var$convert[fromModel] = {};\n    Object.defineProperty($2b8bc8511c5c8bbe$var$convert[fromModel], \"channels\", {\n        value: $34eeA[fromModel].channels\n    });\n    Object.defineProperty($2b8bc8511c5c8bbe$var$convert[fromModel], \"labels\", {\n        value: $34eeA[fromModel].labels\n    });\n    const routes = $lIrBP(fromModel);\n    const routeModels = Object.keys(routes);\n    routeModels.forEach((toModel)=>{\n        const fn = routes[toModel];\n        $2b8bc8511c5c8bbe$var$convert[fromModel][toModel] = $2b8bc8511c5c8bbe$var$wrapRounded(fn);\n        $2b8bc8511c5c8bbe$var$convert[fromModel][toModel].raw = $2b8bc8511c5c8bbe$var$wrapRaw(fn);\n    });\n});\nmodule.exports = $2b8bc8511c5c8bbe$var$convert;\n\n});\nparcelRequire.register(\"34eeA\", function(module, exports) {\n/* MIT license */ /* eslint-disable no-mixed-operators */ \nvar $iXgRS = parcelRequire(\"iXgRS\");\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\nconst $23bcc96f08b27157$var$reverseKeywords = {};\nfor (const key of Object.keys($iXgRS))$23bcc96f08b27157$var$reverseKeywords[$iXgRS[key]] = key;\nconst $23bcc96f08b27157$var$convert = {\n    rgb: {\n        channels: 3,\n        labels: \"rgb\"\n    },\n    hsl: {\n        channels: 3,\n        labels: \"hsl\"\n    },\n    hsv: {\n        channels: 3,\n        labels: \"hsv\"\n    },\n    hwb: {\n        channels: 3,\n        labels: \"hwb\"\n    },\n    cmyk: {\n        channels: 4,\n        labels: \"cmyk\"\n    },\n    xyz: {\n        channels: 3,\n        labels: \"xyz\"\n    },\n    lab: {\n        channels: 3,\n        labels: \"lab\"\n    },\n    lch: {\n        channels: 3,\n        labels: \"lch\"\n    },\n    hex: {\n        channels: 1,\n        labels: [\n            \"hex\"\n        ]\n    },\n    keyword: {\n        channels: 1,\n        labels: [\n            \"keyword\"\n        ]\n    },\n    ansi16: {\n        channels: 1,\n        labels: [\n            \"ansi16\"\n        ]\n    },\n    ansi256: {\n        channels: 1,\n        labels: [\n            \"ansi256\"\n        ]\n    },\n    hcg: {\n        channels: 3,\n        labels: [\n            \"h\",\n            \"c\",\n            \"g\"\n        ]\n    },\n    apple: {\n        channels: 3,\n        labels: [\n            \"r16\",\n            \"g16\",\n            \"b16\"\n        ]\n    },\n    gray: {\n        channels: 1,\n        labels: [\n            \"gray\"\n        ]\n    }\n};\nmodule.exports = $23bcc96f08b27157$var$convert;\n// Hide .channels and .labels properties\nfor (const model of Object.keys($23bcc96f08b27157$var$convert)){\n    if (!(\"channels\" in $23bcc96f08b27157$var$convert[model])) throw new Error(\"missing channels property: \" + model);\n    if (!(\"labels\" in $23bcc96f08b27157$var$convert[model])) throw new Error(\"missing channel labels property: \" + model);\n    if ($23bcc96f08b27157$var$convert[model].labels.length !== $23bcc96f08b27157$var$convert[model].channels) throw new Error(\"channel and label counts mismatch: \" + model);\n    const { channels: channels, labels: labels } = $23bcc96f08b27157$var$convert[model];\n    delete $23bcc96f08b27157$var$convert[model].channels;\n    delete $23bcc96f08b27157$var$convert[model].labels;\n    Object.defineProperty($23bcc96f08b27157$var$convert[model], \"channels\", {\n        value: channels\n    });\n    Object.defineProperty($23bcc96f08b27157$var$convert[model], \"labels\", {\n        value: labels\n    });\n}\n$23bcc96f08b27157$var$convert.rgb.hsl = function(rgb) {\n    const r = rgb[0] / 255;\n    const g = rgb[1] / 255;\n    const b = rgb[2] / 255;\n    const min = Math.min(r, g, b);\n    const max = Math.max(r, g, b);\n    const delta = max - min;\n    let h;\n    let s;\n    if (max === min) h = 0;\n    else if (r === max) h = (g - b) / delta;\n    else if (g === max) h = 2 + (b - r) / delta;\n    else if (b === max) h = 4 + (r - g) / delta;\n    h = Math.min(h * 60, 360);\n    if (h < 0) h += 360;\n    const l = (min + max) / 2;\n    if (max === min) s = 0;\n    else if (l <= 0.5) s = delta / (max + min);\n    else s = delta / (2 - max - min);\n    return [\n        h,\n        s * 100,\n        l * 100\n    ];\n};\n$23bcc96f08b27157$var$convert.rgb.hsv = function(rgb) {\n    let rdif;\n    let gdif;\n    let bdif;\n    let h;\n    let s;\n    const r = rgb[0] / 255;\n    const g = rgb[1] / 255;\n    const b = rgb[2] / 255;\n    const v = Math.max(r, g, b);\n    const diff = v - Math.min(r, g, b);\n    const diffc = function(c) {\n        return (v - c) / 6 / diff + 0.5;\n    };\n    if (diff === 0) {\n        h = 0;\n        s = 0;\n    } else {\n        s = diff / v;\n        rdif = diffc(r);\n        gdif = diffc(g);\n        bdif = diffc(b);\n        if (r === v) h = bdif - gdif;\n        else if (g === v) h = 1 / 3 + rdif - bdif;\n        else if (b === v) h = 2 / 3 + gdif - rdif;\n        if (h < 0) h += 1;\n        else if (h > 1) h -= 1;\n    }\n    return [\n        h * 360,\n        s * 100,\n        v * 100\n    ];\n};\n$23bcc96f08b27157$var$convert.rgb.hwb = function(rgb) {\n    const r = rgb[0];\n    const g = rgb[1];\n    let b = rgb[2];\n    const h = $23bcc96f08b27157$var$convert.rgb.hsl(rgb)[0];\n    const w = 1 / 255 * Math.min(r, Math.min(g, b));\n    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n    return [\n        h,\n        w * 100,\n        b * 100\n    ];\n};\n$23bcc96f08b27157$var$convert.rgb.cmyk = function(rgb) {\n    const r = rgb[0] / 255;\n    const g = rgb[1] / 255;\n    const b = rgb[2] / 255;\n    const k = Math.min(1 - r, 1 - g, 1 - b);\n    const c = (1 - r - k) / (1 - k) || 0;\n    const m = (1 - g - k) / (1 - k) || 0;\n    const y = (1 - b - k) / (1 - k) || 0;\n    return [\n        c * 100,\n        m * 100,\n        y * 100,\n        k * 100\n    ];\n};\nfunction $23bcc96f08b27157$var$comparativeDistance(x, y) {\n    /*\n\t\tSee https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n\t*/ return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;\n}\n$23bcc96f08b27157$var$convert.rgb.keyword = function(rgb) {\n    const reversed = $23bcc96f08b27157$var$reverseKeywords[rgb];\n    if (reversed) return reversed;\n    let currentClosestDistance = Infinity;\n    let currentClosestKeyword;\n    for (const keyword of Object.keys($iXgRS)){\n        const value = $iXgRS[keyword];\n        // Compute comparative distance\n        const distance = $23bcc96f08b27157$var$comparativeDistance(rgb, value);\n        // Check if its less, if so set as closest\n        if (distance < currentClosestDistance) {\n            currentClosestDistance = distance;\n            currentClosestKeyword = keyword;\n        }\n    }\n    return currentClosestKeyword;\n};\n$23bcc96f08b27157$var$convert.keyword.rgb = function(keyword) {\n    return $iXgRS[keyword];\n};\n$23bcc96f08b27157$var$convert.rgb.xyz = function(rgb) {\n    let r = rgb[0] / 255;\n    let g = rgb[1] / 255;\n    let b = rgb[2] / 255;\n    // Assume sRGB\n    r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;\n    g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;\n    b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;\n    const x = r * 0.4124 + g * 0.3576 + b * 0.1805;\n    const y = r * 0.2126 + g * 0.7152 + b * 0.0722;\n    const z = r * 0.0193 + g * 0.1192 + b * 0.9505;\n    return [\n        x * 100,\n        y * 100,\n        z * 100\n    ];\n};\n$23bcc96f08b27157$var$convert.rgb.lab = function(rgb) {\n    const xyz = $23bcc96f08b27157$var$convert.rgb.xyz(rgb);\n    let x = xyz[0];\n    let y = xyz[1];\n    let z = xyz[2];\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? x ** (1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? y ** (1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116;\n    const l = 116 * y - 16;\n    const a = 500 * (x - y);\n    const b = 200 * (y - z);\n    return [\n        l,\n        a,\n        b\n    ];\n};\n$23bcc96f08b27157$var$convert.hsl.rgb = function(hsl) {\n    const h = hsl[0] / 360;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n    let t2;\n    let t3;\n    let val;\n    if (s === 0) {\n        val = l * 255;\n        return [\n            val,\n            val,\n            val\n        ];\n    }\n    if (l < 0.5) t2 = l * (1 + s);\n    else t2 = l + s - l * s;\n    const t1 = 2 * l - t2;\n    const rgb = [\n        0,\n        0,\n        0\n    ];\n    for(let i = 0; i < 3; i++){\n        t3 = h + 1 / 3 * -(i - 1);\n        if (t3 < 0) t3++;\n        if (t3 > 1) t3--;\n        if (6 * t3 < 1) val = t1 + (t2 - t1) * 6 * t3;\n        else if (2 * t3 < 1) val = t2;\n        else if (3 * t3 < 2) val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n        else val = t1;\n        rgb[i] = val * 255;\n    }\n    return rgb;\n};\n$23bcc96f08b27157$var$convert.hsl.hsv = function(hsl) {\n    const h = hsl[0];\n    let s = hsl[1] / 100;\n    let l = hsl[2] / 100;\n    let smin = s;\n    const lmin = Math.max(l, 0.01);\n    l *= 2;\n    s *= l <= 1 ? l : 2 - l;\n    smin *= lmin <= 1 ? lmin : 2 - lmin;\n    const v = (l + s) / 2;\n    const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);\n    return [\n        h,\n        sv * 100,\n        v * 100\n    ];\n};\n$23bcc96f08b27157$var$convert.hsv.rgb = function(hsv) {\n    const h = hsv[0] / 60;\n    const s = hsv[1] / 100;\n    let v = hsv[2] / 100;\n    const hi = Math.floor(h) % 6;\n    const f = h - Math.floor(h);\n    const p = 255 * v * (1 - s);\n    const q = 255 * v * (1 - s * f);\n    const t = 255 * v * (1 - s * (1 - f));\n    v *= 255;\n    switch(hi){\n        case 0:\n            return [\n                v,\n                t,\n                p\n            ];\n        case 1:\n            return [\n                q,\n                v,\n                p\n            ];\n        case 2:\n            return [\n                p,\n                v,\n                t\n            ];\n        case 3:\n            return [\n                p,\n                q,\n                v\n            ];\n        case 4:\n            return [\n                t,\n                p,\n                v\n            ];\n        case 5:\n            return [\n                v,\n                p,\n                q\n            ];\n    }\n};\n$23bcc96f08b27157$var$convert.hsv.hsl = function(hsv) {\n    const h = hsv[0];\n    const s = hsv[1] / 100;\n    const v = hsv[2] / 100;\n    const vmin = Math.max(v, 0.01);\n    let sl;\n    let l;\n    l = (2 - s) * v;\n    const lmin = (2 - s) * vmin;\n    sl = s * vmin;\n    sl /= lmin <= 1 ? lmin : 2 - lmin;\n    sl = sl || 0;\n    l /= 2;\n    return [\n        h,\n        sl * 100,\n        l * 100\n    ];\n};\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\n$23bcc96f08b27157$var$convert.hwb.rgb = function(hwb) {\n    const h = hwb[0] / 360;\n    let wh = hwb[1] / 100;\n    let bl = hwb[2] / 100;\n    const ratio = wh + bl;\n    let f;\n    // Wh + bl cant be > 1\n    if (ratio > 1) {\n        wh /= ratio;\n        bl /= ratio;\n    }\n    const i = Math.floor(6 * h);\n    const v = 1 - bl;\n    f = 6 * h - i;\n    if ((i & 0x01) !== 0) f = 1 - f;\n    const n = wh + f * (v - wh); // Linear interpolation\n    let r;\n    let g;\n    let b;\n    /* eslint-disable max-statements-per-line,no-multi-spaces */ switch(i){\n        default:\n        case 6:\n        case 0:\n            r = v;\n            g = n;\n            b = wh;\n            break;\n        case 1:\n            r = n;\n            g = v;\n            b = wh;\n            break;\n        case 2:\n            r = wh;\n            g = v;\n            b = n;\n            break;\n        case 3:\n            r = wh;\n            g = n;\n            b = v;\n            break;\n        case 4:\n            r = n;\n            g = wh;\n            b = v;\n            break;\n        case 5:\n            r = v;\n            g = wh;\n            b = n;\n            break;\n    }\n    /* eslint-enable max-statements-per-line,no-multi-spaces */ return [\n        r * 255,\n        g * 255,\n        b * 255\n    ];\n};\n$23bcc96f08b27157$var$convert.cmyk.rgb = function(cmyk) {\n    const c = cmyk[0] / 100;\n    const m = cmyk[1] / 100;\n    const y = cmyk[2] / 100;\n    const k = cmyk[3] / 100;\n    const r = 1 - Math.min(1, c * (1 - k) + k);\n    const g = 1 - Math.min(1, m * (1 - k) + k);\n    const b = 1 - Math.min(1, y * (1 - k) + k);\n    return [\n        r * 255,\n        g * 255,\n        b * 255\n    ];\n};\n$23bcc96f08b27157$var$convert.xyz.rgb = function(xyz) {\n    const x = xyz[0] / 100;\n    const y = xyz[1] / 100;\n    const z = xyz[2] / 100;\n    let r;\n    let g;\n    let b;\n    r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    b = x * 0.0557 + y * -0.204 + z * 1.0570;\n    // Assume sRGB\n    r = r > 0.0031308 ? 1.055 * r ** (1.0 / 2.4) - 0.055 : r * 12.92;\n    g = g > 0.0031308 ? 1.055 * g ** (1.0 / 2.4) - 0.055 : g * 12.92;\n    b = b > 0.0031308 ? 1.055 * b ** (1.0 / 2.4) - 0.055 : b * 12.92;\n    r = Math.min(Math.max(0, r), 1);\n    g = Math.min(Math.max(0, g), 1);\n    b = Math.min(Math.max(0, b), 1);\n    return [\n        r * 255,\n        g * 255,\n        b * 255\n    ];\n};\n$23bcc96f08b27157$var$convert.xyz.lab = function(xyz) {\n    let x = xyz[0];\n    let y = xyz[1];\n    let z = xyz[2];\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? x ** (1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? y ** (1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116;\n    const l = 116 * y - 16;\n    const a = 500 * (x - y);\n    const b = 200 * (y - z);\n    return [\n        l,\n        a,\n        b\n    ];\n};\n$23bcc96f08b27157$var$convert.lab.xyz = function(lab) {\n    const l = lab[0];\n    const a = lab[1];\n    const b = lab[2];\n    let x;\n    let y;\n    let z;\n    y = (l + 16) / 116;\n    x = a / 500 + y;\n    z = y - b / 200;\n    const y2 = y ** 3;\n    const x2 = x ** 3;\n    const z2 = z ** 3;\n    y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n    x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n    z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n    x *= 95.047;\n    y *= 100;\n    z *= 108.883;\n    return [\n        x,\n        y,\n        z\n    ];\n};\n$23bcc96f08b27157$var$convert.lab.lch = function(lab) {\n    const l = lab[0];\n    const a = lab[1];\n    const b = lab[2];\n    let h;\n    const hr = Math.atan2(b, a);\n    h = hr * 360 / 2 / Math.PI;\n    if (h < 0) h += 360;\n    const c = Math.sqrt(a * a + b * b);\n    return [\n        l,\n        c,\n        h\n    ];\n};\n$23bcc96f08b27157$var$convert.lch.lab = function(lch) {\n    const l = lch[0];\n    const c = lch[1];\n    const h = lch[2];\n    const hr = h / 360 * 2 * Math.PI;\n    const a = c * Math.cos(hr);\n    const b = c * Math.sin(hr);\n    return [\n        l,\n        a,\n        b\n    ];\n};\n$23bcc96f08b27157$var$convert.rgb.ansi16 = function(args, saturation = null) {\n    const [r, g, b] = args;\n    let value = saturation === null ? $23bcc96f08b27157$var$convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization\n    value = Math.round(value / 50);\n    if (value === 0) return 30;\n    let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));\n    if (value === 2) ansi += 60;\n    return ansi;\n};\n$23bcc96f08b27157$var$convert.hsv.ansi16 = function(args) {\n    // Optimization here; we already know the value and don't need to get\n    // it converted for us.\n    return $23bcc96f08b27157$var$convert.rgb.ansi16($23bcc96f08b27157$var$convert.hsv.rgb(args), args[2]);\n};\n$23bcc96f08b27157$var$convert.rgb.ansi256 = function(args) {\n    const r = args[0];\n    const g = args[1];\n    const b = args[2];\n    // We use the extended greyscale palette here, with the exception of\n    // black and white. normal palette only has 4 greyscale shades.\n    if (r === g && g === b) {\n        if (r < 8) return 16;\n        if (r > 248) return 231;\n        return Math.round((r - 8) / 247 * 24) + 232;\n    }\n    const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);\n    return ansi;\n};\n$23bcc96f08b27157$var$convert.ansi16.rgb = function(args) {\n    let color = args % 10;\n    // Handle greyscale\n    if (color === 0 || color === 7) {\n        if (args > 50) color += 3.5;\n        color = color / 10.5 * 255;\n        return [\n            color,\n            color,\n            color\n        ];\n    }\n    const mult = (~~(args > 50) + 1) * 0.5;\n    const r = (color & 1) * mult * 255;\n    const g = (color >> 1 & 1) * mult * 255;\n    const b = (color >> 2 & 1) * mult * 255;\n    return [\n        r,\n        g,\n        b\n    ];\n};\n$23bcc96f08b27157$var$convert.ansi256.rgb = function(args) {\n    // Handle greyscale\n    if (args >= 232) {\n        const c = (args - 232) * 10 + 8;\n        return [\n            c,\n            c,\n            c\n        ];\n    }\n    args -= 16;\n    let rem;\n    const r = Math.floor(args / 36) / 5 * 255;\n    const g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n    const b = rem % 6 / 5 * 255;\n    return [\n        r,\n        g,\n        b\n    ];\n};\n$23bcc96f08b27157$var$convert.rgb.hex = function(args) {\n    const integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);\n    const string = integer.toString(16).toUpperCase();\n    return \"000000\".substring(string.length) + string;\n};\n$23bcc96f08b27157$var$convert.hex.rgb = function(args) {\n    const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n    if (!match) return [\n        0,\n        0,\n        0\n    ];\n    let colorString = match[0];\n    if (match[0].length === 3) colorString = colorString.split(\"\").map((char)=>{\n        return char + char;\n    }).join(\"\");\n    const integer = parseInt(colorString, 16);\n    const r = integer >> 16 & 0xFF;\n    const g = integer >> 8 & 0xFF;\n    const b = integer & 0xFF;\n    return [\n        r,\n        g,\n        b\n    ];\n};\n$23bcc96f08b27157$var$convert.rgb.hcg = function(rgb) {\n    const r = rgb[0] / 255;\n    const g = rgb[1] / 255;\n    const b = rgb[2] / 255;\n    const max = Math.max(Math.max(r, g), b);\n    const min = Math.min(Math.min(r, g), b);\n    const chroma = max - min;\n    let grayscale;\n    let hue;\n    if (chroma < 1) grayscale = min / (1 - chroma);\n    else grayscale = 0;\n    if (chroma <= 0) hue = 0;\n    else if (max === r) hue = (g - b) / chroma % 6;\n    else if (max === g) hue = 2 + (b - r) / chroma;\n    else hue = 4 + (r - g) / chroma;\n    hue /= 6;\n    hue %= 1;\n    return [\n        hue * 360,\n        chroma * 100,\n        grayscale * 100\n    ];\n};\n$23bcc96f08b27157$var$convert.hsl.hcg = function(hsl) {\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n    const c = l < 0.5 ? 2.0 * s * l : 2.0 * s * (1.0 - l);\n    let f = 0;\n    if (c < 1.0) f = (l - 0.5 * c) / (1.0 - c);\n    return [\n        hsl[0],\n        c * 100,\n        f * 100\n    ];\n};\n$23bcc96f08b27157$var$convert.hsv.hcg = function(hsv) {\n    const s = hsv[1] / 100;\n    const v = hsv[2] / 100;\n    const c = s * v;\n    let f = 0;\n    if (c < 1.0) f = (v - c) / (1 - c);\n    return [\n        hsv[0],\n        c * 100,\n        f * 100\n    ];\n};\n$23bcc96f08b27157$var$convert.hcg.rgb = function(hcg) {\n    const h = hcg[0] / 360;\n    const c = hcg[1] / 100;\n    const g = hcg[2] / 100;\n    if (c === 0.0) return [\n        g * 255,\n        g * 255,\n        g * 255\n    ];\n    const pure = [\n        0,\n        0,\n        0\n    ];\n    const hi = h % 1 * 6;\n    const v = hi % 1;\n    const w = 1 - v;\n    let mg = 0;\n    /* eslint-disable max-statements-per-line */ switch(Math.floor(hi)){\n        case 0:\n            pure[0] = 1;\n            pure[1] = v;\n            pure[2] = 0;\n            break;\n        case 1:\n            pure[0] = w;\n            pure[1] = 1;\n            pure[2] = 0;\n            break;\n        case 2:\n            pure[0] = 0;\n            pure[1] = 1;\n            pure[2] = v;\n            break;\n        case 3:\n            pure[0] = 0;\n            pure[1] = w;\n            pure[2] = 1;\n            break;\n        case 4:\n            pure[0] = v;\n            pure[1] = 0;\n            pure[2] = 1;\n            break;\n        default:\n            pure[0] = 1;\n            pure[1] = 0;\n            pure[2] = w;\n    }\n    /* eslint-enable max-statements-per-line */ mg = (1.0 - c) * g;\n    return [\n        (c * pure[0] + mg) * 255,\n        (c * pure[1] + mg) * 255,\n        (c * pure[2] + mg) * 255\n    ];\n};\n$23bcc96f08b27157$var$convert.hcg.hsv = function(hcg) {\n    const c = hcg[1] / 100;\n    const g = hcg[2] / 100;\n    const v = c + g * (1.0 - c);\n    let f = 0;\n    if (v > 0.0) f = c / v;\n    return [\n        hcg[0],\n        f * 100,\n        v * 100\n    ];\n};\n$23bcc96f08b27157$var$convert.hcg.hsl = function(hcg) {\n    const c = hcg[1] / 100;\n    const g = hcg[2] / 100;\n    const l = g * (1.0 - c) + 0.5 * c;\n    let s = 0;\n    if (l > 0.0 && l < 0.5) s = c / (2 * l);\n    else if (l >= 0.5 && l < 1.0) s = c / (2 * (1 - l));\n    return [\n        hcg[0],\n        s * 100,\n        l * 100\n    ];\n};\n$23bcc96f08b27157$var$convert.hcg.hwb = function(hcg) {\n    const c = hcg[1] / 100;\n    const g = hcg[2] / 100;\n    const v = c + g * (1.0 - c);\n    return [\n        hcg[0],\n        (v - c) * 100,\n        (1 - v) * 100\n    ];\n};\n$23bcc96f08b27157$var$convert.hwb.hcg = function(hwb) {\n    const w = hwb[1] / 100;\n    const b = hwb[2] / 100;\n    const v = 1 - b;\n    const c = v - w;\n    let g = 0;\n    if (c < 1) g = (v - c) / (1 - c);\n    return [\n        hwb[0],\n        c * 100,\n        g * 100\n    ];\n};\n$23bcc96f08b27157$var$convert.apple.rgb = function(apple) {\n    return [\n        apple[0] / 65535 * 255,\n        apple[1] / 65535 * 255,\n        apple[2] / 65535 * 255\n    ];\n};\n$23bcc96f08b27157$var$convert.rgb.apple = function(rgb) {\n    return [\n        rgb[0] / 255 * 65535,\n        rgb[1] / 255 * 65535,\n        rgb[2] / 255 * 65535\n    ];\n};\n$23bcc96f08b27157$var$convert.gray.rgb = function(args) {\n    return [\n        args[0] / 100 * 255,\n        args[0] / 100 * 255,\n        args[0] / 100 * 255\n    ];\n};\n$23bcc96f08b27157$var$convert.gray.hsl = function(args) {\n    return [\n        0,\n        0,\n        args[0]\n    ];\n};\n$23bcc96f08b27157$var$convert.gray.hsv = $23bcc96f08b27157$var$convert.gray.hsl;\n$23bcc96f08b27157$var$convert.gray.hwb = function(gray) {\n    return [\n        0,\n        100,\n        gray[0]\n    ];\n};\n$23bcc96f08b27157$var$convert.gray.cmyk = function(gray) {\n    return [\n        0,\n        0,\n        0,\n        gray[0]\n    ];\n};\n$23bcc96f08b27157$var$convert.gray.lab = function(gray) {\n    return [\n        gray[0],\n        0,\n        0\n    ];\n};\n$23bcc96f08b27157$var$convert.gray.hex = function(gray) {\n    const val = Math.round(gray[0] / 100 * 255) & 0xFF;\n    const integer = (val << 16) + (val << 8) + val;\n    const string = integer.toString(16).toUpperCase();\n    return \"000000\".substring(string.length) + string;\n};\n$23bcc96f08b27157$var$convert.rgb.gray = function(rgb) {\n    const val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n    return [\n        val / 255 * 100\n    ];\n};\n\n});\n\nparcelRequire.register(\"lIrBP\", function(module, exports) {\n\nvar $34eeA = parcelRequire(\"34eeA\");\n/*\n\tThis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/ function $fcf31fa4f4290ffc$var$buildGraph() {\n    const graph = {};\n    // https://jsperf.com/object-keys-vs-for-in-with-closure/3\n    const models = Object.keys($34eeA);\n    for(let len = models.length, i = 0; i < len; i++)graph[models[i]] = {\n        // http://jsperf.com/1-vs-infinity\n        // micro-opt, but this is simple.\n        distance: -1,\n        parent: null\n    };\n    return graph;\n}\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction $fcf31fa4f4290ffc$var$deriveBFS(fromModel) {\n    const graph = $fcf31fa4f4290ffc$var$buildGraph();\n    const queue = [\n        fromModel\n    ]; // Unshift -> queue -> pop\n    graph[fromModel].distance = 0;\n    while(queue.length){\n        const current = queue.pop();\n        const adjacents = Object.keys($34eeA[current]);\n        for(let len = adjacents.length, i = 0; i < len; i++){\n            const adjacent = adjacents[i];\n            const node = graph[adjacent];\n            if (node.distance === -1) {\n                node.distance = graph[current].distance + 1;\n                node.parent = current;\n                queue.unshift(adjacent);\n            }\n        }\n    }\n    return graph;\n}\nfunction $fcf31fa4f4290ffc$var$link(from, to) {\n    return function(args) {\n        return to(from(args));\n    };\n}\nfunction $fcf31fa4f4290ffc$var$wrapConversion(toModel, graph) {\n    const path = [\n        graph[toModel].parent,\n        toModel\n    ];\n    let fn = $34eeA[graph[toModel].parent][toModel];\n    let cur = graph[toModel].parent;\n    while(graph[cur].parent){\n        path.unshift(graph[cur].parent);\n        fn = $fcf31fa4f4290ffc$var$link($34eeA[graph[cur].parent][cur], fn);\n        cur = graph[cur].parent;\n    }\n    fn.conversion = path;\n    return fn;\n}\nmodule.exports = function(fromModel) {\n    const graph = $fcf31fa4f4290ffc$var$deriveBFS(fromModel);\n    const conversion = {};\n    const models = Object.keys(graph);\n    for(let len = models.length, i = 0; i < len; i++){\n        const toModel = models[i];\n        const node = graph[toModel];\n        if (node.parent === null) continue;\n        conversion[toModel] = $fcf31fa4f4290ffc$var$wrapConversion(toModel, graph);\n    }\n    return conversion;\n};\n\n});\n\n\n\n\n\n//# sourceMappingURL=index.e8a11578.js.map\n","import { PodzialMandatowWOkregu } from \"./ordynacja\";\nimport { Wynik, Okreg, Sondaze } from \"./typy\";\n\nexport const KOLOR_PARTII = {\n  PIS: \"rgb(38, 55, 120)\",\n  LEWICA: \"rgb(171,20,91)\",\n  KONF: \"rgb(0, 0, 0)\",\n  TD: \"rgb(220, 195, 16)\",\n  KO: \"rgb(0,68,149)\",\n  BIAŁY: \"rgb(255,255,255)\",\n};\n\nexport const sondaze: Sondaze = {\n  IBRiS_20231010: {\n    PIS: 33.5,\n    KO: 28.0,\n    TD: 10.9,\n    LEWICA: 10.1,\n    KONF: 9.2,\n  },\n  ewybory_20231010: {\n    PIS: 33.45,\n    KO: 30.85,\n    TD: 11.03,\n    LEWICA: 12.88,\n    KONF: 8.5,\n  },\n  IPSOS_20231010: {\n    PIS: 36.0,\n    KO: 28.0,\n    TD: 8.0,\n    LEWICA: 8.0,\n    KONF: 9.0,\n  },\n  Pollster_CAWI_20231007: {\n    PIS: 34.3,\n    KO: 30.0,\n    TD: 11.8,\n    LEWICA: 8.2,\n    KONF: 8.2,\n  },\n  IBRiS_20231007: {\n    PIS: 34.6,\n    KO: 27.9,\n    TD: 7.6,\n    LEWICA: 11.4,\n    KONF: 7.7,\n  },\n  Estymator_20231006: {\n    PIS: 36.9,\n    KO: 30.5,\n    TD: 9.4,\n    LEWICA: 9.3,\n    KONF: 9.3,\n  },\n  // Opinia24_20231004_plus_niezdecydowani: {\n  //   PIS: 32.9,\n  //   KO: 31.1,\n  //   TD: 13.2,\n  //   LEWICA: 11.3,\n  //   KONF: 6.5,\n  // },\n  Opinia24_20231004: {\n    PIS: 30.0,\n    KO: 25.0,\n    TD: 6.0,\n    LEWICA: 9.0,\n    KONF: 5.0,\n  },\n  IBRiS_20231004: {\n    PIS: 34.0,\n    KO: 28.9,\n    TD: 10.6,\n    LEWICA: 10.0,\n    KONF: 9.7,\n  },\n  Kantar_20231004: {\n    PIS: 34.0,\n    KO: 30.0,\n    TD: 9.0,\n    LEWICA: 10.0,\n    KONF: 8.0,\n  },\n  UnitedSurveys_20231002: {\n    PIS: 32.0,\n    KO: 28.2,\n    TD: 11.0,\n    LEWICA: 10.2,\n    KONF: 10.0,\n  },\n  UnitedSurveys_20231001: {\n    PIS: 32.5,\n    KO: 26.4,\n    TD: 12.1,\n    LEWICA: 8.1,\n    KONF: 9.0,\n  },\n  Estymator_20230930: {\n    PIS: 37.4,\n    KO: 30.6,\n    TD: 9.6,\n    LEWICA: 8.7,\n    KONF: 9.5,\n  },\n  IBRiS_20230927: {\n    PIS: 35.1,\n    KO: 27.0,\n    TD: 10.4,\n    LEWICA: 10.1,\n    KONF: 9.5,\n  },\n  IPSOS_20230925: {\n    PIS: 36.0,\n    KO: 29.0,\n    TD: 8.0,\n    LEWICA: 10,\n    KONF: 7.0,\n  },\n  UnitedSurveys_20230924: {\n    PIS: 33.8,\n    KO: 28.1,\n    TD: 9.0,\n    LEWICA: 8.7,\n    KONF: 8.8,\n  },\n  Estymator_20230923: {\n    PIS: 37.3,\n    KO: 29.8,\n    TD: 9.9,\n    LEWICA: 8.5,\n    KONF: 10.6,\n  },\n  Pollster_20230922: {\n    PIS: 36.8,\n    KO: 30.4,\n    TD: 9.8,\n    LEWICA: 9.7,\n    KONF: 8.7,\n  },\n  IBRiS_20230920: {\n    PIS: 35.1,\n    KO: 26.1,\n    TD: 9.2,\n    LEWICA: 9.1,\n    KONF: 9.9,\n  },\n  // UnitedSurveys_20230919: {\n  //   PIS: 31.6,\n  //   KO: 27.0,\n  //   TD: 10.2,\n  //   LEWICA: 9.9,\n  //   KONF: 9.3,\n  // },\n  // ResearchPartner_20230918: {\n  //   PIS: 35.4,\n  //   KO: 26.1,\n  //   TD: 10.1,\n  //   LEWICA: 8.0,\n  //   KONF: 9.5,\n  // },\n  // UnitedSurveys_20230917: {\n  //   PIS: 32.8,\n  //   KO: 26.3,\n  //   TD: 10.6,\n  //   LEWICA: 10.2,\n  //   KONF: 9.5,\n  // },\n  // IBRiS_20230917: {\n  //   PIS: 32.6,\n  //   KO: 26.6,\n  //   TD: 10.6,\n  //   LEWICA: 9.9,\n  //   KONF: 9.5,\n  // },\n};\n\nexport const sondazeDoSredniej = {\n  IBRiS_20231010: sondaze.IBRiS_20231010,\n  // ewybory_20231010: sondaze.ewybory_20231010,\n  IPSOS_20231010: sondaze.IPSOS_20231010,\n  IBRiS_20231007 : sondaze.IBRiS_20231007,\n  Estymator_20231006: sondaze.Estymator_20231006,\n  Opinia24_20231004: sondaze.Opinia24_20231004,\n  IBRiS_20231004: sondaze.IBRiS_20231004,\n  Kantar_20231004: sondaze.Kantar_20231004,\n};\n\n// Do wyświetlenia\nexport const srednia: Wynik = {};\n// Do obliczeń: znormalizowane do 100%\nexport const sredniaSondazy: Wynik = {};\nObject.entries(sondazeDoSredniej).forEach(([sondaz, wynik]) => {\n  Object.entries(wynik).forEach(([partia, procent]) =>\n    sredniaSondazy[partia]\n      ? (sredniaSondazy[partia] += procent)\n      : (sredniaSondazy[partia] = procent)\n  );\n});\n\nconst sumaProcentow =\n  Object.values(sredniaSondazy).reduce((acc, curr) => (acc += curr), 0) /\n  Object.entries(sondazeDoSredniej).length;\nObject.entries(sredniaSondazy).forEach(([partia, procent]) => {\n  srednia[partia] = (sredniaSondazy[partia] / Object.entries(sondazeDoSredniej).length);\n  sredniaSondazy[partia] =\n    (sredniaSondazy[partia] / Object.entries(sondazeDoSredniej).length) *\n    (100 / sumaProcentow);\n});\n\nexport const wybory2019: Wynik = {\n  PIS: 43.59,\n  KO: 27.4,\n  LEWICA: 12.56,\n  PSL: 8.55,\n  KONF: 6.81,\n};\n\nexport const okregi: Okreg[] = [\n  {\n    nr: 1,\n    miasto: \"Legnica\",\n    mandaty: 12,\n    glosy2019: 432436,\n    wynik2019: {\n      KO: 25.02,\n      KONF: 5.85,\n      PSL: 7.17,\n      PIS: 42.4,\n      LEWICA: 16.43,\n    },\n  },\n  {\n    nr: 2,\n    miasto: \"Wałbrzych\",\n    mandaty: 8,\n    glosy2019: 283002,\n    wynik2019: {\n      KO: 32.09,\n      KONF: 5.42,\n      PSL: 7.25,\n      PIS: 40.54,\n      LEWICA: 12.35,\n    },\n  },\n  {\n    nr: 3,\n    miasto: \"Wrocław\",\n    mandaty: 14,\n    glosy2019: 654455,\n    wynik2019: {\n      KO: 32.8,\n      KONF: 7.45,\n      PSL: 6.46,\n      PIS: 34.67,\n      LEWICA: 15.41,\n    },\n  },\n  {\n    nr: 4,\n    miasto: \"Bydgoszcz\",\n    mandaty: 12,\n    glosy2019: 459982,\n    wynik2019: {\n      KO: 31.05,\n      KONF: 7.05,\n      PSL: 9.02,\n      PIS: 36.43,\n      LEWICA: 15.17,\n    },\n  },\n  {\n    nr: 5,\n    miasto: \"Toruń\",\n    mandaty: 13,\n    glosy2019: 452330,\n    wynik2019: {\n      KO: 26.42,\n      KONF: 6.33,\n      PSL: 10.88,\n      PIS: 40.38,\n      LEWICA: 14.83,\n    },\n  },\n  {\n    nr: 6,\n    miasto: \"Lublin\",\n    mandaty: 15,\n    glosy2019: 565597,\n    wynik2019: {\n      KO: 19.3,\n      KONF: 7.07,\n      PSL: 9.1,\n      PIS: 55.39,\n      LEWICA: 7.81,\n    },\n  },\n  {\n    nr: 7,\n    miasto: \"Chełm\",\n    mandaty: 12,\n    glosy2019: 401318,\n    wynik2019: {\n      KO: 14.8,\n      KONF: 5.84,\n      PSL: 11.86,\n      PIS: 59.5,\n      LEWICA: 6.83,\n    },\n  },\n  {\n    nr: 8,\n    miasto: \"Zielona Góra\",\n    mandaty: 12,\n    glosy2019: 437917,\n    wynik2019: {\n      KO: 31.27,\n      KONF: 7.19,\n      PSL: 11.63,\n      PIS: 34.3,\n      LEWICA: 15.61,\n    },\n  },\n  {\n    nr: 9,\n    miasto: \"Łódź\",\n    mandaty: 10,\n    glosy2019: 415540,\n    wynik2019: {\n      KO: 35.82,\n      KONF: 6.65,\n      PSL: 4.53,\n      PIS: 32.9,\n      LEWICA: 20.1,\n    },\n  },\n  {\n    nr: 10,\n    miasto: \"Piotrków Trybunalski\",\n    mandaty: 9,\n    glosy2019: 346326,\n    wynik2019: {\n      KO: 15.64,\n      KONF: 6.76,\n      PSL: 10.44,\n      PIS: 56.21,\n      LEWICA: 10.95,\n    },\n  },\n  {\n    nr: 11,\n    miasto: \"Sieradz\",\n    mandaty: 12,\n    glosy2019: 460239,\n    wynik2019: {\n      KO: 20.48,\n      KONF: 5.88,\n      PSL: 10.29,\n      PIS: 49.81,\n      LEWICA: 11.98,\n    },\n  },\n  {\n    nr: 12,\n    miasto: \"Chrzanów\",\n    mandaty: 8,\n    glosy2019: 316214,\n    wynik2019: {\n      KO: 23.04,\n      KONF: 7.06,\n      PSL: 7.9,\n      PIS: 53.48,\n      LEWICA: 8.51,\n    },\n  },\n  {\n    nr: 13,\n    miasto: \"Kraków\",\n    mandaty: 14,\n    glosy2019: 649287,\n    wynik2019: {\n      KO: 30.48,\n      KONF: 7.99,\n      PSL: 7.27,\n      PIS: 39.56,\n      LEWICA: 13.01,\n    },\n  },\n  {\n    nr: 14,\n    miasto: \"Nowy Sącz\",\n    mandaty: 10,\n    glosy2019: 370199,\n    wynik2019: {\n      KO: 13.83,\n      KONF: 6.95,\n      PSL: 7.35,\n      PIS: 65.8,\n      LEWICA: 6.07,\n    },\n  },\n  {\n    nr: 15,\n    miasto: \"Tarnów\",\n    mandaty: 9,\n    glosy2019: 347088,\n    wynik2019: {\n      KO: 14.0,\n      KONF: 7.11,\n      PSL: 13.35,\n      PIS: 59.59,\n      LEWICA: 5.94,\n    },\n  },\n  {\n    nr: 16,\n    miasto: \"Płock\",\n    mandaty: 10,\n    glosy2019: 370561,\n    wynik2019: {\n      KO: 16.85,\n      KONF: 5.24,\n      PSL: 15.17,\n      PIS: 52.45,\n      LEWICA: 8.76,\n    },\n  },\n  {\n    nr: 17,\n    miasto: \"Radom\",\n    mandaty: 9,\n    glosy2019: 335009,\n    wynik2019: {\n      KO: 17.15,\n      KONF: 5.89,\n      PSL: 10.2,\n      PIS: 57.82,\n      LEWICA: 7.43,\n    },\n  },\n  {\n    nr: 18,\n    miasto: \"Siedlce\",\n    mandaty: 12,\n    glosy2019: 452906,\n    wynik2019: {\n      KO: 13.94,\n      KONF: 6.49,\n      PSL: 11.94,\n      PIS: 59.76,\n      LEWICA: 6.45,\n    },\n  },\n  {\n    nr: 19,\n    miasto: \"Warszawa I\",\n    mandaty: 20,\n    glosy2019: 1381917,\n    wynik2019: {\n      KO: 42.05,\n      KONF: 7.51,\n      PSL: 4.75,\n      PIS: 27.49,\n      LEWICA: 18.19,\n    },\n  },\n  {\n    nr: 20,\n    miasto: \"Warszawa II\",\n    mandaty: 12,\n    glosy2019: 598727,\n    wynik2019: {\n      KO: 28.61,\n      KONF: 6.63,\n      PSL: 8.6,\n      PIS: 40.89,\n      LEWICA: 13.09,\n    },\n  },\n  {\n    nr: 21,\n    miasto: \"Opole\",\n    mandaty: 11,\n    glosy2019: 406439,\n    wynik2019: {\n      KO: 26.71,\n      KONF: 5.7,\n      PSL: 10.31,\n      PIS: 37.64,\n      LEWICA: 11.74,\n    },\n  },\n  {\n    nr: 22,\n    miasto: \"Krosno\",\n    mandaty: 11,\n    glosy2019: 390581,\n    wynik2019: {\n      KO: 15.94,\n      KONF: 6.81,\n      PSL: 7.85,\n      PIS: 63.36,\n      LEWICA: 6.04,\n    },\n  },\n  {\n    nr: 23,\n    miasto: \"Rzeszów\",\n    mandaty: 15,\n    glosy2019: 588786,\n    wynik2019: {\n      KO: 14.39,\n      KONF: 8.25,\n      PSL: 7.79,\n      PIS: 62.38,\n      LEWICA: 6.59,\n    },\n  },\n  {\n    nr: 24,\n    miasto: \"Białystok\",\n    mandaty: 14,\n    glosy2019: 520578,\n    wynik2019: {\n      KO: 21.04,\n      KONF: 6.96,\n      PSL: 9.33,\n      PIS: 52.04,\n      LEWICA: 9.09,\n    },\n  },\n  {\n    nr: 25,\n    miasto: \"Gdańsk\",\n    mandaty: 12,\n    glosy2019: 528829,\n    wynik2019: {\n      KO: 41.31,\n      KONF: 7.21,\n      PSL: 5.9,\n      PIS: 32.1,\n      LEWICA: 13.47,\n    },\n  },\n  {\n    nr: 26,\n    miasto: \"Gdynia\",\n    mandaty: 14,\n    glosy2019: 580722,\n    wynik2019: {\n      KO: 35.85,\n      KONF: 7.3,\n      PSL: 7.94,\n      PIS: 36.43,\n      LEWICA: 12.47,\n    },\n  },\n  {\n    nr: 27,\n    miasto: \"Bielsko-Biała\",\n    mandaty: 9,\n    glosy2019: 389256,\n    wynik2019: {\n      KO: 27.2,\n      KONF: 7.42,\n      PSL: 7.13,\n      PIS: 46.76,\n      LEWICA: 11.48,\n    },\n  },\n  {\n    nr: 28,\n    miasto: \"Częstochowa\",\n    mandaty: 7,\n    glosy2019: 284517,\n    wynik2019: {\n      KO: 22.63,\n      KONF: 6.07,\n      PSL: 8.68,\n      PIS: 44.28,\n      LEWICA: 15.59,\n    },\n  },\n  {\n    nr: 29,\n    miasto: \"Gliwice\",\n    mandaty: 9,\n    glosy2019: 340647,\n    wynik2019: {\n      KO: 32.61,\n      KONF: 7.67,\n      PSL: 5.99,\n      PIS: 37.75,\n      LEWICA: 13.38,\n    },\n  },\n  {\n    nr: 30,\n    miasto: \"Rybnik\",\n    mandaty: 9,\n    glosy2019: 333836,\n    wynik2019: {\n      KO: 27.71,\n      KONF: 7.17,\n      PSL: 5.64,\n      PIS: 48.28,\n      LEWICA: 9.68,\n    },\n  },\n  {\n    nr: 31,\n    miasto: \"Katowice\",\n    mandaty: 12,\n    glosy2019: 469633,\n    wynik2019: {\n      KO: 37.2,\n      KONF: 7.33,\n      PSL: 4.37,\n      PIS: 39.19,\n      LEWICA: 11.92,\n    },\n  },\n  {\n    nr: 32,\n    miasto: \"Sosnowiec\",\n    mandaty: 9,\n    glosy2019: 335431,\n    wynik2019: {\n      KO: 29.66,\n      KONF: 6.45,\n      PSL: 4.85,\n      PIS: 37.13,\n      LEWICA: 21.9,\n    },\n  },\n  {\n    nr: 33,\n    miasto: \"Kielce\",\n    mandaty: 16,\n    glosy2019: 569891,\n    wynik2019: {\n      KO: 16.65,\n      KONF: 5.95,\n      PSL: 9.88,\n      PIS: 55.18,\n      LEWICA: 9.95,\n    },\n  },\n  {\n    nr: 34,\n    miasto: \"Elbląg\",\n    mandaty: 8,\n    glosy2019: 250819,\n    wynik2019: {\n      KO: 28.43,\n      KONF: 5.66,\n      PSL: 10.89,\n      PIS: 40.86,\n      LEWICA: 11.64,\n    },\n  },\n  {\n    nr: 35,\n    miasto: \"Olsztyn\",\n    mandaty: 10,\n    glosy2019: 331684,\n    wynik2019: {\n      KO: 26.46,\n      KONF: 6.97,\n      PSL: 13.19,\n      PIS: 38.82,\n      LEWICA: 13.84,\n    },\n  },\n  {\n    nr: 36,\n    miasto: \"Kalisz\",\n    mandaty: 12,\n    glosy2019: 459152,\n    wynik2019: {\n      KO: 24.72,\n      KONF: 6.57,\n      PSL: 12.8,\n      PIS: 42.48,\n      LEWICA: 13.43,\n    },\n  },\n  {\n    nr: 37,\n    miasto: \"Konin\",\n    mandaty: 9,\n    glosy2019: 353041,\n    wynik2019: {\n      KO: 20.48,\n      KONF: 6.74,\n      PSL: 9.81,\n      PIS: 47.29,\n      LEWICA: 15.04,\n    },\n  },\n  {\n    nr: 38,\n    miasto: \"Piła\",\n    mandaty: 9,\n    glosy2019: 349051,\n    wynik2019: {\n      KO: 30.6,\n      KONF: 6.62,\n      PSL: 13.86,\n      PIS: 35.64,\n      LEWICA: 13.28,\n    },\n  },\n  {\n    nr: 39,\n    miasto: \"Poznań\",\n    mandaty: 10,\n    glosy2019: 514527,\n    wynik2019: {\n      KO: 45.38,\n      KONF: 6.61,\n      PSL: 6.2,\n      PIS: 25.33,\n      LEWICA: 16.49,\n    },\n  },\n  {\n    nr: 40,\n    miasto: \"Koszalin\",\n    mandaty: 8,\n    glosy2019: 271711,\n    wynik2019: {\n      KO: 32.31,\n      KONF: 5.98,\n      PSL: 9.43,\n      PIS: 36.83,\n      LEWICA: 15.44,\n    },\n  },\n  {\n    nr: 41,\n    miasto: \"Szczecin\",\n    mandaty: 12,\n    glosy2019: 470529,\n    wynik2019: {\n      KO: 35.71,\n      KONF: 6.53,\n      PSL: 7.4,\n      PIS: 35.11,\n      LEWICA: 15.25,\n    },\n  },\n];\n\n// [KO,KONF,PSL,PIS,SLD],\nexport const glosy2019 = [\n[108191,25319,31006,183364,71061],\n[90812,15346,20528,114728,34957],\n[214629,48775,42269,226915,100843],\n[142844,32406,41497,167550,69763],\n[119526,28625,49225,182648,67076],\n[109185,40012,51474,313284,44152],\n[59401,23439,47604,238802,27404],\n[136955,31490,50943,150188,68341],\n[148830,27627,18828,136731,83524],\n[54160,23427,36151,194658,37930],\n[94268,27054,47373,229245,55116],\n[72869,22334,24996,169106,26909],\n[197930,51855,47219,256847,84457],\n[51183,25747,27203,243583,22483],\n[48597,24695,46333,206845,20618],\n[62429,19405,56227,194371,32448],\n[57449,19724,34185,193709,24884],\n[63124,29390,54085,270641,29235],\n[581077,103843,65683,379880,251434],\n[171286,39675,51484,244823,78348],\n[108570,23176,41901,152999,47699],\n[62246,26615,30655,247488,23577],\n[84703,48600,45868,367268,38817],\n[109527,36207,48566,270888,47342],\n[218484,38153,31203,169753,71236],\n[208208,42364,46132,211582,72436],\n[105876,28900,27752,182027,44701],\n[64374,17278,24704,125990,44354],\n[111078,26114,20408,128579,45583],\n[92493,23939,18816,161160,32300],\n[174683,34416,20512,184030,55992],\n[99499,21650,16263,124553,73466],\n[94880,33895,56289,314455,56699],\n[71320,14187,27319,102478,29196],\n[87780,23134,43758,128760,45912],\n[113489,30177,58759,195053,61674],\n[72295,23810,34620,166965,53090],\n[106810,23123,48371,124392,46355],\n[233474,34024,31875,130319,84835],\n[87799,16259,25632,100078,41943],\n[168022,30744,34807,165200,71756]]\n\nconst glosy2019Procent = glosy2019.map((arr) => {\n  const dzielnik = (arr[0] + arr[1] + arr[2] + arr[3] + arr[4]) / 100;\n  return {\n    KO: arr[0] / dzielnik,\n    KONF: arr[1] / dzielnik,\n    PSL: arr[2] / dzielnik,\n    PIS: arr[3] / dzielnik,\n    SLD: arr[4] / dzielnik,\n  };\n});\n\nexport const glosy2019WgOkregu = {};\nlet i = 0;\nglosy2019Procent.forEach((wynik) => {\n  glosy2019WgOkregu[okregi[i].miasto] = {\n    KO: glosy2019[i][0],\n    KONF: glosy2019[i][1],\n    PSL: glosy2019[i][2],\n    PIS: glosy2019[i][3],\n    SLD: glosy2019[i][4],\n  };\n  PodzialMandatowWOkregu(wynik, okregi[i], { log: true });\n  i++;\n});\n","import { glosy2019, glosy2019WgOkregu, okregi, sondazeDoSredniej, sredniaSondazy, wybory2019 } from \"./dane\";\nimport {\n  Histogram,\n  ILE_SYMULACJI,\n  Okreg,\n  PoparciePartii,\n  Sondaze,\n  Wynik,\n  WynikDemo,\n  WynikPolDemo,\n} from \"./typy\";\n\nimport random from \"random\";\nimport { sortObjectByValues, sortedStringify } from \"./util\";\nimport { ROZKLAD } from \"./rozklad_w_okregach\";\n\n// Do jakich wartości +- od środka uwzględniać wartości, żeby wykres nie był zbyt szeroki.\nconst ZAKRES_DOL = 2.5\nconst ZAKRES_GORA = 3;\n\nexport function NaPolDemo(wynik: Wynik): WynikPolDemo {\n  return {\n    KO: wynik.KO,\n    LEWICA: (wynik.LEWICA || 0),\n    TD: (wynik.TD || 0),\n    NIEDEMO: wynik.PIS + (wynik.KONF || 0),\n  };\n}\n\nexport function NaDemo(wynik: Wynik): WynikDemo {\n  return {\n    DEMO: wynik.KO + (wynik.LEWICA || 0) + (wynik.TD || 0),\n    NIEDEMO: wynik.PIS + (wynik.KONF || 0),\n  };\n}\n\nlet glosyTD = 0;\nlet glosyMnoznikTD = 0;\n\n// export function PoparcieWOkreguOLD(wynik: Wynik, okreg: Okreg): Wynik {\n//   const wynikWOkregu: Wynik = {};\n//   let sumaProcentowWOkregu = 0;\n//   for (const [partia, procent] of Object.entries(wynik)) {\n//     let mnoznik = 1;\n//     if (partia === \"TD\") {\n//       mnoznik =\n//         (okreg.wynik2019.PSL! / wybory2019.PSL! +\n//           okreg.wynik2019.KO! / wybory2019.KO!) /\n//         2;\n//       wynikWOkregu.TD = wynik.TD! * mnoznik;\n//       glosyTD += (wynik.TD! * okreg.glosy2019) / 100;\n//       glosyMnoznikTD += (wynik.TD! * mnoznik * okreg.glosy2019) / 100;\n//     } else {\n//       mnoznik =\n//         wynik[partia as keyof Wynik]! / wybory2019[partia as keyof Wynik]!;\n//       wynikWOkregu[partia as keyof Wynik] =\n//         (okreg.wynik2019[partia as keyof Wynik] ||\n//           wynik[partia as keyof Wynik]!) * mnoznik;\n//     }\n//     sumaProcentowWOkregu += wynikWOkregu[partia as keyof Wynik];\n//   }\n//   return wynikWOkregu;\n// }\n\nexport function PoparcieWOkregu(wynik: Wynik, okreg: Okreg): { wynikWOkregu: Wynik, odchylenieWOkregu: Wynik} {\n  const wynikWOkregu: Wynik = {};\n  const odchylenieWOkregu: Wynik = {};\n  for (const [partia, procent] of Object.entries(wynik)) {\n    wynikWOkregu[partia] = procent * ROZKLAD[partia][okreg.nr - 1];\n    odchylenieWOkregu[partia] = odchylenie(partia, procent, okreg.nr);\n  }\n  return { wynikWOkregu, odchylenieWOkregu };\n}\n\nexport function PodzialMandatowKraj(wynik: Wynik) {\n  glosyTD = 0;\n  glosyMnoznikTD = 0;\n  const mandatyWKraju: Wynik = {\n    PIS: 0,\n    KO: 0,\n    LEWICA: 0,\n    TD: 0,\n    KONF: 0,\n  };\n  for (const okreg of okregi) {\n    const wynikWOkregu = PoparcieWOkregu(wynik, okreg).wynikWOkregu;\n    const mandatyWOkregu = PodzialMandatowWOkregu(wynikWOkregu, okreg);\n    for (const [partia, mandaty] of Object.entries(mandatyWOkregu)) {\n      mandatyWKraju[partia as keyof Wynik] += mandaty;\n    }\n  }\n  return mandatyWKraju;\n}\n\nexport function PodzialMandatowWOkregu(\n  wynik: Wynik,\n  okreg: Okreg,\n  options?: { log: boolean }\n): Wynik {\n  const dhont: {partia: string, iloraz: number, nrMandatu: number}[] = [];\n  for (const [partia, procent] of Object.entries(wynik)) {\n    for (let i = 1; i <= 12; i++) {\n      dhont.push({ partia, iloraz: procent / i, nrMandatu: i });\n    }\n  }\n  const posortowanyDhont = dhont.sort((a, b) => {\n    return b.iloraz - a.iloraz;\n  });\n  const ostatniWzietyMandat = posortowanyDhont[okreg.mandaty - 1];\n  const pierwszyNiewzietyMandat = posortowanyDhont[okreg.mandaty];\n\n  const glosyWOkregu2019 = glosy2019[okreg.nr - 1].reduce(\n    (accumulator: number, currentValue: number): number => {\n      return accumulator + currentValue;\n    },\n    0\n  );\n\n  const podzial: Wynik = posortowanyDhont\n    .slice(0, okreg.mandaty)\n    .map((x) => x.partia)\n    .reduce((acc, cur) => {\n      acc[cur] ? acc[cur]++ : (acc[cur] = 1);\n      return acc;\n    }, {});\n  podzial.cenaMandatu = Math.round(\n    ostatniWzietyMandat.iloraz / 100 * glosyWOkregu2019\n  );\n\n  // Opcjonalna sekcja\n  for (const d of dhont.filter((value) => value.iloraz + 0.001 > ostatniWzietyMandat.iloraz)) {\n    const glosy = d.iloraz * d.nrMandatu;\n    const resztaUlamek = Math.round(10000 * (glosy % ostatniWzietyMandat.iloraz) / ostatniWzietyMandat.iloraz) / 1000;\n    console.log(wynik, okreg, glosy, ostatniWzietyMandat.iloraz, resztaUlamek);\n    if (!podzial[`${d.partia}_zagrozenie`]) {\n      podzial[`${d.partia}_zagrozenie`] =\n        resztaUlamek < 0.20 && resztaUlamek > 0;\n    }\n    if (!podzial[`${d.partia}_ostatnie`]) {\n      podzial[`${d.partia}_ostatnie`] = resztaUlamek === 0;\n    }\n    if (!podzial[`${d.partia}_dawca`]) {\n      podzial[`${d.partia}_dawca`] = resztaUlamek < 0.75 && resztaUlamek > 0.25;\n    }\n  }\n  for (const d of dhont.filter(\n    (value) => value.iloraz < ostatniWzietyMandat.iloraz\n  )) {\n    const glosy = d.iloraz * d.nrMandatu;\n    console.log(wynik, okreg, glosy, ostatniWzietyMandat.iloraz);\n    if (!podzial[`${d.partia}_szansa`]) {\n      podzial[`${d.partia}_szansa`] =\n        (glosy % ostatniWzietyMandat.iloraz) / ostatniWzietyMandat.iloraz >\n        0.8;\n    }\n  }\n\n  // if (options?.log) {\n  //   console.log(\n  //     `W okręgu ${okreg.miasto} różnica głosów potrzebna żeby zmienić wynik wynosiła ${roznica}. Liczymy to jako różnicę między ostatnim wprowadzonym posłem (mandat numer #${ostatniWzietyMandat.nrMandatu} \n  //     dla ${ostatniWzietyMandat.partia}) a pierwszym niebiorącym miejscem (byłby to mandat #${pierwszyNiewzietyMandat.nrMandatu} \n  //     dla ${pierwszyNiewzietyMandat.partia}). Wyliczamy to dzieląc ilorazy (${ilorazBioracy} /\n  //     ${ilorazNiebioracy}) i mnożąc przez ${pierwszyNiewzietyMandat.nrMandatu}, bo byłby to mandat numer ${pierwszyNiewzietyMandat.nrMandatu} dla ${pierwszyNiewzietyMandat.partia} w tym okręgu.`\n  //   );\n  // }\n  return podzial;\n}\n\nfunction czestoscNaProcentSymulacji(value: number) {\n  return (Math.round(1000 * (value / ILE_SYMULACJI)) / 10).toString() + \"%\";\n}\n\nexport function odchylenie(partia: string, procent: number, okreg: number) {\n  // https://chat.openai.com/share/30b1d901-30b1-46bb-af91-a831affbc3e7\n  const bladProporcji = Math.sqrt(\n    ((procent / 100) * (1 - procent / 100)) /\n      (1000 * Object.entries(sondazeDoSredniej).length)\n  );\n\n  // Mnożymy przez sqrt(5), żeby przeliczyć bląd statystyczny z wykresu na odchylenie standardowe. Potem przeliczamy na punkty procentowe.\n  const bladOdchyleniaWRegionie =\n    ROZKLAD[`${partia}_BLAD`][okreg - 1] * Math.sqrt(5) * (procent / 100);\n  // return (100 * bladProporcji) + (ROZKLAD[`${partia}_BLAD`][okreg - 1] * Math.sqrt(5));\n\n  // sumowanie odchylen standardowych: https://chat.openai.com/share/81cdfe04-09b5-45b6-8624-b3d402b12a60\n  return Math.sqrt(\n    100 * bladProporcji * (100 * bladProporcji) +\n      bladOdchyleniaWRegionie * bladOdchyleniaWRegionie\n  );\n}\n\nexport function NormalizujWynik(wynik: Wynik):Wynik {\n  const suma = wynik.KO + wynik.PIS + wynik.TD + wynik.KONF + wynik.LEWICA;\n  const mnożnik = 100/suma;\n  return {\n    PIS: wynik.PIS * mnożnik,\n    KO: wynik.KO * mnożnik,\n    TD: wynik.TD * mnożnik,\n    KONF: wynik.KONF * mnożnik,\n    LEWICA: wynik.LEWICA * mnożnik,\n  }\n}\n\nexport function RozkladPrawdopodobienstwaWOkregu(\n  wynik: Wynik,\n  okreg: Okreg\n): {\n  procentyWOkreguSrednia: Wynik;\n  odchylenieWOkregu: Wynik,\n  wykresRozkladu: Sondaze;\n  wykresRozkladuDemo: Sondaze;\n  histogram: Histogram;\n  minimumMandatow: Wynik;\n  ostatnieMandaty: Wynik; // reszta 0\n  zagrozoneMandaty: Wynik; // reszta (0, 25%)\n  potencjalneMandaty: Wynik; // reszta (75%, 99.99%)\n  dawcyGlosow: Wynik; // reszta (30%, 70%)\n} {\n  const { wynikWOkregu, odchylenieWOkregu } = PoparcieWOkregu(wynik, okreg);\n  const procentyWOkreguSrednia = NormalizujWynik(wynikWOkregu);\n  const rozklad = {};\n  const rozkladDemo = {};\n  const histogram: Histogram = {};\n  const minimumMandatow: Wynik = {\n    KO: 100,\n    TD: 100,\n    LEWICA: 100,\n  };\n  const zagrozoneMandaty: Wynik = {\n    KO: 0,\n    TD: 0,\n    LEWICA: 0,\n  };\n  const potencjalneMandaty: Wynik = {\n    KO: 0,\n    TD: 0,\n    LEWICA: 0,\n  };\n  const ostatnieMandaty: Wynik = {\n    KO: 0,\n    TD: 0,\n    LEWICA: 0,\n  };\n  const dawcyGlosow: Wynik = {\n    KO: 0,\n    TD: 0,\n    LEWICA: 0,\n  };\n\n  const bucketFn = (num, bucket) => Math.round(num * bucket) / bucket;\n\n  for (let i = 1; i <= ILE_SYMULACJI; i++) {\n    // Losowanie poparcia dla partii\n    let glosyWOkreguLosoweUncapped: Wynik = {};\n    for (const [partia, procent] of Object.entries(procentyWOkreguSrednia)) {\n      const wynikLosowyUncapped = Math.max(random.normal(\n        procent,\n        odchylenieWOkregu[partia]\n      )(), 0);\n      // Przytnijmy procent głosów do +- ZAKRES od wartości oczekiwanej, ale nie mniej niż zero procent głosów :)\n      glosyWOkreguLosoweUncapped[partia as keyof Wynik] = wynikLosowyUncapped;\n    }\n    glosyWOkreguLosoweUncapped = NormalizujWynik(glosyWOkreguLosoweUncapped);\n    let glosyWOkreguLosoweCapped: Wynik = {};\n    for (const [partia, procent] of Object.entries(\n      glosyWOkreguLosoweUncapped\n    )) {\n      // Musimy używać tego samego odchylenia w każdej symulacji do cappowania\n      const procentOczekiwany = procentyWOkreguSrednia[partia];\n      const stddev = odchylenieWOkregu[partia];\n      const wynikLosowyCapped = bucketFn(\n        Math.max(\n          Math.min(procent, procentOczekiwany + stddev * ZAKRES_GORA),\n          Math.max(procentOczekiwany - stddev * ZAKRES_DOL, 0)\n        ),\n        5\n      );\n      glosyWOkreguLosoweCapped[partia as keyof Wynik] = wynikLosowyCapped;\n    }\n    // Podział mandatów\n    const mandatyWOkregu = PodzialMandatowWOkregu(\n      glosyWOkreguLosoweUncapped,\n      okreg\n    );\n    // info dla wykresów\n    minimumMandatow.KO > (mandatyWOkregu.KO || 0)\n      ? (minimumMandatow.KO = mandatyWOkregu.KO || 0)\n      : null;\n    minimumMandatow.LEWICA > (mandatyWOkregu.LEWICA || 0)\n      ? (minimumMandatow.LEWICA = mandatyWOkregu.LEWICA || 0)\n      : null;\n    minimumMandatow.TD > (mandatyWOkregu.TD || 0)\n      ? (minimumMandatow.TD = mandatyWOkregu.TD || 0)\n      : null;\n\n    const str = sortedStringify(NaPolDemo(mandatyWOkregu));\n    const strDemo = sortedStringify(NaDemo(mandatyWOkregu));\n    rozklad[str] ? rozklad[str]++ : (rozklad[str] = 1);\n    rozkladDemo[strDemo] ? rozkladDemo[strDemo]++ : (rozkladDemo[strDemo] = 1);\n    // Zapisanie mandatów w histogramie\n    for (const [partia, procent] of Object.entries(glosyWOkreguLosoweCapped)) {\n      if (!histogram[partia]) {\n        histogram[partia] = {};\n      }\n      if (!histogram[partia][String(procent)]) {\n        histogram[partia][String(procent)] = {};\n      }\n      // Dodajemy czestosc dla danej ilości mandatów dla danego procentu ze wszystkich symulacji.\n      const mandaty = String(mandatyWOkregu[partia] || 0);\n      histogram[partia][String(procent)][mandaty]\n        ? (histogram[partia][String(procent)][mandaty] += 1)\n        : (histogram[partia][String(procent)][mandaty] = 1);\n    }\n    // Liczenie sytuacji zagrożenia/szansy\n    if (mandatyWOkregu.KO_zagrozenie) {\n      zagrozoneMandaty.KO++;\n    }\n    if (mandatyWOkregu.TD_zagrozenie) {\n      zagrozoneMandaty.TD++;\n    }\n    if (mandatyWOkregu.LEWICA_zagrozenie) {\n      zagrozoneMandaty.LEWICA++;\n    }\n\n    if (mandatyWOkregu.KO_szansa) {\n      potencjalneMandaty.KO++;\n    }\n    if (mandatyWOkregu.TD_szansa) {\n      potencjalneMandaty.TD++;\n    }\n    if (mandatyWOkregu.LEWICA_szansa) {\n      potencjalneMandaty.LEWICA++;\n    }\n\n    if (mandatyWOkregu.KO_dawca) {\n      dawcyGlosow.KO++;\n    }\n    if (mandatyWOkregu.TD_dawca) {\n      dawcyGlosow.TD++;\n    }\n    if (mandatyWOkregu.LEWICA_dawca) {\n      dawcyGlosow.LEWICA++;\n    }\n\n    if (mandatyWOkregu.KO_ostatnie) {\n      ostatnieMandaty.KO++;\n    }\n    if (mandatyWOkregu.TD_ostatnie) {\n      ostatnieMandaty.TD++;\n    }\n    if (mandatyWOkregu.LEWICA_ostatnie) {\n      ostatnieMandaty.LEWICA++;\n    }\n  } // end of ILE_SYMULACJI loop\n\n  const wykresRozkladu: Sondaze = {};\n  sortObjectByValues(rozklad)\n    .slice(0, 12)\n    .forEach(({ key, value }) => {\n      wykresRozkladu[czestoscNaProcentSymulacji(value)] = JSON.parse(\n        key\n      ) as Wynik;\n    });\n\n  const wykresRozkladuDemo: Sondaze = {};\n  sortObjectByValues(rozkladDemo)\n    .slice(0, 3)\n    .forEach(({ key, value }) => {\n      wykresRozkladuDemo[czestoscNaProcentSymulacji(value)] = JSON.parse(\n        key\n      ) as Wynik;\n    });\n\n  return {\n    procentyWOkreguSrednia,\n    odchylenieWOkregu,\n    wykresRozkladu,\n    wykresRozkladuDemo,\n    histogram,\n    // W Warszawie mamy b. szeroki zakres możliwości, szczególnie dla KO i Lewicy, podbijamy więc tam minimalne mandaty, żeby wykres wyglądał lepiej\n    minimumMandatow: {\n      ...minimumMandatow,\n      KO: okreg.nr === 19 ? 8 : minimumMandatow.KO,\n      LEWICA: okreg.nr === 19 ? 2 : minimumMandatow.LEWICA,\n    },\n    zagrozoneMandaty,\n    potencjalneMandaty,\n    ostatnieMandaty,\n    dawcyGlosow,\n  };\n}\n","export interface Wynik {\n  PIS?: number;\n  KO?: number;\n  TD?: number;\n  LEWICA?: number;\n  KONF?: number;\n  BS?: number;\n  PJJ?: number;\n  PSL?: number;\n  KO_zagrozenie?: boolean;\n  TD_zagrozenie?: boolean;\n  LEWICA_zagrozenie?: boolean;\n  KO_szansa?: boolean;\n  TD_szansa?: boolean;\n  LEWICA_szansa?: boolean;\n  KO_ostatnie?: boolean;\n  TD_ostatnie?: boolean;\n  LEWICA_ostatnie?: boolean;\n  KO_dawca?: boolean;\n  TD_dawca?: boolean;\n  LEWICA_dawca?: boolean;\n  denominator?: number;\n  cenaMandatu?: number;\n}\n\nexport interface WynikPolDemo {\n  KO: number;\n  TD: number;\n  LEWICA: number;\n  NIEDEMO: number;\n}\n\nexport interface WynikDemo {\n  DEMO: number;\n  NIEDEMO: number;\n}\n\nexport interface Sondaze {\n  [sondaz: string]: Wynik | WynikDemo;\n}\n\nexport type Okreg = {\n  nr: number;\n  miasto: string;\n  mandaty: number;\n  wynik2019: Wynik;\n  glosy2019?: number;\n};\n\nexport interface CzestoscMandatow {\n  [mandaty: string]: number;\n}\n\nexport interface PoparciePartii {\n  [procent: string]: CzestoscMandatow;\n}\n\nexport interface Histogram {\n  [partia: string]: PoparciePartii;\n}\n\nexport type Rekomendacja = {\n  nrOkregu: number;\n  nazwaOkregu: string;\n  rekomendacjePartii: string[];\n}\n\nexport interface Rekomendacje {\n  [okreg: string]: Rekomendacja;\n}\n\n\nexport const ILE_SYMULACJI = 1;","import seedrandom from 'seedrandom';\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar RNG = /*#__PURE__*/function () {\n  function RNG() {}\n  var _proto = RNG.prototype;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _proto._seed = function _seed(seed, _opts) {\n    // TODO: add entropy and stuff\n    if (seed === (seed || 0)) {\n      return seed;\n    } else {\n      var strSeed = '' + seed;\n      var s = 0;\n      for (var k = 0; k < strSeed.length; ++k) {\n        s ^= strSeed.charCodeAt(k) | 0;\n      }\n      return s;\n    }\n  };\n  return RNG;\n}();\n\nvar RNGFunction = /*#__PURE__*/function (_RNG) {\n  _inheritsLoose(RNGFunction, _RNG);\n  function RNGFunction(thunk, opts) {\n    var _this;\n    _this = _RNG.call(this) || this;\n    _this._rng = void 0;\n    _this.seed(thunk, opts);\n    return _this;\n  }\n  var _proto = RNGFunction.prototype;\n  _proto.next = function next() {\n    return this._rng();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ;\n  _proto.seed = function seed(thunk, _opts) {\n    this._rng = thunk;\n  };\n  _proto.clone = function clone(_, opts) {\n    return new RNGFunction(this._rng, opts);\n  };\n  _createClass(RNGFunction, [{\n    key: \"name\",\n    get: function get() {\n      return 'function';\n    }\n  }]);\n  return RNGFunction;\n}(RNG);\n\n/**\r\n * Construct an RNG with variable inputs. Used in calls to Random constructor\r\n * @param {...*} args - Distribution-specific arguments\r\n * @return RNG\r\n *\r\n * @example\r\n * new Random(RNGFactory(...args))\r\n */\nvar RNGFactory = (function () {\n  var args = [].slice.call(arguments);\n  var _args = args,\n    _args$ = _args[0],\n    arg0 = _args$ === void 0 ? 'default' : _args$;\n  switch (typeof arg0) {\n    case 'object':\n      if (arg0 instanceof RNG) {\n        return arg0;\n      }\n      break;\n    case 'function':\n      return new RNGFunction(arg0);\n    case 'number':\n    case 'string':\n    default:\n      return new RNGFunction(seedrandom.apply(void 0, args));\n  }\n  throw new Error(\"invalid RNG \\\"\" + arg0 + \"\\\"\");\n});\n\nvar uniform = (function (random, min, max) {\n  if (min === void 0) {\n    min = 0;\n  }\n  if (max === void 0) {\n    max = 1;\n  }\n  return function () {\n    return random.next() * (max - min) + min;\n  };\n});\n\nfunction numberValidator(num) {\n  return new NumberValidator(num);\n}\nvar NumberValidator = function NumberValidator(num) {\n  var _this = this;\n  this.n = void 0;\n  this.isInt = function () {\n    if (Number.isInteger(_this.n)) {\n      return _this;\n    }\n    throw new Error(\"Expected number to be an integer, got \" + _this.n);\n  };\n  this.isPositive = function () {\n    if (_this.n > 0) {\n      return _this;\n    }\n    throw new Error(\"Expected number to be positive, got \" + _this.n);\n  };\n  this.lessThan = function (v) {\n    if (_this.n < v) {\n      return _this;\n    }\n    throw new Error(\"Expected number to be less than \" + v + \", got \" + _this.n);\n  };\n  this.greaterThanOrEqual = function (v) {\n    if (_this.n >= v) {\n      return _this;\n    }\n    throw new Error(\"Expected number to be greater than or equal to \" + v + \", got \" + _this.n);\n  };\n  this.greaterThan = function (v) {\n    if (_this.n > v) {\n      return _this;\n    }\n    throw new Error(\"Expected number to be greater than \" + v + \", got \" + _this.n);\n  };\n  this.n = num;\n};\n\nvar uniformInt = (function (random, min, max) {\n  if (min === void 0) {\n    min = 0;\n  }\n  if (max === void 0) {\n    max = 1;\n  }\n  if (max === undefined) {\n    max = min === undefined ? 1 : min;\n    min = 0;\n  }\n  numberValidator(min).isInt();\n  numberValidator(max).isInt();\n  return function () {\n    return Math.floor(random.next() * (max - min + 1) + min);\n  };\n});\n\nvar uniformBoolean = (function (random) {\n  return function () {\n    return random.next() >= 0.5;\n  };\n});\n\nvar normal = (function (random, mu, sigma) {\n  if (mu === void 0) {\n    mu = 0;\n  }\n  if (sigma === void 0) {\n    sigma = 1;\n  }\n  return function () {\n    var x, y, r;\n    do {\n      x = random.next() * 2 - 1;\n      y = random.next() * 2 - 1;\n      r = x * x + y * y;\n    } while (!r || r > 1);\n    return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\n  };\n});\n\nvar logNormal = (function (random, mu, sigma) {\n  if (mu === void 0) {\n    mu = 0;\n  }\n  if (sigma === void 0) {\n    sigma = 1;\n  }\n  var normal = random.normal(mu, sigma);\n  return function () {\n    return Math.exp(normal());\n  };\n});\n\nvar bernoulli = (function (random, p) {\n  if (p === void 0) {\n    p = 0.5;\n  }\n  numberValidator(p).greaterThanOrEqual(0).lessThan(1);\n  return function () {\n    return Math.floor(random.next() + p);\n  };\n});\n\nvar binomial = (function (random, n, p) {\n  if (n === void 0) {\n    n = 1;\n  }\n  if (p === void 0) {\n    p = 0.5;\n  }\n  numberValidator(n).isInt().isPositive();\n  numberValidator(p).greaterThanOrEqual(0).lessThan(1);\n  return function () {\n    var i = 0;\n    var x = 0;\n    while (i++ < n) {\n      if (random.next() < p) {\n        x++;\n      }\n    }\n    return x;\n  };\n});\n\nvar geometric = (function (random, p) {\n  if (p === void 0) {\n    p = 0.5;\n  }\n  numberValidator(p).greaterThan(0).lessThan(1);\n  var invLogP = 1.0 / Math.log(1.0 - p);\n  return function () {\n    return Math.floor(1 + Math.log(random.next()) * invLogP);\n  };\n});\n\nvar logFactorialTable = [0.0, 0.0, 0.69314718055994529, 1.791759469228055, 3.1780538303479458, 4.7874917427820458, 6.5792512120101012, 8.5251613610654147, 10.604602902745251, 12.801827480081469];\nvar logFactorial = function logFactorial(k) {\n  return logFactorialTable[k];\n};\nvar logSqrt2PI = 0.91893853320467267;\nvar poisson = (function (random, lambda) {\n  if (lambda === void 0) {\n    lambda = 1;\n  }\n  numberValidator(lambda).isPositive();\n  if (lambda < 10) {\n    // inversion method\n    var expMean = Math.exp(-lambda);\n    return function () {\n      var p = expMean;\n      var x = 0;\n      var u = random.next();\n      while (u > p) {\n        u = u - p;\n        p = lambda * p / ++x;\n      }\n      return x;\n    };\n  } else {\n    // generative method\n    var smu = Math.sqrt(lambda);\n    var b = 0.931 + 2.53 * smu;\n    var a = -0.059 + 0.02483 * b;\n    var invAlpha = 1.1239 + 1.1328 / (b - 3.4);\n    var vR = 0.9277 - 3.6224 / (b - 2);\n    return function () {\n      while (true) {\n        var u = void 0;\n        var v = random.next();\n        if (v <= 0.86 * vR) {\n          u = v / vR - 0.43;\n          return Math.floor((2 * a / (0.5 - Math.abs(u)) + b) * u + lambda + 0.445);\n        }\n        if (v >= vR) {\n          u = random.next() - 0.5;\n        } else {\n          u = v / vR - 0.93;\n          u = (u < 0 ? -0.5 : 0.5) - u;\n          v = random.next() * vR;\n        }\n        var us = 0.5 - Math.abs(u);\n        if (us < 0.013 && v > us) {\n          continue;\n        }\n        var k = Math.floor((2 * a / us + b) * u + lambda + 0.445);\n        v = v * invAlpha / (a / (us * us) + b);\n        if (k >= 10) {\n          var t = (k + 0.5) * Math.log(lambda / k) - lambda - logSqrt2PI + k - (1 / 12.0 - (1 / 360.0 - 1 / (1260.0 * k * k)) / (k * k)) / k;\n          if (Math.log(v * smu) <= t) {\n            return k;\n          }\n        } else if (k >= 0) {\n          var _logFactorial;\n          var f = (_logFactorial = logFactorial(k)) != null ? _logFactorial : 0;\n          if (Math.log(v) <= k * Math.log(lambda) - lambda - f) {\n            return k;\n          }\n        }\n      }\n    };\n  }\n});\n\nvar exponential = (function (random, lambda) {\n  if (lambda === void 0) {\n    lambda = 1;\n  }\n  numberValidator(lambda).isPositive();\n  return function () {\n    return -Math.log(1 - random.next()) / lambda;\n  };\n});\n\nvar irwinHall = (function (random, n) {\n  if (n === void 0) {\n    n = 1;\n  }\n  numberValidator(n).isInt().greaterThanOrEqual(0);\n  return function () {\n    var sum = 0;\n    for (var i = 0; i < n; ++i) {\n      sum += random.next();\n    }\n    return sum;\n  };\n});\n\nvar bates = (function (random, n) {\n  if (n === void 0) {\n    n = 1;\n  }\n  numberValidator(n).isInt().isPositive();\n  var irwinHall = random.irwinHall(n);\n  return function () {\n    return irwinHall() / n;\n  };\n});\n\nvar pareto = (function (random, alpha) {\n  if (alpha === void 0) {\n    alpha = 1;\n  }\n  numberValidator(alpha).greaterThanOrEqual(0);\n  var invAlpha = 1.0 / alpha;\n  return function () {\n    return 1.0 / Math.pow(1.0 - random.next(), invAlpha);\n  };\n});\n\nvar RNGMathRandom = /*#__PURE__*/function (_RNG) {\n  _inheritsLoose(RNGMathRandom, _RNG);\n  function RNGMathRandom() {\n    return _RNG.apply(this, arguments) || this;\n  }\n  var _proto = RNGMathRandom.prototype;\n  _proto.next = function next() {\n    return Math.random();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ;\n  _proto.seed = function seed(_seed, _opts) {\n    // intentionally empty\n  };\n  _proto.clone = function clone() {\n    return new RNGMathRandom();\n  };\n  _createClass(RNGMathRandom, [{\n    key: \"name\",\n    get: function get() {\n      return 'default';\n    }\n  }]);\n  return RNGMathRandom;\n}(RNG);\n\n/**\r\n * Seedable random number generator supporting many common distributions.\r\n *\r\n * Defaults to Math.random as its underlying pseudorandom number generator.\r\n *\r\n * @name Random\r\n * @class\r\n *\r\n * @param {RNG|function} [rng=Math.random] - Underlying pseudorandom number generator.\r\n */\nvar Random = /*#__PURE__*/function () {\n  function Random(rng) {\n    var _this = this;\n    this._rng = void 0;\n    this._patch = void 0;\n    this._cache = {};\n    this.next = function () {\n      return _this._rng.next();\n    };\n    this[\"float\"] = function (min, max) {\n      return _this.uniform(min, max)();\n    };\n    this[\"int\"] = function (min, max) {\n      return _this.uniformInt(min, max)();\n    };\n    this.integer = function (min, max) {\n      return _this.uniformInt(min, max)();\n    };\n    this.bool = function () {\n      return _this.uniformBoolean()();\n    };\n    this[\"boolean\"] = function () {\n      return _this.uniformBoolean()();\n    };\n    this.uniform = function (min, max) {\n      return _this._memoize('uniform', uniform, min, max);\n    };\n    this.uniformInt = function (min, max) {\n      return _this._memoize('uniformInt', uniformInt, min, max);\n    };\n    this.uniformBoolean = function () {\n      return _this._memoize('uniformBoolean', uniformBoolean);\n    };\n    this.normal = function (mu, sigma) {\n      return normal(_this, mu, sigma);\n    };\n    this.logNormal = function (mu, sigma) {\n      return logNormal(_this, mu, sigma);\n    };\n    this.bernoulli = function (p) {\n      return bernoulli(_this, p);\n    };\n    this.binomial = function (n, p) {\n      return binomial(_this, n, p);\n    };\n    this.geometric = function (p) {\n      return geometric(_this, p);\n    };\n    this.poisson = function (lambda) {\n      return poisson(_this, lambda);\n    };\n    this.exponential = function (lambda) {\n      return exponential(_this, lambda);\n    };\n    this.irwinHall = function (n) {\n      return irwinHall(_this, n);\n    };\n    this.bates = function (n) {\n      return bates(_this, n);\n    };\n    this.pareto = function (alpha) {\n      return pareto(_this, alpha);\n    };\n    if (rng && rng instanceof RNG) {\n      this.use(rng);\n    } else {\n      this.use(new RNGMathRandom());\n    }\n    this._cache = {};\n  }\n  /**\r\n   * @member {RNG} Underlying pseudo-random number generator\r\n   */\n  var _proto = Random.prototype;\n  /**\r\n   * Creates a new `Random` instance, optionally specifying parameters to\r\n   * set a new seed.\r\n   *\r\n   * @see RNG.clone\r\n   *\r\n   * @param {string} [seed] - Optional seed for new RNG.\r\n   * @param {object} [opts] - Optional config for new RNG options.\r\n   * @return {Random}\r\n   */\n  _proto.clone = function clone() {\n    var args = [].slice.call(arguments);\n    if (args.length) {\n      return new Random(RNGFactory.apply(void 0, args));\n    } else {\n      return new Random(this.rng.clone());\n    }\n  }\n  /**\r\n   * Sets the underlying pseudorandom number generator used via\r\n   * either an instance of `seedrandom`, a custom instance of RNG\r\n   * (for PRNG plugins), or a string specifying the PRNG to use\r\n   * along with an optional `seed` and `opts` to initialize the\r\n   * RNG.\r\n   *\r\n   * @example\r\n   * import random from 'random'\r\n   *\r\n   * random.use('example_seedrandom_string')\r\n   * // or\r\n   * random.use(seedrandom('kittens'))\r\n   * // or\r\n   * random.use(Math.random)\r\n   *\r\n   * @param {...*} args\r\n   */;\n  _proto.use = function use() {\n    this._rng = RNGFactory.apply(void 0, [].slice.call(arguments));\n  }\n  /**\r\n   * Patches `Math.random` with this Random instance's PRNG.\r\n   */;\n  _proto.patch = function patch() {\n    if (this._patch) {\n      throw new Error('Math.random already patched');\n    }\n    this._patch = Math.random;\n    Math.random = this.uniform();\n  }\n  /**\r\n   * Restores a previously patched `Math.random` to its original value.\r\n   */;\n  _proto.unpatch = function unpatch() {\n    if (this._patch) {\n      Math.random = this._patch;\n      delete this._patch;\n    }\n  }\n  // --------------------------------------------------------------------------\n  // Uniform utility functions\n  // --------------------------------------------------------------------------\n  /**\r\n   * Convenience wrapper around `this.rng.next()`\r\n   *\r\n   * Returns a floating point number in [0, 1).\r\n   *\r\n   * @return {number}\r\n   */;\n  /**\r\n   * Returns an item chosen uniformly at trandom from the given array.\r\n   *\r\n   * Convence wrapper around `random.uniformInt()`\r\n   *\r\n   * @param {Array<T>} [array] - Lower bound (integer, inclusive)\r\n   * @return {T | undefined}\r\n   */\n  _proto.choice = function choice(array) {\n    if (!Array.isArray(array)) {\n      throw new Error(\"Random.choice expected input to be an array, got \" + typeof array);\n    }\n    var length = array == null ? void 0 : array.length;\n    if (length > 0) {\n      var index = this.uniformInt(0, length - 1)();\n      return array[index];\n    } else {\n      return undefined;\n    }\n  }\n  // --------------------------------------------------------------------------\n  // Uniform distributions\n  // --------------------------------------------------------------------------\n  /**\r\n   * Generates a [Continuous uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)).\r\n   *\r\n   * @param {number} [min=0] - Lower bound (float, inclusive)\r\n   * @param {number} [max=1] - Upper bound (float, exclusive)\r\n   * @return {function}\r\n   */;\n  // --------------------------------------------------------------------------\n  // Internal\n  // --------------------------------------------------------------------------\n  /**\r\n   * Memoizes distributions to ensure they're only created when necessary.\r\n   *\r\n   * Returns a thunk which that returns independent, identically distributed\r\n   * samples from the specified distribution.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {string} label - Name of distribution\r\n   * @param {function} getter - Function which generates a new distribution\r\n   * @param {...*} args - Distribution-specific arguments\r\n   *\r\n   * @return {function}\r\n   */\n  _proto._memoize = function _memoize(label, getter) {\n    var args = [].slice.call(arguments, 2);\n    var key = \"\" + args.join(';');\n    var value = this._cache[label];\n    if (value === undefined || value.key !== key) {\n      value = {\n        key: key,\n        distribution: getter.apply(void 0, [this].concat(args))\n      };\n      this._cache[label] = value;\n    }\n    return value.distribution;\n  };\n  _createClass(Random, [{\n    key: \"rng\",\n    get: function get() {\n      return this._rng;\n    }\n  }]);\n  return Random;\n}();\n// defaults to Math.random as its RNG\nvar random = new Random();\n\nexport { RNG, RNGFactory, Random, random as default };\n//# sourceMappingURL=random.module.js.map\n","export type SeedFn = () => number\nexport type SeedType = number | string | SeedFn | RNG\n\nexport default abstract class RNG {\n  abstract get name(): string\n\n  abstract next(): number\n\n  abstract seed(_seed?: SeedType, _opts?: Record<string, unknown>): void\n\n  abstract clone(_seed?: SeedType, _opts?: Record<string, unknown>): RNG\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _seed(seed: number, _opts?: Record<string, unknown>) {\n    // TODO: add entropy and stuff\n\n    if (seed === (seed || 0)) {\n      return seed\n    } else {\n      const strSeed = '' + seed\n      let s = 0\n\n      for (let k = 0; k < strSeed.length; ++k) {\n        s ^= strSeed.charCodeAt(k) | 0\n      }\n\n      return s\n    }\n  }\n}\n","import RNG, { SeedFn } from '../rng'\n\nexport default class RNGFunction extends RNG {\n  _rng: SeedFn\n\n  constructor(thunk: SeedFn, opts?: Record<string, unknown>) {\n    super()\n\n    this.seed(thunk, opts)\n  }\n\n  get name() {\n    return 'function'\n  }\n\n  next() {\n    return this._rng()\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  seed(thunk: SeedFn, _opts?: Record<string, unknown>) {\n    this._rng = thunk\n  }\n\n  clone(_: undefined, opts: Record<string, unknown>) {\n    return new RNGFunction(this._rng, opts)\n  }\n}\n","import seedrandom from 'seedrandom'\n\nimport RNG from './rng'\nimport RNGFunction from './generators/function'\n\n/**\n * Construct an RNG with variable inputs. Used in calls to Random constructor\n * @param {...*} args - Distribution-specific arguments\n * @return RNG\n *\n * @example\n * new Random(RNGFactory(...args))\n */\nexport default <T extends any[]>(...args: T) => {\n  const [arg0 = 'default'] = args\n\n  switch (typeof arg0) {\n    case 'object':\n      if (arg0 instanceof RNG) {\n        return arg0\n      }\n      break\n\n    case 'function':\n      return new RNGFunction(arg0)\n\n    case 'number':\n    case 'string':\n    default:\n      return new RNGFunction(seedrandom(...args))\n  }\n\n  throw new Error(`invalid RNG \"${arg0}\"`)\n}\n","import { Random } from '../random'\n\nexport default (random: Random, min = 0, max = 1) => {\n  return () => {\n    return random.next() * (max - min) + min\n  }\n}\n","export function numberValidator(num: number) {\n  return new NumberValidator(num)\n}\n\nexport class NumberValidator {\n  private n: number\n  constructor(num: number) {\n    this.n = num\n  }\n\n  public isInt = (): this => {\n    if (Number.isInteger(this.n)) {\n      return this\n    }\n    throw new Error(`Expected number to be an integer, got ${this.n}`)\n  }\n\n  public isPositive = (): this => {\n    if (this.n > 0) {\n      return this\n    }\n    throw new Error(`Expected number to be positive, got ${this.n}`)\n  }\n\n  public lessThan = (v: number): this => {\n    if (this.n < v) {\n      return this\n    }\n    throw new Error(`Expected number to be less than ${v}, got ${this.n}`)\n  }\n\n  public greaterThanOrEqual = (v: number): this => {\n    if (this.n >= v) {\n      return this\n    }\n    throw new Error(\n      `Expected number to be greater than or equal to ${v}, got ${this.n}`\n    )\n  }\n\n  public greaterThan = (v: number): this => {\n    if (this.n > v) {\n      return this\n    }\n    throw new Error(`Expected number to be greater than ${v}, got ${this.n}`)\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, min = 0, max = 1) => {\n  if (max === undefined) {\n    max = min === undefined ? 1 : min\n    min = 0\n  }\n\n  numberValidator(min).isInt()\n  numberValidator(max).isInt()\n\n  return () => {\n    return Math.floor(random.next() * (max - min + 1) + min)\n  }\n}\n","import { Random } from '../random'\n\nexport default (random: Random) => {\n  return () => {\n    return random.next() >= 0.5\n  }\n}\n","import { Random } from '../random'\n\nexport default (random: Random, mu = 0, sigma = 1) => {\n  return () => {\n    let x: number, y: number, r: number\n\n    do {\n      x = random.next() * 2 - 1\n      y = random.next() * 2 - 1\n      r = x * x + y * y\n    } while (!r || r > 1)\n\n    return mu + sigma * y * Math.sqrt((-2 * Math.log(r)) / r)\n  }\n}\n","import { Random } from '../random'\n\nexport default (random: Random, mu = 0, sigma = 1) => {\n  const normal = random.normal(mu, sigma)\n  return () => {\n    return Math.exp(normal())\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, p = 0.5) => {\n  numberValidator(p).greaterThanOrEqual(0).lessThan(1)\n\n  return () => {\n    return Math.floor(random.next() + p)\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, n = 1, p = 0.5) => {\n  numberValidator(n).isInt().isPositive()\n  numberValidator(p).greaterThanOrEqual(0).lessThan(1)\n\n  return () => {\n    let i = 0\n    let x = 0\n\n    while (i++ < n) {\n      if (random.next() < p) {\n        x++\n      }\n    }\n    return x\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, p = 0.5) => {\n  numberValidator(p).greaterThan(0).lessThan(1)\n  const invLogP = 1.0 / Math.log(1.0 - p)\n\n  return () => {\n    return Math.floor(1 + Math.log(random.next()) * invLogP)\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nconst logFactorialTable = [\n  0.0, 0.0, 0.69314718055994529, 1.791759469228055, 3.1780538303479458,\n  4.7874917427820458, 6.5792512120101012, 8.5251613610654147,\n  10.604602902745251, 12.801827480081469\n]\n\nconst logFactorial = (k: number) => {\n  return logFactorialTable[k]\n}\n\nconst logSqrt2PI = 0.91893853320467267\n\nexport default (random: Random, lambda = 1) => {\n  numberValidator(lambda).isPositive()\n\n  if (lambda < 10) {\n    // inversion method\n    const expMean = Math.exp(-lambda)\n\n    return () => {\n      let p = expMean\n      let x = 0\n      let u = random.next()\n\n      while (u > p) {\n        u = u - p\n        p = (lambda * p) / ++x\n      }\n\n      return x\n    }\n  } else {\n    // generative method\n    const smu = Math.sqrt(lambda)\n    const b = 0.931 + 2.53 * smu\n    const a = -0.059 + 0.02483 * b\n    const invAlpha = 1.1239 + 1.1328 / (b - 3.4)\n    const vR = 0.9277 - 3.6224 / (b - 2)\n\n    return () => {\n      while (true) {\n        let u\n        let v = random.next()\n\n        if (v <= 0.86 * vR) {\n          u = v / vR - 0.43\n          return Math.floor(\n            ((2 * a) / (0.5 - Math.abs(u)) + b) * u + lambda + 0.445\n          )\n        }\n\n        if (v >= vR) {\n          u = random.next() - 0.5\n        } else {\n          u = v / vR - 0.93\n          u = (u < 0 ? -0.5 : 0.5) - u\n          v = random.next() * vR\n        }\n\n        const us = 0.5 - Math.abs(u)\n        if (us < 0.013 && v > us) {\n          continue\n        }\n\n        const k = Math.floor(((2 * a) / us + b) * u + lambda + 0.445)\n        v = (v * invAlpha) / (a / (us * us) + b)\n\n        if (k >= 10) {\n          const t =\n            (k + 0.5) * Math.log(lambda / k) -\n            lambda -\n            logSqrt2PI +\n            k -\n            (1 / 12.0 - (1 / 360.0 - 1 / (1260.0 * k * k)) / (k * k)) / k\n\n          if (Math.log(v * smu) <= t) {\n            return k\n          }\n        } else if (k >= 0) {\n          const f = logFactorial(k) ?? 0\n\n          if (Math.log(v) <= k * Math.log(lambda) - lambda - f) {\n            return k\n          }\n        }\n      }\n    }\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, lambda = 1) => {\n  numberValidator(lambda).isPositive()\n\n  return () => {\n    return -Math.log(1 - random.next()) / lambda\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, n = 1) => {\n  numberValidator(n).isInt().greaterThanOrEqual(0)\n\n  return () => {\n    let sum = 0\n    for (let i = 0; i < n; ++i) {\n      sum += random.next()\n    }\n\n    return sum\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, n = 1) => {\n  numberValidator(n).isInt().isPositive()\n  const irwinHall = random.irwinHall(n)\n\n  return () => {\n    return irwinHall() / n\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, alpha = 1) => {\n  numberValidator(alpha).greaterThanOrEqual(0)\n  const invAlpha = 1.0 / alpha\n\n  return () => {\n    return 1.0 / Math.pow(1.0 - random.next(), invAlpha)\n  }\n}\n","import RNG from '../rng'\n\nexport default class RNGMathRandom extends RNG {\n  get name() {\n    return 'default'\n  }\n\n  next() {\n    return Math.random()\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  seed(_seed: unknown, _opts: Record<string, unknown>) {\n    // intentionally empty\n  }\n\n  clone() {\n    return new RNGMathRandom()\n  }\n}\n","import RNG from './rng'\nimport RNGFactory from './rng-factory'\n\nimport uniform from './distributions/uniform'\nimport uniformInt from './distributions/uniform-int'\nimport uniformBoolean from './distributions/uniform-boolean'\nimport normal from './distributions/normal'\nimport logNormal from './distributions/log-normal'\nimport bernoulli from './distributions/bernoulli'\nimport binomial from './distributions/binomial'\nimport geometric from './distributions/geometric'\nimport poisson from './distributions/poisson'\nimport exponential from './distributions/exponential'\nimport irwinHall from './distributions/irwin-hall'\nimport bates from './distributions/bates'\nimport pareto from './distributions/pareto'\nimport RNGMathRandom from './generators/math-random'\n\n/**\n * Distribution function\n */\ninterface IDistFn<R> {\n  (random: Random, ...argv: any): R\n}\n\n/**\n * Distribution\n */\ninterface IDist<R> {\n  (): R\n}\n\n/**\n * Keyed cache entry\n */\ninterface ICacheEntry<T> {\n  key: string\n  distribution: () => T\n}\n\nexport { RNG, RNGFactory }\n\n/**\n * Seedable random number generator supporting many common distributions.\n *\n * Defaults to Math.random as its underlying pseudorandom number generator.\n *\n * @name Random\n * @class\n *\n * @param {RNG|function} [rng=Math.random] - Underlying pseudorandom number generator.\n */\nexport class Random {\n  protected _rng: RNG\n  protected _patch: typeof Math.random | undefined\n  protected _cache: {\n    [k: string]: ICacheEntry<any>\n  } = {}\n\n  constructor(rng?: RNG) {\n    if (rng && rng instanceof RNG) {\n      this.use(rng)\n    } else {\n      this.use(new RNGMathRandom())\n    }\n    this._cache = {}\n  }\n\n  /**\n   * @member {RNG} Underlying pseudo-random number generator\n   */\n  get rng() {\n    return this._rng\n  }\n\n  /**\n   * Creates a new `Random` instance, optionally specifying parameters to\n   * set a new seed.\n   *\n   * @see RNG.clone\n   *\n   * @param {string} [seed] - Optional seed for new RNG.\n   * @param {object} [opts] - Optional config for new RNG options.\n   * @return {Random}\n   */\n  clone<T>(...args: [T]): Random {\n    if (args.length) {\n      return new Random(RNGFactory(...args))\n    } else {\n      return new Random(this.rng.clone())\n    }\n  }\n\n  /**\n   * Sets the underlying pseudorandom number generator used via\n   * either an instance of `seedrandom`, a custom instance of RNG\n   * (for PRNG plugins), or a string specifying the PRNG to use\n   * along with an optional `seed` and `opts` to initialize the\n   * RNG.\n   *\n   * @example\n   * import random from 'random'\n   *\n   * random.use('example_seedrandom_string')\n   * // or\n   * random.use(seedrandom('kittens'))\n   * // or\n   * random.use(Math.random)\n   *\n   * @param {...*} args\n   */\n  use(...args: [RNG]) {\n    this._rng = RNGFactory(...args)\n  }\n\n  /**\n   * Patches `Math.random` with this Random instance's PRNG.\n   */\n  patch() {\n    if (this._patch) {\n      throw new Error('Math.random already patched')\n    }\n\n    this._patch = Math.random\n    Math.random = this.uniform()\n  }\n\n  /**\n   * Restores a previously patched `Math.random` to its original value.\n   */\n  unpatch() {\n    if (this._patch) {\n      Math.random = this._patch\n      delete this._patch\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  // Uniform utility functions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Convenience wrapper around `this.rng.next()`\n   *\n   * Returns a floating point number in [0, 1).\n   *\n   * @return {number}\n   */\n  next = (): number => {\n    return this._rng.next()\n  }\n\n  /**\n   * Samples a uniform random floating point number, optionally specifying\n   * lower and upper bounds.\n   *\n   * Convence wrapper around `random.uniform()`\n   *\n   * @param {number} [min=0] - Lower bound (float, inclusive)\n   * @param {number} [max=1] - Upper bound (float, exclusive)\n   * @return {number}\n   */\n  float = (min?: number, max?: number): number => {\n    return this.uniform(min, max)()\n  }\n\n  /**\n   * Samples a uniform random integer, optionally specifying lower and upper\n   * bounds.\n   *\n   * Convence wrapper around `random.uniformInt()`\n   *\n   * @param {number} [min=0] - Lower bound (integer, inclusive)\n   * @param {number} [max=1] - Upper bound (integer, inclusive)\n   * @return {number}\n   */\n  int = (min?: number, max?: number) => {\n    return this.uniformInt(min, max)()\n  }\n\n  /**\n   * Samples a uniform random integer, optionally specifying lower and upper\n   * bounds.\n   *\n   * Convence wrapper around `random.uniformInt()`\n   *\n   * @alias `random.int`\n   *\n   * @param {number} [min=0] - Lower bound (integer, inclusive)\n   * @param {number} [max=1] - Upper bound (integer, inclusive)\n   * @return {number}\n   */\n  integer = (min?: number, max?: number) => {\n    return this.uniformInt(min, max)()\n  }\n\n  /**\n   * Samples a uniform random boolean value.\n   *\n   * Convence wrapper around `random.uniformBoolean()`\n   *\n   * @alias `random.boolean`\n   *\n   * @return {boolean}\n   */\n  bool = () => {\n    return this.uniformBoolean()()\n  }\n\n  /**\n   * Samples a uniform random boolean value.\n   *\n   * Convence wrapper around `random.uniformBoolean()`\n   *\n   * @return {boolean}\n   */\n  boolean = () => {\n    return this.uniformBoolean()()\n  }\n\n  /**\n   * Returns an item chosen uniformly at trandom from the given array.\n   *\n   * Convence wrapper around `random.uniformInt()`\n   *\n   * @param {Array<T>} [array] - Lower bound (integer, inclusive)\n   * @return {T | undefined}\n   */\n  choice<T>(array: Array<T>): T | undefined {\n    if (!Array.isArray(array)) {\n      throw new Error(\n        `Random.choice expected input to be an array, got ${typeof array}`\n      )\n    }\n\n    const length = array?.length\n\n    if (length > 0) {\n      const index = this.uniformInt(0, length - 1)()\n      return array[index]\n    } else {\n      return undefined\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  // Uniform distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates a [Continuous uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)).\n   *\n   * @param {number} [min=0] - Lower bound (float, inclusive)\n   * @param {number} [max=1] - Upper bound (float, exclusive)\n   * @return {function}\n   */\n  uniform = (min?: number, max?: number) => {\n    return this._memoize<number>('uniform', uniform, min, max)\n  }\n\n  /**\n   * Generates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution).\n   *\n   * @param {number} [min=0] - Lower bound (integer, inclusive)\n   * @param {number} [max=1] - Upper bound (integer, inclusive)\n   * @return {function}\n   */\n  uniformInt = (min?: number, max?: number) => {\n    return this._memoize<number>('uniformInt', uniformInt, min, max)\n  }\n\n  /**\n   * Generates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution),\n   * with two possible outcomes, `true` or `false.\n   *\n   * This method is analogous to flipping a coin.\n   *\n   * @return {function}\n   */\n  uniformBoolean = () => {\n    return this._memoize<boolean>('uniformBoolean', uniformBoolean)\n  }\n\n  // --------------------------------------------------------------------------\n  // Normal distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates a [Normal distribution](https://en.wikipedia.org/wiki/Normal_distribution).\n   *\n   * @param {number} [mu=0] - Mean\n   * @param {number} [sigma=1] - Standard deviation\n   * @return {function}\n   */\n  normal = (mu?: number, sigma?: number) => {\n    return normal(this, mu, sigma)\n  }\n\n  /**\n   * Generates a [Log-normal distribution](https://en.wikipedia.org/wiki/Log-normal_distribution).\n   *\n   * @param {number} [mu=0] - Mean of underlying normal distribution\n   * @param {number} [sigma=1] - Standard deviation of underlying normal distribution\n   * @return {function}\n   */\n  logNormal = (mu?: number, sigma?: number) => {\n    return logNormal(this, mu, sigma)\n  }\n\n  // --------------------------------------------------------------------------\n  // Bernoulli distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates a [Bernoulli distribution](https://en.wikipedia.org/wiki/Bernoulli_distribution).\n   *\n   * @param {number} [p=0.5] - Success probability of each trial.\n   * @return {function}\n   */\n  bernoulli = (p?: number) => {\n    return bernoulli(this, p)\n  }\n\n  /**\n   * Generates a [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution).\n   *\n   * @param {number} [n=1] - Number of trials.\n   * @param {number} [p=0.5] - Success probability of each trial.\n   * @return {function}\n   */\n  binomial = (n?: number, p?: number) => {\n    return binomial(this, n, p)\n  }\n\n  /**\n   * Generates a [Geometric distribution](https://en.wikipedia.org/wiki/Geometric_distribution).\n   *\n   * @param {number} [p=0.5] - Success probability of each trial.\n   * @return {function}\n   */\n  geometric = (p?: number) => {\n    return geometric(this, p)\n  }\n\n  // --------------------------------------------------------------------------\n  // Poisson distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates a [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution).\n   *\n   * @param {number} [lambda=1] - Mean (lambda > 0)\n   * @return {function}\n   */\n  poisson = (lambda?: number) => {\n    return poisson(this, lambda)\n  }\n\n  /**\n   * Generates an [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution).\n   *\n   * @param {number} [lambda=1] - Inverse mean (lambda > 0)\n   * @return {function}\n   */\n  exponential = (lambda?: number) => {\n    return exponential(this, lambda)\n  }\n\n  // --------------------------------------------------------------------------\n  // Misc distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates an [Irwin Hall distribution](https://en.wikipedia.org/wiki/Irwin%E2%80%93Hall_distribution).\n   *\n   * @param {number} [n=1] - Number of uniform samples to sum (n >= 0)\n   * @return {function}\n   */\n  irwinHall = (n?: number) => {\n    return irwinHall(this, n)\n  }\n\n  /**\n   * Generates a [Bates distribution](https://en.wikipedia.org/wiki/Bates_distribution).\n   *\n   * @param {number} [n=1] - Number of uniform samples to average (n >= 1)\n   * @return {function}\n   */\n  bates = (n?: number) => {\n    return bates(this, n)\n  }\n\n  /**\n   * Generates a [Pareto distribution](https://en.wikipedia.org/wiki/Pareto_distribution).\n   *\n   * @param {number} [alpha=1] - Alpha\n   * @return {function}\n   */\n  pareto = (alpha?: number) => {\n    return pareto(this, alpha)\n  }\n\n  // --------------------------------------------------------------------------\n  // Internal\n  // --------------------------------------------------------------------------\n\n  /**\n   * Memoizes distributions to ensure they're only created when necessary.\n   *\n   * Returns a thunk which that returns independent, identically distributed\n   * samples from the specified distribution.\n   *\n   * @private\n   *\n   * @param {string} label - Name of distribution\n   * @param {function} getter - Function which generates a new distribution\n   * @param {...*} args - Distribution-specific arguments\n   *\n   * @return {function}\n   */\n  _memoize<T>(label: string, getter: IDistFn<any>, ...args: any[]): IDist<T> {\n    const key = `${args.join(';')}`\n    let value = this._cache[label]\n\n    if (value === undefined || value.key !== key) {\n      value = {\n        key,\n        distribution: getter(this, ...args)\n      }\n      this._cache[label] = value\n    }\n\n    return value.distribution\n  }\n}\n\n// defaults to Math.random as its RNG\nexport default new Random()\n","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = String(data);\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (global, pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\n\nvar width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n} else {\n  // When included as a plain script, set up Math.seedrandom global.\n  math['seed' + rngname] = seedrandom;\n}\n\n\n// End anonymous scope, and pass initial values.\n})(\n  // global: `self` in browsers (including strict mode and web workers),\n  // otherwise `this` in Node and other environments\n  (typeof self !== 'undefined') ? self : this,\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n","\"use strict\";","import { HistogramPartiiInternal, PoparciePartii, Wynik, WynikDemo } from \"./typy\";\n\nexport function sortedStringify(wynik: Wynik | WynikDemo) {\n  const sortedObj = {};\n  Object.keys(wynik)\n    .sort()\n    .forEach((key) => {\n      sortedObj[key] = wynik[key];\n    });\n  return JSON.stringify(sortedObj);\n}\n\nexport function sortObjectByValues(obj: { [key: string]: number }):\n  {key: string, value: number}[] {\n  // Convert the object to an array of key-value pairs\n  const keyValueArray = Object.entries(obj);\n\n  // Sort the array based on the values (ascending order)\n  return keyValueArray.sort((a, b) => b[1] - a[1]).map(([key, value]) => {\n    return { key, value};\n  });\n}\n","// Źródło:\n// https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=592625443&range=AI4:AI44,\n\n// import { Partia, Partie, sondaz_uliczny } from \"./sondaz_uliczny\";\n\n// const TD = Object.entries(sondaz_uliczny).map(([okreg, partie]) => {\n//   return partie['TD'].poparcie\n// });\n\n// console.log(TD);\n\nexport const ROZKLAD: { [key: string]: number[] } = {\n  LEWICA: [\n    0.0282571335,\n0.01488150667,\n0.0478222815,\n0.02984793983,\n0.029476448,\n0.0180548925,\n0.010392221,\n0.02975490417,\n0.03759809833,\n0.01542527167,\n0.0236883605,\n0.01100846683,\n0.0397647275,\n0.0091506275,\n0.007909908333,\n0.014014961,\n0.008859429833,\n0.010201509,\n0.118083528,\n0.03675424117,\n0.020347473,\n0.008839666333,\n0.0155574055,\n0.017031283,\n0.032726717,\n0.03074119817,\n0.020098175,\n0.0194996075,\n0.01982511017,\n0.01285778183,\n0.02496772,\n0.032462213,\n0.0220234625,\n0.0126734095,\n0.01999657117,\n0.02434270517,\n0.021791153,\n0.01856165517,\n0.0379657795,\n0.01779259133,\n0.02895186617  ],\n  // https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=592625443&range=AN4:AN44,\n  LEWICA_BLAD: [\n    5.44, 4.35, 9.6, 7.9, 7.12, 3.38, 7.34, 3.42, 7.25, 3.99, 5.89, 3.0, 6.74,\n    3.41, 3.53, 6.97, 6.73, 5.94, 9.39, 8.1, 1.61, 5.79, 2.92, 7.77, 5.7, 2.09,\n    3.51, 8.74, 2.27, 5.02, 3.17, 5.67, 6.45, 4.54, 3.6, 6.46, 8.97, 7.86, 6.82,\n    5.23, 3.79,\n  ],\n  // https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=1383721529&range=U3:U43,\n  KO: [\n    0.02095042333,\n0.01835469433,\n0.04189383883,\n0.02857291333,\n0.02348052333,\n0.02197197817,\n0.01186840483,\n0.02720124583,\n0.0292574625,\n0.01053707333,\n0.0189868865,\n0.01425199983,\n0.03839594083,\n0.009164819667,\n0.008615772,\n0.01198455117,\n0.01145744533,\n0.01229867283,\n0.1181621912,\n0.0343164895,\n0.02074295667,\n0.01193354767,\n0.01593256617,\n0.0210371165,\n0.0441507985,\n0.04206959417,\n0.020244877,\n0.01245059417,\n0.02117911833,\n0.01750180833,\n0.034037158,\n0.01911514317,\n0.019047872,\n0.01428191817,\n0.017092405,\n0.02281050867,\n0.01443454267,\n0.02173799933,\n0.047433574,\n0.01732140367,\n0.03372117283  ],\n  // https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=1383721529&range=X3:X43,\n  KO_BLAD: [\n    2.38, 4.81, 2.31, 6.08, 5.05, 1.21, 1.82, 2.96, 5.81, 1.72, 4.21, 1.47,\n    3.91, 6.86, 6.03, 2.58, 1.74, 1.66, 6.52, 2.43, 3.08, 2.44, 3.1, 2.78, 6.05,\n    3.14, 2.42, 3.58, 3.46, 5.66, 4.79, 1.11, 1.82, 4.67, 2.93, 2.28, 1.65,\n    4.96, 4.83, 5.98, 3.32,\n  ],\n  // TRZEBA POSORTOWAĆ ARKUSZ!!!\n  // https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=1231789773&range=R4:R44,\n  TD: [\n    0.022415876,\n0.0140898335,\n0.03175889317,\n0.0283710235,\n0.02891201475,\n0.026946886,\n0.022047627,\n0.03287808558,\n0.01753570292,\n0.01884171267,\n0.02608876458,\n0.01569827233,\n0.03346774583,\n0.0150046695,\n0.02292685725,\n0.02517498925,\n0.01684268933,\n0.02528291583,\n0.05741305392,\n0.03330098842,\n0.02768583583,\n0.0156986055,\n0.0244913335,\n0.03222947392,\n0.02653349625,\n0.033979463,\n0.02036296842,\n0.01573798425,\n0.017095344,\n0.01606130233,\n0.02022854192,\n0.01415383625,\n0.02527398442,\n0.01563157683,\n0.02427266483,\n0.03357863792,\n0.02057061317,\n0.02859777067,\n0.0285236385,\n0.01738948992,\n0.02690483617  ],\n  // stały\n  TD_BLAD: [\n    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  ],\n  // https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=418600979&range=V3:V43,\n  PIS: [\n    0.02289047833,\n0.014539447,\n0.02776369267,\n0.02131711167,\n0.02294950533,\n0.03838390783,\n0.02973062217,\n0.01900597067,\n0.01591571983,\n0.02408826683,\n0.02904836917,\n0.02130995067,\n0.0311625805,\n0.02963938367,\n0.02562634467,\n0.02475671167,\n0.02382695067,\n0.033949261,\n0.04304594533,\n0.02970509583,\n0.01980732767,\n0.03061604567,\n0.04447523967,\n0.03270840817,\n0.02036073383,\n0.02608811483,\n0.0227350815,\n0.0159613145,\n0.016143496,\n0.02084102017,\n0.02295180183,\n0.01589586733,\n0.04070432767,\n0.013169903,\n0.01636291267,\n0.02526424917,\n0.02164847417,\n0.01629085967,\n0.01578302817,\n0.012774997,\n0.02076148367  ],\n  // https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=418600979&range=X3:X43,\n  PIS_BLAD: [\n    1.25, 2.27, 2.65, 3.22, 1.73, 6.49, 10.69, 2.54, 2.74, 8.62, 6.18, 1.37,\n    7.92, 5.76, 3.48, 5.35, 7.48, 8.33, 7.79, 4.64, 3.03, 4.2, 3.39, 3.23, 3.62,\n    3.23, 5.0, 2.05, 4.8, 3.58, 5.93, 3.25, 6.75, 3.18, 2.45, 3.75, 5.87, 3.43,\n    6.49, 2.91, 2.37,\n  ],\n  // https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=173675036&range=W3:W43,\n  KONF: [\n    0.02060562967,\n0.01229549835,\n0.03603269929,\n0.02187492114,\n0.022931464,\n0.03703330869,\n0.02519996845,\n0.02217074937,\n0.01722519479,\n0.01994023364,\n0.02252087825,\n0.02050570213,\n0.03539542744,\n0.02552712404,\n0.02291576829,\n0.01795242761,\n0.01920071307,\n0.02779108581,\n0.05962854781,\n0.02940181365,\n0.02027409076,\n0.02730411279,\n0.04747821146,\n0.03286621146,\n0.0258593653,\n0.03152217595,\n0.0235678845,\n0.01403419925,\n0.01896100225,\n0.02215147004,\n0.02308606074,\n0.01587827245,\n0.03247476995,\n0.01196144868,\n0.01944236486,\n0.0257290283,\n0.01804960345,\n0.01795606471,\n0.02234484537,\n0.01189939569,\n0.02101026617  ],\n  // https://docs.google.com/spreadsheets/d/1e7Tww7BT1zWkAuYC5zWIbX9k3GhzveAWqSR8U0iDzn0/edit#gid=173675036&range=Z3:Z43,\n  KONF_BLAD: [\n    1.14, 3.14, 6.32, 4.99, 7.07, 13.57, 20.14, 3.12, 2.92, 6.45, 2.25, 10.94,\n    13.54, 15.52, 13.43, 2.83, 7.4, 14.28, 11.92, 3.44, 3.64, 18.1, 12.97,\n    10.15, 8.59, 3.48, 4.35, 9.07, 11.42, 5.82, 12.97, 2.62, 3.15, 8.41, 2.01,\n    1.66, 6.39, 4.99, 7.92, 7.85, 7.46,\n  ],\n};","import { KOLOR_PARTII } from \"./dane\";\nimport { ILE_SYMULACJI, Okreg, PoparciePartii, Sondaze, Wynik } from \"./typy\";\nimport Chart, { ChartItem } from \"chart.js/auto\";\nimport Color from 'color';\n\nexport function rysujWynikWyborow(wynikWyborow: Sondaze, targetElement: string, options: { poziomo?: boolean, laczOpozycje?: boolean, calySejm?: boolean } = {}) {\n  const canvas = document.createElement(\"canvas\");\n  document.getElementById(targetElement).appendChild(canvas);\n    new Chart(canvas as ChartItem, {\n      type: \"bar\",\n      data: {\n        labels: Object.entries(wynikWyborow).map(([sondaz, wynik]) =>\n          sondaz.toString()\n        ),\n        datasets: !options.laczOpozycje\n          ? [\n              {\n                label: \"Lewica\",\n                data: Object.values(wynikWyborow).map((wynik) => wynik.LEWICA),\n                backgroundColor: KOLOR_PARTII[\"LEWICA\"],\n              },\n              {\n                label: \"KO\",\n                data: Object.values(wynikWyborow).map((wynik) => wynik.KO),\n                backgroundColor: KOLOR_PARTII[\"KO\"],\n              },\n              {\n                label: \"Trzecia Droga\",\n                data: Object.values(wynikWyborow).map((wynik) => wynik.TD),\n                backgroundColor: KOLOR_PARTII[\"TD\"],\n              },\n              {\n                label: \"PiS + Konfederacja\",\n                data: Object.values(wynikWyborow).map((wynik) => wynik.NIEDEMO),\n                backgroundColor: \"rgb(128, 0, 32)\",\n              },\n            ]\n          : [\n              {\n                label: \"Opozycja Demokratyczna\",\n                data: Object.values(wynikWyborow).map((wynik) => wynik.DEMO),\n                backgroundColor: \"#E56701\",\n              },\n              {\n                label: \"PiS + Konfederacja\",\n                data: Object.values(wynikWyborow).map((wynik) => wynik.NIEDEMO),\n                backgroundColor: \"rgb(128, 0, 32)\",\n              },\n            ],\n      },\n      options: options?.poziomo\n        ? {\n            indexAxis: \"y\",\n            scales: {\n              x: {\n                stacked: true,\n                max: options?.calySejm ? 460 : null,\n                afterBuildTicks: options?.calySejm\n                  ? (axis) =>\n                      (axis.ticks = [0, 230, 460].map((v) => ({ value: v })))\n                  : null,\n              },\n              y: {\n                stacked: true,\n              },\n            },\n          }\n        : {},\n    });\n}\n\nexport function odmianaSlowaMandat(mandaty: number) {\n  return [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14].includes(mandaty)\n              ? \"mandatów\"\n              : mandaty > 1\n              ? \"mandaty\"\n              : \"mandat\"\n}\n\nexport function rysujHistogram(\n  histogram: PoparciePartii,\n  targetElement: string,\n  partia: string,\n  procentZSondazy: string,\n  odchylenie: number,\n  minimumMandatow: Wynik,\n  okreg: Okreg\n) {\n  const canvas = document.createElement(\"canvas\");\n  document.getElementById(targetElement).appendChild(canvas);\n  const color = KOLOR_PARTII[partia];\n  const procenty = Object.keys(histogram).sort(\n    (a, b) => Number.parseFloat(b) - Number.parseFloat(a)\n  );\n\n  const footer = (tooltipItems) => {\n    let sum = 0;\n\n    tooltipItems.forEach(function (tooltipItem) {\n      sum += Number(tooltipItem.label.split('%')[0]) * okreg.glosy2019;\n    });\n    return \"Głosów: \" + Math.round(sum / 100);\n  };\n\n  new Chart(canvas as ChartItem, {\n    type: \"bar\",\n    data: {\n      labels: procenty.map((procent) => `${procent}%`),\n      datasets: (partia === \"KO\"\n        ? [\n            {\n              label: `${minimumMandatow[partia] + 4} ${odmianaSlowaMandat(\n                minimumMandatow[partia] + 4\n              )}`,\n              data: procenty.map(\n                (procent) =>\n                  ((histogram[procent][String(minimumMandatow[partia] + 4)] ||\n                    0) /\n                    ILE_SYMULACJI) *\n                  100\n              ),\n              backgroundColor: Color(color).darken(0.4).toString(),\n            },\n            {\n              label: `${minimumMandatow[partia] + 3} ${odmianaSlowaMandat(\n                minimumMandatow[partia] + 3\n              )}`,\n              data: procenty.map(\n                (procent) =>\n                  ((histogram[procent][String(minimumMandatow[partia] + 3)] ||\n                    0) /\n                    ILE_SYMULACJI) *\n                  100\n              ),\n              backgroundColor: Color(color).darken(0.2).toString(),\n            },\n          ]\n        : []\n      ).concat([\n        {\n          label: `${minimumMandatow[partia] + 2} ${odmianaSlowaMandat(\n            minimumMandatow[partia] + 2\n          )}`,\n          data: procenty.map(\n            (procent) =>\n              ((histogram[procent][String(minimumMandatow[partia] + 2)] || 0) /\n                ILE_SYMULACJI) *\n              100\n          ),\n          backgroundColor: color,\n        },\n        {\n          label: `${minimumMandatow[partia] + 1} ${odmianaSlowaMandat(\n            minimumMandatow[partia] + 1\n          )}`,\n          data: procenty.map(\n            (procent) =>\n              ((histogram[procent][String(minimumMandatow[partia] + 1)] || 0) /\n                ILE_SYMULACJI) *\n              100\n          ),\n          backgroundColor: Color(color).fade(0.4).toString(),\n        },\n        {\n          label: `${minimumMandatow[partia]} ${odmianaSlowaMandat(\n            minimumMandatow[partia]\n          )}`,\n          data: procenty.map(\n            (procent) =>\n              ((histogram[procent][String(minimumMandatow[partia])] || 0) /\n                ILE_SYMULACJI) *\n              100\n          ),\n          backgroundColor: Color(color).fade(0.8).toString(),\n        },\n      ]),\n    },\n    options: {\n      plugins: {\n        legend: {\n          title: {\n            display: true,\n            text: `Przewidywany wynik w okręgu dla ${partia}: ${procentZSondazy}%, σ: ${\n              Math.round(odchylenie * 10) / 10\n            }`,\n            color: \"black\",\n            font: {\n              size: 15,\n            },\n          },\n        },\n        tooltip: {\n          callbacks: {\n            footer: footer,\n          },\n        },\n      },\n      scales: {\n        x: {\n          stacked: true,\n        },\n        y: {\n          display: false,\n          stacked: true,\n        },\n      },\n    },\n  });\n  const tekst = document.createElement(\"p\");\n  // tekst.setAttribute(\"style\", \"\");\n  // tekst.innerHTML = interpretacjaHistogramu(partia, String(minimumMandatow[partia]), histogram);\n  document.getElementById(targetElement).appendChild(tekst);\n}\n\n// function extractProcent(poparcie: PoparciePartii) {\n//   return Number(poparcie.procent);\n// }\n\n// function interpretacjaHistogramu(partia: string, oczekiwaneMandaty: string, histogram: PoparciePartii) {\n//   const procentyOczekiwanych = Object.entries(histogram).filter(\n//     ([ mandaty, czestosc ]) => mandaty === oczekiwaneMandaty\n//   );\n//   const minProcentDoOczekiwanych = procentyOczekiwanych.reduce((acc, curr) =>\n//     extractProcent(curr) < extractProcent(acc) ? curr : acc\n//   );\n//   const maxProcentDoOczekiwanych = procentyOczekiwanych.reduce((acc, curr) =>\n//     extractProcent(curr) > extractProcent(acc) ? curr : acc\n//   );\n\n//   let tekst = `Jeśli ${partia} otrzyma`;\n//   // Nie podajemy dolnego zakresu, gdy oczekujemy 0 mandatów\n//   tekst += oczekiwaneMandaty\n//     ? ` od ${Math.max(extractProcent(minProcentDoOczekiwanych), 0)}%`\n//     : \"\";\n//   tekst += ` do ${\n//     maxProcentDoOczekiwanych.procent\n//   }% głosów, to zdobędzie ${oczekiwaneMandaty} ${odmianaSlowaMandat(\n//     oczekiwaneMandaty\n//   )}.`;\n//   return tekst;\n// }","import {Chart, registerables} from '../dist/chart.js';\n\nChart.register(...registerables);\n\nexport * from '../dist/chart.js';\nexport default Chart;\n","/*!\n * Chart.js v4.4.0\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data) {\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            x: key,\n            y: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            this._data = convertObjectDataToArray(data);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const skipNull = (meta)=>{\n            const parsed = meta.controller.getParsed(dataIndex);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key)=>acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.0\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resize(width, height);\n            this._resizeBeforeDraw = null;\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let x = 0;\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                x += pos.x;\n                y += pos.y;\n                ++count;\n            }\n        }\n        return {\n            x: x / count,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n","import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (and thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal metadata accordingly.\n\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      // https://github.com/chartjs/Chart.js/issues/11333\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      // https://github.com/chartjs/Chart.js/issues/11333\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\n\nfunction getDatasetArea(meta, chartArea) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n  return chartArea;\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta, this.chartArea);\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the envent inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || (elements && containsColorsDefinitions(elements)))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if it's not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @protected\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n    * Generates all timestamps defined in the data.\n    * Important: this method can return ticks outside the min and max range, it's the\n    * responsibility of the calling code to clamp values if needed.\n    * @protected\n    */\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n","/*!\n * Chart.js v4.4.0\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { Color } from '@kurkle/color';\n\n/**\n * @namespace Chart.helpers\n */ /**\n * An empty function that can be used, for example, for optional callback.\n */ function noop() {\n/* noop */ }\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */ const uid = (()=>{\n    let id = 0;\n    return ()=>id++;\n})();\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isNullOrUndef(value) {\n    return value === null || typeof value === 'undefined';\n}\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */ function isArray(value) {\n    if (Array.isArray && Array.isArray(value)) {\n        return true;\n    }\n    const type = Object.prototype.toString.call(value);\n    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n        return true;\n    }\n    return false;\n}\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isObject(value) {\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */ function isNumberFinite(value) {\n    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */ function finiteOrDefault(value, defaultValue) {\n    return isNumberFinite(value) ? value : defaultValue;\n}\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */ function valueOrDefault(value, defaultValue) {\n    return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;\nconst toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */ function callback(fn, args, thisArg) {\n    if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n    }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if (isArray(loopable)) {\n        len = loopable.length;\n        if (reverse) {\n            for(i = len - 1; i >= 0; i--){\n                fn.call(thisArg, loopable[i], i);\n            }\n        } else {\n            for(i = 0; i < len; i++){\n                fn.call(thisArg, loopable[i], i);\n            }\n        }\n    } else if (isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n        for(i = 0; i < len; i++){\n            fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n    }\n}\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */ function _elementsEqual(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n    }\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\n        v0 = a0[i];\n        v1 = a1[i];\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */ function clone(source) {\n    if (isArray(source)) {\n        return source.map(clone);\n    }\n    if (isObject(source)) {\n        const target = Object.create(null);\n        const keys = Object.keys(source);\n        const klen = keys.length;\n        let k = 0;\n        for(; k < klen; ++k){\n            target[keys[k]] = clone(source[keys[k]]);\n        }\n        return target;\n    }\n    return source;\n}\nfunction isValidKey(key) {\n    return [\n        '__proto__',\n        'prototype',\n        'constructor'\n    ].indexOf(key) === -1;\n}\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */ function _merger(key, target, source, options) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        merge(tval, sval, options);\n    } else {\n        target[key] = clone(sval);\n    }\n}\nfunction merge(target, source, options) {\n    const sources = isArray(source) ? source : [\n        source\n    ];\n    const ilen = sources.length;\n    if (!isObject(target)) {\n        return target;\n    }\n    options = options || {};\n    const merger = options.merger || _merger;\n    let current;\n    for(let i = 0; i < ilen; ++i){\n        current = sources[i];\n        if (!isObject(current)) {\n            continue;\n        }\n        const keys = Object.keys(current);\n        for(let k = 0, klen = keys.length; k < klen; ++k){\n            merger(keys[k], target, current, options);\n        }\n    }\n    return target;\n}\nfunction mergeIf(target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return merge(target, source, {\n        merger: _mergerIf\n    });\n}\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */ function _mergerIf(key, target, source) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        mergeIf(tval, sval);\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n        target[key] = clone(sval);\n    }\n}\n/**\n * @private\n */ function _deprecated(scope, value, previous, current) {\n    if (value !== undefined) {\n        console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n    }\n}\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n    '': (v)=>v,\n    // default resolvers\n    x: (o)=>o.x,\n    y: (o)=>o.y\n};\n/**\n * @private\n */ function _splitKey(key) {\n    const parts = key.split('.');\n    const keys = [];\n    let tmp = '';\n    for (const part of parts){\n        tmp += part;\n        if (tmp.endsWith('\\\\')) {\n            tmp = tmp.slice(0, -1) + '.';\n        } else {\n            keys.push(tmp);\n            tmp = '';\n        }\n    }\n    return keys;\n}\nfunction _getKeyResolver(key) {\n    const keys = _splitKey(key);\n    return (obj)=>{\n        for (const k of keys){\n            if (k === '') {\n                break;\n            }\n            obj = obj && obj[k];\n        }\n        return obj;\n    };\n}\nfunction resolveObjectKey(obj, key) {\n    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n    return resolver(obj);\n}\n/**\n * @private\n */ function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value)=>typeof value !== 'undefined';\nconst isFunction = (value)=>typeof value === 'function';\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nconst setsEqual = (a, b)=>{\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const item of a){\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @param e - The event\n * @private\n */ function _isClickEvent(e) {\n    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */ const PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction almostEquals(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n}\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */ function niceNum(range) {\n    const roundedRange = Math.round(range);\n    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n}\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */ function _factorize(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for(i = 1; i < sqrt; i++){\n        if (value % i === 0) {\n            result.push(i);\n            result.push(value / i);\n        }\n    }\n    if (sqrt === (sqrt | 0)) {\n        result.push(sqrt);\n    }\n    result.sort((a, b)=>a - b).pop();\n    return result;\n}\nfunction isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostWhole(x, epsilon) {\n    const rounded = Math.round(x);\n    return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n/**\n * @private\n */ function _setMinAndMaxByKey(array, target, property) {\n    let i, ilen, value;\n    for(i = 0, ilen = array.length; i < ilen; i++){\n        value = array[i][property];\n        if (!isNaN(value)) {\n            target.min = Math.min(target.min, value);\n            target.max = Math.max(target.max, value);\n        }\n    }\n}\nfunction toRadians(degrees) {\n    return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n    return radians * (180 / PI);\n}\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */ function _decimalPlaces(x) {\n    if (!isNumberFinite(x)) {\n        return;\n    }\n    let e = 1;\n    let p = 0;\n    while(Math.round(x * e) / e !== x){\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n// Gets the angle from vertical upright to the point about a centre.\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < -0.5 * PI) {\n        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n    }\n    return {\n        angle,\n        distance: radialDistanceFromCenter\n    };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */ function _angleDiff(a, b) {\n    return (a - b + PITAU) % TAU - PI;\n}\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */ function _normalizeAngle(a) {\n    return (a % TAU + TAU) % TAU;\n}\n/**\n * @private\n */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n    const a = _normalizeAngle(angle);\n    const s = _normalizeAngle(start);\n    const e = _normalizeAngle(end);\n    const angleToStart = _normalizeAngle(s - a);\n    const angleToEnd = _normalizeAngle(e - a);\n    const startToAngle = _normalizeAngle(a - s);\n    const endToAngle = _normalizeAngle(a - e);\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */ function _limitValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * @param {number} value\n * @private\n */ function _int16Range(value) {\n    return _limitValue(value, -32768, 32767);\n}\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */ function _isBetween(value, start, end, epsilon = 1e-6) {\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n    cmp = cmp || ((index)=>table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while(hi - lo > 1){\n        mid = lo + hi >> 1;\n        if (cmp(mid)) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return {\n        lo,\n        hi\n    };\n}\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{\n        const ti = table[index][key];\n        return ti < value || ti === value && table[index + 1][key] === value;\n    } : (index)=>table[index][key] < value);\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */ function _filterBetween(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while(start < end && values[start] < min){\n        start++;\n    }\n    while(end > start && values[end - 1] > max){\n        end--;\n    }\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\nconst arrayEvents = [\n    'push',\n    'pop',\n    'shift',\n    'splice',\n    'unshift'\n];\nfunction listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n        array._chartjs.listeners.push(listener);\n        return;\n    }\n    Object.defineProperty(array, '_chartjs', {\n        configurable: true,\n        enumerable: false,\n        value: {\n            listeners: [\n                listener\n            ]\n        }\n    });\n    arrayEvents.forEach((key)=>{\n        const method = '_onData' + _capitalize(key);\n        const base = array[key];\n        Object.defineProperty(array, key, {\n            configurable: true,\n            enumerable: false,\n            value (...args) {\n                const res = base.apply(this, args);\n                array._chartjs.listeners.forEach((object)=>{\n                    if (typeof object[method] === 'function') {\n                        object[method](...args);\n                    }\n                });\n                return res;\n            }\n        });\n    });\n}\nfunction unlistenArrayEvents(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) {\n        return;\n    }\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n        listeners.splice(index, 1);\n    }\n    if (listeners.length > 0) {\n        return;\n    }\n    arrayEvents.forEach((key)=>{\n        delete array[key];\n    });\n    delete array._chartjs;\n}\n/**\n * @param items\n */ function _arrayUnique(items) {\n    const set = new Set(items);\n    if (set.size === items.length) {\n        return items;\n    }\n    return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n/**\n* Request animation polyfill\n*/ const requestAnimFrame = function() {\n    if (typeof window === 'undefined') {\n        return function(callback) {\n            return callback();\n        };\n    }\n    return window.requestAnimationFrame;\n}();\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */ function throttled(fn, thisArg) {\n    let argsToUse = [];\n    let ticking = false;\n    return function(...args) {\n        // Save the args for use later\n        argsToUse = args;\n        if (!ticking) {\n            ticking = true;\n            requestAnimFrame.call(window, ()=>{\n                ticking = false;\n                fn.apply(thisArg, argsToUse);\n            });\n        }\n    };\n}\n/**\n * Debounces calling `fn` for `delay` ms\n */ function debounce(fn, delay) {\n    let timeout;\n    return function(...args) {\n        if (delay) {\n            clearTimeout(timeout);\n            timeout = setTimeout(fn, delay, args);\n        } else {\n            fn.apply(this, args);\n        }\n        return delay;\n    };\n}\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */ const _textX = (align, left, right, rtl)=>{\n    const check = rtl ? 'left' : 'right';\n    return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n/**\n * Return start and count of visible points.\n * @private\n */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n        const { iScale , _parsed  } = meta;\n        const axis = iScale.axis;\n        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n        if (minDefined) {\n            start = _limitValue(Math.min(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);\n        }\n        if (maxDefined) {\n            count = _limitValue(Math.max(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;\n        } else {\n            count = pointCount - start;\n        }\n    }\n    return {\n        start,\n        count\n    };\n}\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */ function _scaleRangesChanged(meta) {\n    const { xScale , yScale , _scaleRanges  } = meta;\n    const newRanges = {\n        xmin: xScale.min,\n        xmax: xScale.max,\n        ymin: yScale.min,\n        ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n        meta._scaleRanges = newRanges;\n        return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n}\n\nconst atEdge = (t)=>t === 0 || t === 1;\nconst elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */ const effects = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>-t * (t - 2),\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,\n    easeOutSine: (t)=>Math.sin(t * HALF_PI),\n    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n    easeInOutElastic (t) {\n        const s = 0.1125;\n        const p = 0.45;\n        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack (t) {\n        const s = 1.70158;\n        return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack (t) {\n        const s = 1.70158;\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack (t) {\n        let s = 1.70158;\n        if ((t /= 0.5) < 1) {\n            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n        }\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),\n    easeOutBounce (t) {\n        const m = 7.5625;\n        const d = 2.75;\n        if (t < 1 / d) {\n            return m * t * t;\n        }\n        if (t < 2 / d) {\n            return m * (t -= 1.5 / d) * t + 0.75;\n        }\n        if (t < 2.5 / d) {\n            return m * (t -= 2.25 / d) * t + 0.9375;\n        }\n        return m * (t -= 2.625 / d) * t + 0.984375;\n    },\n    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\n\nfunction isPatternOrGradient(value) {\n    if (value && typeof value === 'object') {\n        const type = value.toString();\n        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n    }\n    return false;\n}\nfunction color(value) {\n    return isPatternOrGradient(value) ? value : new Color(value);\n}\nfunction getHoverColor(value) {\n    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst numbers = [\n    'x',\n    'y',\n    'borderWidth',\n    'radius',\n    'tension'\n];\nconst colors = [\n    'color',\n    'borderColor',\n    'backgroundColor'\n];\nfunction applyAnimationsDefaults(defaults) {\n    defaults.set('animation', {\n        delay: undefined,\n        duration: 1000,\n        easing: 'easeOutQuart',\n        fn: undefined,\n        from: undefined,\n        loop: undefined,\n        to: undefined,\n        type: undefined\n    });\n    defaults.describe('animation', {\n        _fallback: false,\n        _indexable: false,\n        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\n    });\n    defaults.set('animations', {\n        colors: {\n            type: 'color',\n            properties: colors\n        },\n        numbers: {\n            type: 'number',\n            properties: numbers\n        }\n    });\n    defaults.describe('animations', {\n        _fallback: 'animation'\n    });\n    defaults.set('transitions', {\n        active: {\n            animation: {\n                duration: 400\n            }\n        },\n        resize: {\n            animation: {\n                duration: 0\n            }\n        },\n        show: {\n            animations: {\n                colors: {\n                    from: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    duration: 0\n                }\n            }\n        },\n        hide: {\n            animations: {\n                colors: {\n                    to: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    easing: 'linear',\n                    fn: (v)=>v | 0\n                }\n            }\n        }\n    });\n}\n\nfunction applyLayoutsDefaults(defaults) {\n    defaults.set('layout', {\n        autoPadding: true,\n        padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    });\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = intlCache.get(cacheKey);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(locale, options);\n        intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n}\nfunction formatNumber(num, locale, options) {\n    return getNumberFormat(locale, options).format(num);\n}\n\nconst formatters = {\n values (value) {\n        return isArray(value) ?  value : '' + value;\n    },\n numeric (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const locale = this.chart.options.locale;\n        let notation;\n        let delta = tickValue;\n        if (ticks.length > 1) {\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n            if (maxTick < 1e-4 || maxTick > 1e+15) {\n                notation = 'scientific';\n            }\n            delta = calculateDelta(tickValue, ticks);\n        }\n        const logDelta = log10(Math.abs(delta));\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n        const options = {\n            notation,\n            minimumFractionDigits: numDecimal,\n            maximumFractionDigits: numDecimal\n        };\n        Object.assign(options, this.options.ticks.format);\n        return formatNumber(tickValue, locale, options);\n    },\n logarithmic (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\n        if ([\n            1,\n            2,\n            3,\n            5,\n            10,\n            15\n        ].includes(remain) || index > 0.8 * ticks.length) {\n            return formatters.numeric.call(this, tickValue, index, ticks);\n        }\n        return '';\n    }\n};\nfunction calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n        delta = tickValue - Math.floor(tickValue);\n    }\n    return delta;\n}\n var Ticks = {\n    formatters\n};\n\nfunction applyScaleDefaults(defaults) {\n    defaults.set('scale', {\n        display: true,\n        offset: false,\n        reverse: false,\n        beginAtZero: false,\n bounds: 'ticks',\n        clip: true,\n grace: 0,\n        grid: {\n            display: true,\n            lineWidth: 1,\n            drawOnChartArea: true,\n            drawTicks: true,\n            tickLength: 8,\n            tickWidth: (_ctx, options)=>options.lineWidth,\n            tickColor: (_ctx, options)=>options.color,\n            offset: false\n        },\n        border: {\n            display: true,\n            dash: [],\n            dashOffset: 0.0,\n            width: 1\n        },\n        title: {\n            display: false,\n            text: '',\n            padding: {\n                top: 4,\n                bottom: 4\n            }\n        },\n        ticks: {\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: false,\n            textStrokeWidth: 0,\n            textStrokeColor: '',\n            padding: 3,\n            display: true,\n            autoSkip: true,\n            autoSkipPadding: 3,\n            labelOffset: 0,\n            callback: Ticks.formatters.values,\n            minor: {},\n            major: {},\n            align: 'center',\n            crossAlign: 'near',\n            showLabelBackdrop: false,\n            backdropColor: 'rgba(255, 255, 255, 0.75)',\n            backdropPadding: 2\n        }\n    });\n    defaults.route('scale.ticks', 'color', '', 'color');\n    defaults.route('scale.grid', 'color', '', 'borderColor');\n    defaults.route('scale.border', 'color', '', 'borderColor');\n    defaults.route('scale.title', 'color', '', 'color');\n    defaults.describe('scale', {\n        _fallback: false,\n        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'\n    });\n    defaults.describe('scales', {\n        _fallback: 'scale'\n    });\n    defaults.describe('scale.ticks', {\n        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',\n        _indexable: (name)=>name !== 'backdropPadding'\n    });\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\n function getScope$1(node, key) {\n    if (!key) {\n        return node;\n    }\n    const keys = key.split('.');\n    for(let i = 0, n = keys.length; i < n; ++i){\n        const k = keys[i];\n        node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n}\nfunction set(root, scope, values) {\n    if (typeof scope === 'string') {\n        return merge(getScope$1(root, scope), values);\n    }\n    return merge(getScope$1(root, ''), scope);\n}\n class Defaults {\n    constructor(_descriptors, _appliers){\n        this.animation = undefined;\n        this.backgroundColor = 'rgba(0,0,0,0.1)';\n        this.borderColor = 'rgba(0,0,0,0.1)';\n        this.color = '#666';\n        this.datasets = {};\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\n        this.elements = {};\n        this.events = [\n            'mousemove',\n            'mouseout',\n            'click',\n            'touchstart',\n            'touchmove'\n        ];\n        this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: 'normal',\n            lineHeight: 1.2,\n            weight: null\n        };\n        this.hover = {};\n        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);\n        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);\n        this.hoverColor = (ctx, options)=>getHoverColor(options.color);\n        this.indexAxis = 'x';\n        this.interaction = {\n            mode: 'nearest',\n            intersect: true,\n            includeInvisible: false\n        };\n        this.maintainAspectRatio = true;\n        this.onHover = null;\n        this.onClick = null;\n        this.parsing = true;\n        this.plugins = {};\n        this.responsive = true;\n        this.scale = undefined;\n        this.scales = {};\n        this.showLine = true;\n        this.drawActiveElementsOnTop = true;\n        this.describe(_descriptors);\n        this.apply(_appliers);\n    }\n set(scope, values) {\n        return set(this, scope, values);\n    }\n get(scope) {\n        return getScope$1(this, scope);\n    }\n describe(scope, values) {\n        return set(descriptors, scope, values);\n    }\n    override(scope, values) {\n        return set(overrides, scope, values);\n    }\n route(scope, name, targetScope, targetName) {\n        const scopeObject = getScope$1(this, scope);\n        const targetScopeObject = getScope$1(this, targetScope);\n        const privateName = '_' + name;\n        Object.defineProperties(scopeObject, {\n            [privateName]: {\n                value: scopeObject[name],\n                writable: true\n            },\n            [name]: {\n                enumerable: true,\n                get () {\n                    const local = this[privateName];\n                    const target = targetScopeObject[targetName];\n                    if (isObject(local)) {\n                        return Object.assign({}, target, local);\n                    }\n                    return valueOrDefault(local, target);\n                },\n                set (value) {\n                    this[privateName] = value;\n                }\n            }\n        });\n    }\n    apply(appliers) {\n        appliers.forEach((apply)=>apply(this));\n    }\n}\nvar defaults = /* #__PURE__ */ new Defaults({\n    _scriptable: (name)=>!name.startsWith('on'),\n    _indexable: (name)=>name !== 'events',\n    hover: {\n        _fallback: 'interaction'\n    },\n    interaction: {\n        _scriptable: false,\n        _indexable: false\n    }\n}, [\n    applyAnimationsDefaults,\n    applyLayoutsDefaults,\n    applyScaleDefaults\n]);\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */ function toFontString(font) {\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n        return null;\n    }\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n/**\n * @private\n */ function _measureText(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n    }\n    if (textWidth > longest) {\n        longest = textWidth;\n    }\n    return longest;\n}\n/**\n * @private\n */ // eslint-disable-next-line complexity\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for(i = 0; i < ilen; i++){\n        thing = arrayOfThings[i];\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && !isArray(thing)) {\n            longest = _measureText(ctx, data, gc, longest, thing);\n        } else if (isArray(thing)) {\n            // if it is an array lets measure each element\n            // to do maybe simplify this function a bit so we can do this more recursively?\n            for(j = 0, jlen = thing.length; j < jlen; j++){\n                nestedThing = thing[j];\n                // Undefined strings and arrays should not be measured\n                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n                    longest = _measureText(ctx, data, gc, longest, nestedThing);\n                }\n            }\n        }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n        for(i = 0; i < gcLen; i++){\n            delete data[gc[i]];\n        }\n        gc.splice(0, gcLen);\n    }\n    return longest;\n}\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */ function _alignPixel(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n/**\n * Clears the entire canvas.\n */ function clearCanvas(canvas, ctx) {\n    ctx = ctx || canvas.getContext('2d');\n    ctx.save();\n    // canvas.width and canvas.height do not consider the canvas transform,\n    // while clearRect does\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    drawPointLegend(ctx, options, x, y, null);\n}\n// eslint-disable-next-line complexity\nfunction drawPointLegend(ctx, options, x, y, w) {\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * RAD_PER_DEG;\n    if (style && typeof style === 'object') {\n        type = style.toString();\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rad);\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n            ctx.restore();\n            return;\n        }\n    }\n    if (isNaN(radius) || radius <= 0) {\n        return;\n    }\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            if (w) {\n                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n            } else {\n                ctx.arc(x, y, radius, 0, TAU);\n            }\n            ctx.closePath();\n            break;\n        case 'triangle':\n            width = w ? w / 2 : radius;\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case 'rectRounded':\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + QUARTER_PI) * size;\n            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            yOffset = Math.sin(rad + QUARTER_PI) * size;\n            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n            ctx.closePath();\n            break;\n        case 'rect':\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                width = w ? w / 2 : size;\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\n                break;\n            }\n            rad += QUARTER_PI;\n        /* falls through */ case 'rectRot':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            ctx.closePath();\n            break;\n        case 'crossRot':\n            rad += QUARTER_PI;\n        /* falls through */ case 'cross':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'star':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            rad += QUARTER_PI;\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'line':\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case 'dash':\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n            break;\n        case false:\n            ctx.closePath();\n            break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) {\n        ctx.stroke();\n    }\n}\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */ function _isPointInArea(point, area, margin) {\n    margin = margin || 0.5; // margin - default is to match rounded decimals\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\nfunction clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n}\nfunction unclipArea(ctx) {\n    ctx.restore();\n}\n/**\n * @private\n */ function _steppedLineTo(ctx, previous, target, flip, mode) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    if (mode === 'middle') {\n        const midpoint = (previous.x + target.x) / 2.0;\n        ctx.lineTo(midpoint, previous.y);\n        ctx.lineTo(midpoint, target.y);\n    } else if (mode === 'after' !== !!flip) {\n        ctx.lineTo(previous.x, target.y);\n    } else {\n        ctx.lineTo(target.x, previous.y);\n    }\n    ctx.lineTo(target.x, target.y);\n}\n/**\n * @private\n */ function _bezierCurveTo(ctx, previous, target, flip) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\nfunction setRenderOpts(ctx, opts) {\n    if (opts.translation) {\n        ctx.translate(opts.translation[0], opts.translation[1]);\n    }\n    if (!isNullOrUndef(opts.rotation)) {\n        ctx.rotate(opts.rotation);\n    }\n    if (opts.color) {\n        ctx.fillStyle = opts.color;\n    }\n    if (opts.textAlign) {\n        ctx.textAlign = opts.textAlign;\n    }\n    if (opts.textBaseline) {\n        ctx.textBaseline = opts.textBaseline;\n    }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n    if (opts.strikethrough || opts.underline) {\n        /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */ const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n    }\n}\nfunction drawBackdrop(ctx, opts) {\n    const oldColor = ctx.fillStyle;\n    ctx.fillStyle = opts.color;\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n    ctx.fillStyle = oldColor;\n}\n/**\n * Render text onto the canvas\n */ function renderText(ctx, text, x, y, font, opts = {}) {\n    const lines = isArray(text) ? text : [\n        text\n    ];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n    let i, line;\n    ctx.save();\n    ctx.font = font.string;\n    setRenderOpts(ctx, opts);\n    for(i = 0; i < lines.length; ++i){\n        line = lines[i];\n        if (opts.backdrop) {\n            drawBackdrop(ctx, opts.backdrop);\n        }\n        if (stroke) {\n            if (opts.strokeColor) {\n                ctx.strokeStyle = opts.strokeColor;\n            }\n            if (!isNullOrUndef(opts.strokeWidth)) {\n                ctx.lineWidth = opts.strokeWidth;\n            }\n            ctx.strokeText(line, x, y, opts.maxWidth);\n        }\n        ctx.fillText(line, x, y, opts.maxWidth);\n        decorateText(ctx, x, y, line, opts);\n        y += Number(font.lineHeight);\n    }\n    ctx.restore();\n}\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */ function addRoundedRectPath(ctx, rect) {\n    const { x , y , w , h , radius  } = rect;\n    // top left arc\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n    // line from top left to bottom left\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    // bottom left arc\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n    // line from bottom left to bottom right\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    // bottom right arc\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n    // line from bottom right to top right\n    ctx.lineTo(x + w, y + radius.topRight);\n    // top right arc\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n    // line from top right to top left\n    ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n/**\n * @alias Chart.helpers.options\n * @namespace\n */ /**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */ function toLineHeight(value, size) {\n    const matches = ('' + value).match(LINE_HEIGHT);\n    if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n    }\n    value = +matches[2];\n    switch(matches[3]){\n        case 'px':\n            return value;\n        case '%':\n            value /= 100;\n            break;\n    }\n    return size * value;\n}\nconst numberOrZero = (v)=>+v || 0;\nfunction _readValueToProps(value, props) {\n    const ret = {};\n    const objProps = isObject(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\n    for (const prop of keys){\n        ret[prop] = numberOrZero(read(prop));\n    }\n    return ret;\n}\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */ function toTRBL(value) {\n    return _readValueToProps(value, {\n        top: 'y',\n        right: 'x',\n        bottom: 'y',\n        left: 'x'\n    });\n}\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */ function toTRBLCorners(value) {\n    return _readValueToProps(value, [\n        'topLeft',\n        'topRight',\n        'bottomLeft',\n        'bottomRight'\n    ]);\n}\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */ function toPadding(value) {\n    const obj = toTRBL(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n}\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */ function toFont(options, fallback) {\n    options = options || {};\n    fallback = fallback || defaults.font;\n    let size = valueOrDefault(options.size, fallback.size);\n    if (typeof size === 'string') {\n        size = parseInt(size, 10);\n    }\n    let style = valueOrDefault(options.style, fallback.style);\n    if (style && !('' + style).match(FONT_STYLE)) {\n        console.warn('Invalid font style specified: \"' + style + '\"');\n        style = undefined;\n    }\n    const font = {\n        family: valueOrDefault(options.family, fallback.family),\n        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n        size,\n        style,\n        weight: valueOrDefault(options.weight, fallback.weight),\n        string: ''\n    };\n    font.string = toFontString(font);\n    return font;\n}\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */ function resolve(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\n        value = inputs[i];\n        if (value === undefined) {\n            continue;\n        }\n        if (context !== undefined && typeof value === 'function') {\n            value = value(context);\n            cacheable = false;\n        }\n        if (index !== undefined && isArray(value)) {\n            value = value[index % value.length];\n            cacheable = false;\n        }\n        if (value !== undefined) {\n            if (info && !cacheable) {\n                info.cacheable = false;\n            }\n            return value;\n        }\n    }\n}\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */ function _addGrace(minmax, grace, beginAtZero) {\n    const { min , max  } = minmax;\n    const change = toDimension(grace, (max - min) / 2);\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\n    return {\n        min: keepZero(min, -Math.abs(change)),\n        max: keepZero(max, change)\n    };\n}\nfunction createContext(parentContext, context) {\n    return Object.assign(Object.create(parentContext), context);\n}\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */ function _createResolver(scopes, prefixes = [\n    ''\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\n    const finalRootScopes = rootScopes || scopes;\n    if (typeof fallback === 'undefined') {\n        fallback = _resolve('_fallback', scopes);\n    }\n    const cache = {\n        [Symbol.toStringTag]: 'Object',\n        _cacheable: true,\n        _scopes: scopes,\n        _rootScopes: finalRootScopes,\n        _fallback: fallback,\n        _getTarget: getTarget,\n        override: (scope)=>_createResolver([\n                scope,\n                ...scopes\n            ], prefixes, finalRootScopes, fallback)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete target._keys; // remove cached keys\n            delete scopes[0][prop]; // remove from top level scope\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop) {\n            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(scopes[0]);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return getKeysFromAllScopes(target).includes(prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys (target) {\n            return getKeysFromAllScopes(target);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            const storage = target._storage || (target._storage = getTarget());\n            target[prop] = storage[prop] = value; // set to top level scope + cache\n            delete target._keys; // remove cached keys\n            return true;\n        }\n    });\n}\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n        _cacheable: false,\n        _proxy: proxy,\n        _context: context,\n        _subProxy: subProxy,\n        _stack: new Set(),\n        _descriptors: _descriptors(proxy, descriptorDefaults),\n        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),\n        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete proxy[prop]; // remove from proxy\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop, receiver) {\n            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n                enumerable: true,\n                configurable: true\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(proxy);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return Reflect.has(proxy, prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys () {\n            return Reflect.ownKeys(proxy);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            proxy[prop] = value; // set to proxy\n            delete target[prop]; // remove from cache\n            return true;\n        }\n    });\n}\n/**\n * @private\n */ function _descriptors(proxy, defaults = {\n    scriptable: true,\n    indexable: true\n}) {\n    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;\n    return {\n        allKeys: _allKeys,\n        scriptable: _scriptable,\n        indexable: _indexable,\n        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,\n        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable\n    };\n}\nconst readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n    if (Object.prototype.hasOwnProperty.call(target, prop)) {\n        return target[prop];\n    }\n    const value = resolve();\n    // cache the resolved value\n    target[prop] = value;\n    return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    let value = _proxy[prop]; // resolve from proxy\n    // resolve with context\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\n        value = _resolveScriptable(prop, value, target, receiver);\n    }\n    if (isArray(value) && value.length) {\n        value = _resolveArray(prop, value, target, descriptors.isIndexable);\n    }\n    if (needsSubResolver(prop, value)) {\n        // if the resolved value is an object, create a sub resolver for it\n        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n    }\n    return value;\n}\nfunction _resolveScriptable(prop, getValue, target, receiver) {\n    const { _proxy , _context , _subProxy , _stack  } = target;\n    if (_stack.has(prop)) {\n        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n    }\n    _stack.add(prop);\n    let value = getValue(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if (needsSubResolver(prop, value)) {\n        // When scriptable option returns an object, create a resolver on that.\n        value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n    }\n    return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n        return value[_context.index % value.length];\n    } else if (isObject(value[0])) {\n        // Array of objects, return array or resolvers\n        const arr = value;\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\n        value = [];\n        for (const item of arr){\n            const resolver = createSubResolver(scopes, _proxy, prop, item);\n            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n        }\n    }\n    return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n    for (const parent of parentScopes){\n        const scope = getScope(key, parent);\n        if (scope) {\n            set.add(scope);\n            const fallback = resolveFallback(scope._fallback, key, value);\n            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n                // When we reach the descriptor that defines a new _fallback, return that.\n                // The fallback will resume to that new scope.\n                return fallback;\n            }\n        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n            // Fallback to `false` results to `false`, when falling back to different key.\n            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n            return null;\n        }\n    }\n    return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [\n        ...parentScopes,\n        ...rootScopes\n    ];\n    const set = new Set();\n    set.add(value);\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n    if (key === null) {\n        return false;\n    }\n    if (typeof fallback !== 'undefined' && fallback !== prop) {\n        key = addScopesFromKey(set, allScopes, fallback, key, value);\n        if (key === null) {\n            return false;\n        }\n    }\n    return _createResolver(Array.from(set), [\n        ''\n    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n    while(key){\n        key = addScopes(set, allScopes, key, fallback, item);\n    }\n    return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) {\n        parent[prop] = {};\n    }\n    const target = parent[prop];\n    if (isArray(target) && isObject(value)) {\n        // For array of objects, the object is used to store updated values\n        return value;\n    }\n    return target || {};\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes){\n        value = _resolve(readKey(prefix, prop), scopes);\n        if (typeof value !== 'undefined') {\n            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n        }\n    }\n}\nfunction _resolve(key, scopes) {\n    for (const scope of scopes){\n        if (!scope) {\n            continue;\n        }\n        const value = scope[key];\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n    }\n}\nfunction getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) {\n        keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n    }\n    return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes){\n        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){\n            set.add(key);\n        }\n    }\n    return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n    const { iScale  } = meta;\n    const { key ='r'  } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for(i = 0, ilen = count; i < ilen; ++i){\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n            r: iScale.parse(resolveObjectKey(item, key), index)\n        };\n    }\n    return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n    // This function must also respect \"skipped\" points\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = distanceBetweenPoints(current, previous);\n    const d12 = distanceBetweenPoints(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    // If all points are the same, s01 & s02 will be inf\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01; // scaling factor for triangle Ta\n    const fb = t * s12;\n    return {\n        previous: {\n            x: current.x - fa * (next.x - previous.x),\n            y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n            x: current.x + fb * (next.x - previous.x),\n            y: current.y + fb * (next.y - previous.y)\n        }\n    };\n}\n/**\n * Adjust tangents to ensure monotonic properties\n */ function monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen - 1; ++i){\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent || !pointAfter) {\n            continue;\n        }\n        if (almostEquals(deltaK[i], 0, EPSILON)) {\n            mK[i] = mK[i + 1] = 0;\n            continue;\n        }\n        alphaK = mK[i] / deltaK[i];\n        betaK = mK[i + 1] / deltaK[i];\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n        if (squaredMagnitude <= 9) {\n            continue;\n        }\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        mK[i] = alphaK * tauK * deltaK[i];\n        mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        const iPixel = pointCurrent[indexAxis];\n        const vPixel = pointCurrent[valueAxis];\n        if (pointBefore) {\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n        }\n        if (pointAfter) {\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n        }\n    }\n}\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */ function splineCurveMonotone(points, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    // Calculate slopes (deltaK) and initialize tangents (mK)\n    let i, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        if (pointAfter) {\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n        }\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    monotoneAdjust(points, deltaK, mK);\n    monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = _isPointInArea(points[0], area);\n    for(i = 0, ilen = points.length; i < ilen; ++i){\n        inAreaPrev = inArea;\n        inArea = inAreaNext;\n        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n        if (!inArea) {\n            continue;\n        }\n        point = points[i];\n        if (inAreaPrev) {\n            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n        }\n        if (inAreaNext) {\n            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n        }\n    }\n}\n/**\n * @private\n */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    // Only consider points that are drawn in case the spanGaps option is used\n    if (options.spanGaps) {\n        points = points.filter((pt)=>!pt.skip);\n    }\n    if (options.cubicInterpolationMode === 'monotone') {\n        splineCurveMonotone(points, indexAxis);\n    } else {\n        let prev = loop ? points[points.length - 1] : points[0];\n        for(i = 0, ilen = points.length; i < ilen; ++i){\n            point = points[i];\n            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n            point.cp1x = controlPoints.previous.x;\n            point.cp1y = controlPoints.previous.y;\n            point.cp2x = controlPoints.next.x;\n            point.cp2y = controlPoints.next.y;\n            prev = point;\n        }\n    }\n    if (options.capBezierPoints) {\n        capBezierPoints(points, area);\n    }\n}\n\n/**\n * Note: typedefs are auto-exported, so use a made-up `dom` namespace where\n * necessary to avoid duplicates with `export * from './helpers`; see\n * https://github.com/microsoft/TypeScript/issues/46011\n * @typedef { import('../core/core.controller.js').default } dom.Chart\n * @typedef { import('../../types').ChartEvent } ChartEvent\n */ /**\n * @private\n */ function _isDomSupported() {\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\n * @private\n */ function _getParentNode(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n    }\n    return parent;\n}\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */ function parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n        if (styleValue.indexOf('%') !== -1) {\n            // percentage * size in dimension\n            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n    } else {\n        valueInPixels = styleValue;\n    }\n    return valueInPixels;\n}\nconst getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n    return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = [\n    'top',\n    'right',\n    'bottom',\n    'left'\n];\nfunction getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? '-' + suffix : '';\n    for(let i = 0; i < 4; i++){\n        const pos = positions[i];\n        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n}\nconst useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */ function getCanvasPosition(e, canvas) {\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX , offsetY  } = source;\n    let box = false;\n    let x, y;\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\n        x = offsetX;\n        y = offsetY;\n    } else {\n        const rect = canvas.getBoundingClientRect();\n        x = source.clientX - rect.left;\n        y = source.clientY - rect.top;\n        box = true;\n    }\n    return {\n        x,\n        y,\n        box\n    };\n}\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */ function getRelativePosition(event, chart) {\n    if ('native' in event) {\n        return event;\n    }\n    const { canvas , currentDevicePixelRatio  } = chart;\n    const style = getComputedStyle(canvas);\n    const borderBox = style.boxSizing === 'border-box';\n    const paddings = getPositionedStyle(style, 'padding');\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const { x , y , box  } = getCanvasPosition(event, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width , height  } = chart;\n    if (borderBox) {\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    return {\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n}\nfunction getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n        const container = _getParentNode(canvas);\n        if (!container) {\n            width = canvas.clientWidth;\n            height = canvas.clientHeight;\n        } else {\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\n            const containerStyle = getComputedStyle(container);\n            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n            const containerPadding = getPositionedStyle(containerStyle, 'padding');\n            width = rect.width - containerPadding.width - containerBorder.width;\n            height = rect.height - containerPadding.height - containerBorder.height;\n            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n        }\n    }\n    return {\n        width,\n        height,\n        maxWidth: maxWidth || INFINITY,\n        maxHeight: maxHeight || INFINITY\n    };\n}\nconst round1 = (v)=>Math.round(v * 10) / 10;\n// eslint-disable-next-line complexity\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = getComputedStyle(canvas);\n    const margins = getPositionedStyle(style, 'margin');\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n    let { width , height  } = containerSize;\n    if (style.boxSizing === 'content-box') {\n        const borders = getPositionedStyle(style, 'border', 'width');\n        const paddings = getPositionedStyle(style, 'padding');\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) {\n        // https://github.com/chartjs/Chart.js/issues/4659\n        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n        height = round1(width / 2);\n    }\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n        height = containerSize.height;\n        width = round1(Math.floor(height * aspectRatio));\n    }\n    return {\n        width,\n        height\n    };\n}\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */ function retinaScale(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = Math.floor(chart.height * pixelRatio);\n    const deviceWidth = Math.floor(chart.width * pixelRatio);\n    chart.height = Math.floor(chart.height);\n    chart.width = Math.floor(chart.width);\n    const canvas = chart.canvas;\n    // If no style has been set on the canvas, the render size is used as display size,\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n    // See https://github.com/chartjs/Chart.js/issues/3575\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n        canvas.style.height = `${chart.height}px`;\n        canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n        chart.currentDevicePixelRatio = pixelRatio;\n        canvas.height = deviceHeight;\n        canvas.width = deviceWidth;\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        return true;\n    }\n    return false;\n}\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */ const supportsEventListenerOptions = function() {\n    let passiveSupported = false;\n    try {\n        const options = {\n            get passive () {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        window.addEventListener('test', null, options);\n        window.removeEventListener('test', null, options);\n    } catch (e) {\n    // continue regardless of error\n    }\n    return passiveSupported;\n}();\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */ function readUsedSize(element, property) {\n    const value = getStyle(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n}\n\n/**\n * @private\n */ function _pointInLine(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n}\n/**\n * @private\n */ function _steppedInterpolation(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n    };\n}\n/**\n * @private\n */ function _bezierInterpolation(p1, p2, t, mode) {\n    const cp1 = {\n        x: p1.cp2x,\n        y: p1.cp2y\n    };\n    const cp2 = {\n        x: p2.cp1x,\n        y: p2.cp1y\n    };\n    const a = _pointInLine(p1, cp1, t);\n    const b = _pointInLine(cp1, cp2, t);\n    const c = _pointInLine(cp2, p2, t);\n    const d = _pointInLine(a, b, t);\n    const e = _pointInLine(b, c, t);\n    return _pointInLine(d, e, t);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n    return {\n        x (x) {\n            return rectX + rectX + width - x;\n        },\n        setWidth (w) {\n            width = w;\n        },\n        textAlign (align) {\n            if (align === 'center') {\n                return align;\n            }\n            return align === 'right' ? 'left' : 'right';\n        },\n        xPlus (x, value) {\n            return x - value;\n        },\n        leftForLtr (x, itemWidth) {\n            return x - itemWidth;\n        }\n    };\n};\nconst getLeftToRightAdapter = function() {\n    return {\n        x (x) {\n            return x;\n        },\n        setWidth (w) {},\n        textAlign (align) {\n            return align;\n        },\n        xPlus (x, value) {\n            return x + value;\n        },\n        leftForLtr (x, _itemWidth) {\n            return x;\n        }\n    };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n    let style, original;\n    if (direction === 'ltr' || direction === 'rtl') {\n        style = ctx.canvas.style;\n        original = [\n            style.getPropertyValue('direction'),\n            style.getPropertyPriority('direction')\n        ];\n        style.setProperty('direction', direction, 'important');\n        ctx.prevTextDirection = original;\n    }\n}\nfunction restoreTextDirection(ctx, original) {\n    if (original !== undefined) {\n        delete ctx.prevTextDirection;\n        ctx.canvas.style.setProperty('direction', original[0], original[1]);\n    }\n}\n\nfunction propertyFn(property) {\n    if (property === 'angle') {\n        return {\n            between: _angleBetween,\n            compare: _angleDiff,\n            normalize: _normalizeAngle\n        };\n    }\n    return {\n        between: _isBetween,\n        compare: (a, b)=>a - b,\n        normalize: (x)=>x\n    };\n}\nfunction normalizeSegment({ start , end , count , loop , style  }) {\n    return {\n        start: start % count,\n        end: end % count,\n        loop: loop && (end - start + 1) % count === 0,\n        style\n    };\n}\nfunction getSegment(segment, points, bounds) {\n    const { property , start: startBound , end: endBound  } = bounds;\n    const { between , normalize  } = propertyFn(property);\n    const count = points.length;\n    let { start , end , loop  } = segment;\n    let i, ilen;\n    if (loop) {\n        start += count;\n        end += count;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n                break;\n            }\n            start--;\n            end--;\n        }\n        start %= count;\n        end %= count;\n    }\n    if (end < start) {\n        end += count;\n    }\n    return {\n        start,\n        end,\n        loop,\n        style: segment.style\n    };\n}\n function _boundSegment(segment, points, bounds) {\n    if (!bounds) {\n        return [\n            segment\n        ];\n    }\n    const { property , start: startBound , end: endBound  } = bounds;\n    const count = points.length;\n    const { compare , between , normalize  } = propertyFn(property);\n    const { start , end , loop , style  } = getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = ()=>inside || startIsBefore();\n    const shouldStop = ()=>!inside || endIsBefore();\n    for(let i = start, prev = start; i <= end; ++i){\n        point = points[i % count];\n        if (point.skip) {\n            continue;\n        }\n        value = normalize(point[property]);\n        if (value === prevValue) {\n            continue;\n        }\n        inside = between(value, startBound, endBound);\n        if (subStart === null && shouldStart()) {\n            subStart = compare(value, startBound) === 0 ? i : prev;\n        }\n        if (subStart !== null && shouldStop()) {\n            result.push(normalizeSegment({\n                start: subStart,\n                end: i,\n                loop,\n                count,\n                style\n            }));\n            subStart = null;\n        }\n        prev = i;\n        prevValue = value;\n    }\n    if (subStart !== null) {\n        result.push(normalizeSegment({\n            start: subStart,\n            end,\n            loop,\n            count,\n            style\n        }));\n    }\n    return result;\n}\n function _boundSegments(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for(let i = 0; i < segments.length; i++){\n        const sub = _boundSegment(segments[i], line.points, bounds);\n        if (sub.length) {\n            result.push(...sub);\n        }\n    }\n    return result;\n}\n function findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) {\n        while(start < count && !points[start].skip){\n            start++;\n        }\n    }\n    while(start < count && points[start].skip){\n        start++;\n    }\n    start %= count;\n    if (loop) {\n        end += start;\n    }\n    while(end > start && points[end % count].skip){\n        end--;\n    }\n    end %= count;\n    return {\n        start,\n        end\n    };\n}\n function solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for(end = start + 1; end <= max; ++end){\n        const cur = points[end % count];\n        if (cur.skip || cur.stop) {\n            if (!prev.skip) {\n                loop = false;\n                result.push({\n                    start: start % count,\n                    end: (end - 1) % count,\n                    loop\n                });\n                start = last = cur.stop ? end : null;\n            }\n        } else {\n            last = end;\n            if (prev.skip) {\n                start = end;\n            }\n        }\n        prev = cur;\n    }\n    if (last !== null) {\n        result.push({\n            start: start % count,\n            end: last % count,\n            loop\n        });\n    }\n    return result;\n}\n function _computeSegments(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) {\n        return [];\n    }\n    const loop = !!line._loop;\n    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) {\n        return splitByStyles(line, [\n            {\n                start,\n                end,\n                loop\n            }\n        ], points, segmentOptions);\n    }\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n function splitByStyles(line, segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\n        return segments;\n    }\n    return doSplitByStyles(line, segments, points, segmentOptions);\n}\n function doSplitByStyles(line, segments, points, segmentOptions) {\n    const chartContext = line._chart.getContext();\n    const baseStyle = readStyle(line.options);\n    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;\n    const count = points.length;\n    const result = [];\n    let prevStyle = baseStyle;\n    let start = segments[0].start;\n    let i = start;\n    function addStyle(s, e, l, st) {\n        const dir = spanGaps ? -1 : 1;\n        if (s === e) {\n            return;\n        }\n        s += count;\n        while(points[s % count].skip){\n            s -= dir;\n        }\n        while(points[e % count].skip){\n            e += dir;\n        }\n        if (s % count !== e % count) {\n            result.push({\n                start: s % count,\n                end: e % count,\n                loop: l,\n                style: st\n            });\n            prevStyle = st;\n            start = e % count;\n        }\n    }\n    for (const segment of segments){\n        start = spanGaps ? start : segment.start;\n        let prev = points[start % count];\n        let style;\n        for(i = start + 1; i <= segment.end; i++){\n            const pt = points[i % count];\n            style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n                type: 'segment',\n                p0: prev,\n                p1: pt,\n                p0DataIndex: (i - 1) % count,\n                p1DataIndex: i % count,\n                datasetIndex\n            })));\n            if (styleChanged(style, prevStyle)) {\n                addStyle(start, i - 1, segment.loop, prevStyle);\n            }\n            prev = pt;\n            prevStyle = style;\n        }\n        if (start < i - 1) {\n            addStyle(start, i - 1, segment.loop, prevStyle);\n        }\n    }\n    return result;\n}\nfunction readStyle(options) {\n    return {\n        backgroundColor: options.backgroundColor,\n        borderCapStyle: options.borderCapStyle,\n        borderDash: options.borderDash,\n        borderDashOffset: options.borderDashOffset,\n        borderJoinStyle: options.borderJoinStyle,\n        borderWidth: options.borderWidth,\n        borderColor: options.borderColor\n    };\n}\nfunction styleChanged(style, prevStyle) {\n    if (!prevStyle) {\n        return false;\n    }\n    const cache = [];\n    const replacer = function(key, value) {\n        if (!isPatternOrGradient(value)) {\n            return value;\n        }\n        if (!cache.includes(value)) {\n            cache.push(value);\n        }\n        return cache.indexOf(value);\n    };\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n\nexport { unclipArea as $, _rlookupByKey as A, _lookupByKey as B, _isPointInArea as C, getAngleFromPoint as D, toPadding as E, each as F, getMaximumSize as G, HALF_PI as H, _getParentNode as I, readUsedSize as J, supportsEventListenerOptions as K, throttled as L, _isDomSupported as M, _factorize as N, finiteOrDefault as O, PI as P, callback as Q, _addGrace as R, _limitValue as S, TAU as T, toDegrees as U, _measureText as V, _int16Range as W, _alignPixel as X, clipArea as Y, renderText as Z, _arrayUnique as _, resolve as a, fontString as a$, toFont as a0, _toLeftRightCenter as a1, _alignStartEnd as a2, overrides as a3, merge as a4, _capitalize as a5, descriptors as a6, isFunction as a7, _attachContext as a8, _createResolver as a9, overrideTextDirection as aA, _textX as aB, restoreTextDirection as aC, drawPointLegend as aD, distanceBetweenPoints as aE, noop as aF, _setMinAndMaxByKey as aG, niceNum as aH, almostWhole as aI, almostEquals as aJ, _decimalPlaces as aK, Ticks as aL, log10 as aM, _longestText as aN, _filterBetween as aO, _lookup as aP, isPatternOrGradient as aQ, getHoverColor as aR, clone as aS, _merger as aT, _mergerIf as aU, _deprecated as aV, _splitKey as aW, toFontString as aX, splineCurve as aY, splineCurveMonotone as aZ, getStyle as a_, _descriptors as aa, mergeIf as ab, uid as ac, debounce as ad, retinaScale as ae, clearCanvas as af, setsEqual as ag, _elementsEqual as ah, _isClickEvent as ai, _isBetween as aj, _readValueToProps as ak, _updateBezierControlPoints as al, _computeSegments as am, _boundSegments as an, _steppedInterpolation as ao, _bezierInterpolation as ap, _pointInLine as aq, _steppedLineTo as ar, _bezierCurveTo as as, drawPoint as at, addRoundedRectPath as au, toTRBL as av, toTRBLCorners as aw, _boundSegment as ax, _normalizeAngle as ay, getRtlAdapter as az, isArray as b, toLineHeight as b0, PITAU as b1, INFINITY as b2, RAD_PER_DEG as b3, QUARTER_PI as b4, TWO_THIRDS_PI as b5, _angleDiff as b6, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, defined as h, isObject as i, createContext as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, getRelativePosition as z };\n//# sourceMappingURL=helpers.segment.js.map\n","/**\n * @namespace Chart.helpers\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ActiveDataPoint, ChartEvent} from '../types/index.js';\n\n/**\n * An empty function that can be used, for example, for optional callback.\n */\nexport function noop() {\n  /* noop */\n}\n\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */\nexport const uid = (() => {\n  let id = 0;\n  return () => id++;\n})();\n\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */\nexport function isNullOrUndef(value: unknown): value is null | undefined {\n  return value === null || typeof value === 'undefined';\n}\n\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */\nexport function isArray<T = unknown>(value: unknown): value is T[] {\n  if (Array.isArray && Array.isArray(value)) {\n    return true;\n  }\n  const type = Object.prototype.toString.call(value);\n  if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */\nexport function isObject(value: unknown): value is AnyObject {\n  return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */\nfunction isNumberFinite(value: unknown): value is number {\n  return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\nexport {\n  isNumberFinite as isFinite,\n};\n\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */\nexport function finiteOrDefault(value: unknown, defaultValue: number) {\n  return isNumberFinite(value) ? value : defaultValue;\n}\n\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */\nexport function valueOrDefault<T>(value: T | undefined, defaultValue: T) {\n  return typeof value === 'undefined' ? defaultValue : value;\n}\n\nexport const toPercentage = (value: number | string, dimension: number) =>\n  typeof value === 'string' && value.endsWith('%') ?\n    parseFloat(value) / 100\n    : +value / dimension;\n\nexport const toDimension = (value: number | string, dimension: number) =>\n  typeof value === 'string' && value.endsWith('%') ?\n    parseFloat(value) / 100 * dimension\n    : +value;\n\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */\nexport function callback<T extends (this: TA, ...restArgs: unknown[]) => R, TA, R>(\n  fn: T | undefined,\n  args: unknown[],\n  thisArg?: TA\n): R | undefined {\n  if (fn && typeof fn.call === 'function') {\n    return fn.apply(thisArg, args);\n  }\n}\n\n/**\n * Note(SB) for performance sake, this method should only be used when loopable type\n * is unknown or in none intensive code (not called often and small loopable). Else\n * it's preferable to use a regular for() loop and save extra function calls.\n * @param loopable - The object or array to be iterated.\n * @param fn - The function to call for each item.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n * @param [reverse] - If true, iterates backward on the loopable.\n */\nexport function each<T, TA>(\n  loopable: Record<string, T>,\n  fn: (this: TA, v: T, i: string) => void,\n  thisArg?: TA,\n  reverse?: boolean\n): void;\nexport function each<T, TA>(\n  loopable: T[],\n  fn: (this: TA, v: T, i: number) => void,\n  thisArg?: TA,\n  reverse?: boolean\n): void;\nexport function each<T, TA>(\n  loopable: T[] | Record<string, T>,\n  fn: (this: TA, v: T, i: any) => void,\n  thisArg?: TA,\n  reverse?: boolean\n) {\n  let i: number, len: number, keys: string[];\n  if (isArray(loopable)) {\n    len = loopable.length;\n    if (reverse) {\n      for (i = len - 1; i >= 0; i--) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    } else {\n      for (i = 0; i < len; i++) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    }\n  } else if (isObject(loopable)) {\n    keys = Object.keys(loopable);\n    len = keys.length;\n    for (i = 0; i < len; i++) {\n      fn.call(thisArg, loopable[keys[i]], keys[i]);\n    }\n  }\n}\n\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */\nexport function _elementsEqual(a0: ActiveDataPoint[], a1: ActiveDataPoint[]) {\n  let i: number, ilen: number, v0: ActiveDataPoint, v1: ActiveDataPoint;\n\n  if (!a0 || !a1 || a0.length !== a1.length) {\n    return false;\n  }\n\n  for (i = 0, ilen = a0.length; i < ilen; ++i) {\n    v0 = a0[i];\n    v1 = a1[i];\n\n    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */\nexport function clone<T>(source: T): T {\n  if (isArray(source)) {\n    return source.map(clone) as unknown as T;\n  }\n\n  if (isObject(source)) {\n    const target = Object.create(null);\n    const keys = Object.keys(source);\n    const klen = keys.length;\n    let k = 0;\n\n    for (; k < klen; ++k) {\n      target[keys[k]] = clone(source[keys[k]]);\n    }\n\n    return target;\n  }\n\n  return source;\n}\n\nfunction isValidKey(key: string) {\n  return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;\n}\n\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */\nexport function _merger(key: string, target: AnyObject, source: AnyObject, options: AnyObject) {\n  if (!isValidKey(key)) {\n    return;\n  }\n\n  const tval = target[key];\n  const sval = source[key];\n\n  if (isObject(tval) && isObject(sval)) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    merge(tval, sval, options);\n  } else {\n    target[key] = clone(sval);\n  }\n}\n\nexport interface MergeOptions {\n  merger?: (key: string, target: AnyObject, source: AnyObject, options?: AnyObject) => void;\n}\n\n/**\n * Recursively deep copies `source` properties into `target` with the given `options`.\n * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n * @param target - The target object in which all sources are merged into.\n * @param source - Object(s) to merge into `target`.\n * @param [options] - Merging options:\n * @param [options.merger] - The merge method (key, target, source, options)\n * @returns The `target` object.\n */\nexport function merge<T>(target: T, source: [], options?: MergeOptions): T;\nexport function merge<T, S1>(target: T, source: S1, options?: MergeOptions): T & S1;\nexport function merge<T, S1>(target: T, source: [S1], options?: MergeOptions): T & S1;\nexport function merge<T, S1, S2>(target: T, source: [S1, S2], options?: MergeOptions): T & S1 & S2;\nexport function merge<T, S1, S2, S3>(target: T, source: [S1, S2, S3], options?: MergeOptions): T & S1 & S2 & S3;\nexport function merge<T, S1, S2, S3, S4>(\n  target: T,\n  source: [S1, S2, S3, S4],\n  options?: MergeOptions\n): T & S1 & S2 & S3 & S4;\nexport function merge<T>(target: T, source: AnyObject[], options?: MergeOptions): AnyObject;\nexport function merge<T>(target: T, source: AnyObject[], options?: MergeOptions): AnyObject {\n  const sources = isArray(source) ? source : [source];\n  const ilen = sources.length;\n\n  if (!isObject(target)) {\n    return target as AnyObject;\n  }\n\n  options = options || {};\n  const merger = options.merger || _merger;\n  let current: AnyObject;\n\n  for (let i = 0; i < ilen; ++i) {\n    current = sources[i];\n    if (!isObject(current)) {\n      continue;\n    }\n\n    const keys = Object.keys(current);\n    for (let k = 0, klen = keys.length; k < klen; ++k) {\n      merger(keys[k], target, current, options as AnyObject);\n    }\n  }\n\n  return target;\n}\n\n/**\n * Recursively deep copies `source` properties into `target` *only* if not defined in target.\n * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n * @param target - The target object in which all sources are merged into.\n * @param source - Object(s) to merge into `target`.\n * @returns The `target` object.\n */\nexport function mergeIf<T>(target: T, source: []): T;\nexport function mergeIf<T, S1>(target: T, source: S1): T & S1;\nexport function mergeIf<T, S1>(target: T, source: [S1]): T & S1;\nexport function mergeIf<T, S1, S2>(target: T, source: [S1, S2]): T & S1 & S2;\nexport function mergeIf<T, S1, S2, S3>(target: T, source: [S1, S2, S3]): T & S1 & S2 & S3;\nexport function mergeIf<T, S1, S2, S3, S4>(target: T, source: [S1, S2, S3, S4]): T & S1 & S2 & S3 & S4;\nexport function mergeIf<T>(target: T, source: AnyObject[]): AnyObject;\nexport function mergeIf<T>(target: T, source: AnyObject[]): AnyObject {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  return merge<T>(target, source, {merger: _mergerIf});\n}\n\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */\nexport function _mergerIf(key: string, target: AnyObject, source: AnyObject) {\n  if (!isValidKey(key)) {\n    return;\n  }\n\n  const tval = target[key];\n  const sval = source[key];\n\n  if (isObject(tval) && isObject(sval)) {\n    mergeIf(tval, sval);\n  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n    target[key] = clone(sval);\n  }\n}\n\n/**\n * @private\n */\nexport function _deprecated(scope: string, value: unknown, previous: string, current: string) {\n  if (value !== undefined) {\n    console.warn(scope + ': \"' + previous +\n      '\" is deprecated. Please use \"' + current + '\" instead');\n  }\n}\n\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n  // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n  '': v => v,\n  // default resolvers\n  x: o => o.x,\n  y: o => o.y\n};\n\n/**\n * @private\n */\nexport function _splitKey(key: string) {\n  const parts = key.split('.');\n  const keys: string[] = [];\n  let tmp = '';\n  for (const part of parts) {\n    tmp += part;\n    if (tmp.endsWith('\\\\')) {\n      tmp = tmp.slice(0, -1) + '.';\n    } else {\n      keys.push(tmp);\n      tmp = '';\n    }\n  }\n  return keys;\n}\n\nfunction _getKeyResolver(key: string) {\n  const keys = _splitKey(key);\n  return obj => {\n    for (const k of keys) {\n      if (k === '') {\n        // For backward compatibility:\n        // Chart.helpers.core resolveObjectKey should break at empty key\n        break;\n      }\n      obj = obj && obj[k];\n    }\n    return obj;\n  };\n}\n\nexport function resolveObjectKey(obj: AnyObject, key: string): any {\n  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n  return resolver(obj);\n}\n\n/**\n * @private\n */\nexport function _capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n\nexport const defined = (value: unknown) => typeof value !== 'undefined';\n\nexport const isFunction = (value: unknown): value is (...args: any[]) => any => typeof value === 'function';\n\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nexport const setsEqual = <T>(a: Set<T>, b: Set<T>) => {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  for (const item of a) {\n    if (!b.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * @param e - The event\n * @private\n */\nexport function _isClickEvent(e: ChartEvent) {\n  return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n","import type {Point} from '../types/geometric.js';\nimport {isFinite as isFiniteNumber} from './helpers.core.js';\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */\n\nexport const PI = Math.PI;\nexport const TAU = 2 * PI;\nexport const PITAU = TAU + PI;\nexport const INFINITY = Number.POSITIVE_INFINITY;\nexport const RAD_PER_DEG = PI / 180;\nexport const HALF_PI = PI / 2;\nexport const QUARTER_PI = PI / 4;\nexport const TWO_THIRDS_PI = PI * 2 / 3;\n\nexport const log10 = Math.log10;\nexport const sign = Math.sign;\n\nexport function almostEquals(x: number, y: number, epsilon: number) {\n  return Math.abs(x - y) < epsilon;\n}\n\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */\nexport function niceNum(range: number) {\n  const roundedRange = Math.round(range);\n  range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n  const niceRange = Math.pow(10, Math.floor(log10(range)));\n  const fraction = range / niceRange;\n  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n  return niceFraction * niceRange;\n}\n\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */\nexport function _factorize(value: number) {\n  const result: number[] = [];\n  const sqrt = Math.sqrt(value);\n  let i: number;\n\n  for (i = 1; i < sqrt; i++) {\n    if (value % i === 0) {\n      result.push(i);\n      result.push(value / i);\n    }\n  }\n  if (sqrt === (sqrt | 0)) { // if value is a square number\n    result.push(sqrt);\n  }\n\n  result.sort((a, b) => a - b).pop();\n  return result;\n}\n\nexport function isNumber(n: unknown): n is number {\n  return !isNaN(parseFloat(n as string)) && isFinite(n as number);\n}\n\nexport function almostWhole(x: number, epsilon: number) {\n  const rounded = Math.round(x);\n  return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);\n}\n\n/**\n * @private\n */\nexport function _setMinAndMaxByKey(\n  array: Record<string, number>[],\n  target: { min: number, max: number },\n  property: string\n) {\n  let i: number, ilen: number, value: number;\n\n  for (i = 0, ilen = array.length; i < ilen; i++) {\n    value = array[i][property];\n    if (!isNaN(value)) {\n      target.min = Math.min(target.min, value);\n      target.max = Math.max(target.max, value);\n    }\n  }\n}\n\nexport function toRadians(degrees: number) {\n  return degrees * (PI / 180);\n}\n\nexport function toDegrees(radians: number) {\n  return radians * (180 / PI);\n}\n\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */\nexport function _decimalPlaces(x: number) {\n  if (!isFiniteNumber(x)) {\n    return;\n  }\n  let e = 1;\n  let p = 0;\n  while (Math.round(x * e) / e !== x) {\n    e *= 10;\n    p++;\n  }\n  return p;\n}\n\n// Gets the angle from vertical upright to the point about a centre.\nexport function getAngleFromPoint(\n  centrePoint: Point,\n  anglePoint: Point\n) {\n  const distanceFromXCenter = anglePoint.x - centrePoint.x;\n  const distanceFromYCenter = anglePoint.y - centrePoint.y;\n  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n\n  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n  if (angle < (-0.5 * PI)) {\n    angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n  }\n\n  return {\n    angle,\n    distance: radialDistanceFromCenter\n  };\n}\n\nexport function distanceBetweenPoints(pt1: Point, pt2: Point) {\n  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */\nexport function _angleDiff(a: number, b: number) {\n  return (a - b + PITAU) % TAU - PI;\n}\n\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */\nexport function _normalizeAngle(a: number) {\n  return (a % TAU + TAU) % TAU;\n}\n\n/**\n * @private\n */\nexport function _angleBetween(angle: number, start: number, end: number, sameAngleIsFullCircle?: boolean) {\n  const a = _normalizeAngle(angle);\n  const s = _normalizeAngle(start);\n  const e = _normalizeAngle(end);\n  const angleToStart = _normalizeAngle(s - a);\n  const angleToEnd = _normalizeAngle(e - a);\n  const startToAngle = _normalizeAngle(a - s);\n  const endToAngle = _normalizeAngle(a - e);\n  return a === s || a === e || (sameAngleIsFullCircle && s === e)\n    || (angleToStart > angleToEnd && startToAngle < endToAngle);\n}\n\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */\nexport function _limitValue(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * @param {number} value\n * @private\n */\nexport function _int16Range(value: number) {\n  return _limitValue(value, -32768, 32767);\n}\n\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */\nexport function _isBetween(value: number, start: number, end: number, epsilon = 1e-6) {\n  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n","import {_capitalize} from './helpers.core.js';\n\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param value - value to find\n * @param cmp\n * @private\n */\nexport function _lookup(\n  table: number[],\n  value: number,\n  cmp?: (value: number) => boolean\n): {lo: number, hi: number};\nexport function _lookup<T>(\n  table: T[],\n  value: number,\n  cmp: (value: number) => boolean\n): {lo: number, hi: number};\nexport function _lookup(\n  table: unknown[],\n  value: number,\n  cmp?: (value: number) => boolean\n) {\n  cmp = cmp || ((index) => table[index] < value);\n  let hi = table.length - 1;\n  let lo = 0;\n  let mid: number;\n\n  while (hi - lo > 1) {\n    mid = (lo + hi) >> 1;\n    if (cmp(mid)) {\n      lo = mid;\n    } else {\n      hi = mid;\n    }\n  }\n\n  return {lo, hi};\n}\n\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */\nexport const _lookupByKey = (\n  table: Record<string, number>[],\n  key: string,\n  value: number,\n  last?: boolean\n) =>\n  _lookup(table, value, last\n    ? index => {\n      const ti = table[index][key];\n      return ti < value || ti === value && table[index + 1][key] === value;\n    }\n    : index => table[index][key] < value);\n\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */\nexport const _rlookupByKey = (\n  table: Record<string, number>[],\n  key: string,\n  value: number\n) =>\n  _lookup(table, value, index => table[index][key] >= value);\n\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */\nexport function _filterBetween(values: number[], min: number, max: number) {\n  let start = 0;\n  let end = values.length;\n\n  while (start < end && values[start] < min) {\n    start++;\n  }\n  while (end > start && values[end - 1] > max) {\n    end--;\n  }\n\n  return start > 0 || end < values.length\n    ? values.slice(start, end)\n    : values;\n}\n\nconst arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'] as const;\n\nexport interface ArrayListener<T> {\n  _onDataPush?(...item: T[]): void;\n  _onDataPop?(): void;\n  _onDataShift?(): void;\n  _onDataSplice?(index: number, deleteCount: number, ...items: T[]): void;\n  _onDataUnshift?(...item: T[]): void;\n}\n\n/**\n * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\n * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\n * called on the '_onData*' callbacks (e.g. _onDataPush, etc.) with same arguments.\n */\nexport function listenArrayEvents<T>(array: T[], listener: ArrayListener<T>): void;\nexport function listenArrayEvents(array, listener) {\n  if (array._chartjs) {\n    array._chartjs.listeners.push(listener);\n    return;\n  }\n\n  Object.defineProperty(array, '_chartjs', {\n    configurable: true,\n    enumerable: false,\n    value: {\n      listeners: [listener]\n    }\n  });\n\n  arrayEvents.forEach((key) => {\n    const method = '_onData' + _capitalize(key);\n    const base = array[key];\n\n    Object.defineProperty(array, key, {\n      configurable: true,\n      enumerable: false,\n      value(...args) {\n        const res = base.apply(this, args);\n\n        array._chartjs.listeners.forEach((object) => {\n          if (typeof object[method] === 'function') {\n            object[method](...args);\n          }\n        });\n\n        return res;\n      }\n    });\n  });\n}\n\n\n/**\n * Removes the given array event listener and cleanup extra attached properties (such as\n * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\n */\nexport function unlistenArrayEvents<T>(array: T[], listener: ArrayListener<T>): void;\nexport function unlistenArrayEvents(array, listener) {\n  const stub = array._chartjs;\n  if (!stub) {\n    return;\n  }\n\n  const listeners = stub.listeners;\n  const index = listeners.indexOf(listener);\n  if (index !== -1) {\n    listeners.splice(index, 1);\n  }\n\n  if (listeners.length > 0) {\n    return;\n  }\n\n  arrayEvents.forEach((key) => {\n    delete array[key];\n  });\n\n  delete array._chartjs;\n}\n\n/**\n * @param items\n */\nexport function _arrayUnique<T>(items: T[]) {\n  const set = new Set<T>(items);\n\n  if (set.size === items.length) {\n    return items;\n  }\n\n  return Array.from(set);\n}\n","import type {ChartMeta, PointElement} from '../types/index.js';\n\nimport {_limitValue} from './helpers.math.js';\nimport {_lookupByKey} from './helpers.collection.js';\n\nexport function fontString(pixelSize: number, fontStyle: string, fontFamily: string) {\n  return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n\n/**\n* Request animation polyfill\n*/\nexport const requestAnimFrame = (function() {\n  if (typeof window === 'undefined') {\n    return function(callback) {\n      return callback();\n    };\n  }\n  return window.requestAnimationFrame;\n}());\n\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */\nexport function throttled<TArgs extends Array<any>>(\n  fn: (...args: TArgs) => void,\n  thisArg: any,\n) {\n  let argsToUse = [] as TArgs;\n  let ticking = false;\n\n  return function(...args: TArgs) {\n    // Save the args for use later\n    argsToUse = args;\n    if (!ticking) {\n      ticking = true;\n      requestAnimFrame.call(window, () => {\n        ticking = false;\n        fn.apply(thisArg, argsToUse);\n      });\n    }\n  };\n}\n\n/**\n * Debounces calling `fn` for `delay` ms\n */\nexport function debounce<TArgs extends Array<any>>(fn: (...args: TArgs) => void, delay: number) {\n  let timeout;\n  return function(...args: TArgs) {\n    if (delay) {\n      clearTimeout(timeout);\n      timeout = setTimeout(fn, delay, args);\n    } else {\n      fn.apply(this, args);\n    }\n    return delay;\n  };\n}\n\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */\nexport const _toLeftRightCenter = (align: 'start' | 'end' | 'center') => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */\nexport const _alignStartEnd = (align: 'start' | 'end' | 'center', start: number, end: number) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */\nexport const _textX = (align: 'left' | 'right' | 'center', left: number, right: number, rtl: boolean) => {\n  const check = rtl ? 'left' : 'right';\n  return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n\n/**\n * Return start and count of visible points.\n * @private\n */\nexport function _getStartAndCountOfVisiblePoints(meta: ChartMeta<'line' | 'scatter'>, points: PointElement[], animationsDisabled: boolean) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count = pointCount;\n\n  if (meta._sorted) {\n    const {iScale, _parsed} = meta;\n    const axis = iScale.axis;\n    const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n    if (minDefined) {\n      start = _limitValue(Math.min(\n        // @ts-expect-error Need to type _parsed\n        _lookupByKey(_parsed, axis, min).lo,\n        // @ts-expect-error Need to fix types on _lookupByKey\n        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo),\n      0, pointCount - 1);\n    }\n    if (maxDefined) {\n      count = _limitValue(Math.max(\n        // @ts-expect-error Need to type _parsed\n        _lookupByKey(_parsed, iScale.axis, max, true).hi + 1,\n        // @ts-expect-error Need to fix types on _lookupByKey\n        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1),\n      start, pointCount) - start;\n    } else {\n      count = pointCount - start;\n    }\n  }\n\n  return {start, count};\n}\n\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */\nexport function _scaleRangesChanged(meta) {\n  const {xScale, yScale, _scaleRanges} = meta;\n  const newRanges = {\n    xmin: xScale.min,\n    xmax: xScale.max,\n    ymin: yScale.min,\n    ymax: yScale.max\n  };\n  if (!_scaleRanges) {\n    meta._scaleRanges = newRanges;\n    return true;\n  }\n  const changed = _scaleRanges.xmin !== xScale.min\n\t\t|| _scaleRanges.xmax !== xScale.max\n\t\t|| _scaleRanges.ymin !== yScale.min\n\t\t|| _scaleRanges.ymax !== yScale.max;\n\n  Object.assign(_scaleRanges, newRanges);\n  return changed;\n}\n","import {PI, TAU, HALF_PI} from './helpers.math.js';\n\nconst atEdge = (t: number) => t === 0 || t === 1;\nconst elasticIn = (t: number, s: number, p: number) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t: number, s: number, p: number) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */\nconst effects = {\n  linear: (t: number) => t,\n\n  easeInQuad: (t: number) => t * t,\n\n  easeOutQuad: (t: number) => -t * (t - 2),\n\n  easeInOutQuad: (t: number) => ((t /= 0.5) < 1)\n    ? 0.5 * t * t\n    : -0.5 * ((--t) * (t - 2) - 1),\n\n  easeInCubic: (t: number) => t * t * t,\n\n  easeOutCubic: (t: number) => (t -= 1) * t * t + 1,\n\n  easeInOutCubic: (t: number) => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t\n    : 0.5 * ((t -= 2) * t * t + 2),\n\n  easeInQuart: (t: number) => t * t * t * t,\n\n  easeOutQuart: (t: number) => -((t -= 1) * t * t * t - 1),\n\n  easeInOutQuart: (t: number) => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t * t\n    : -0.5 * ((t -= 2) * t * t * t - 2),\n\n  easeInQuint: (t: number) => t * t * t * t * t,\n\n  easeOutQuint: (t: number) => (t -= 1) * t * t * t * t + 1,\n\n  easeInOutQuint: (t: number) => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t * t * t\n    : 0.5 * ((t -= 2) * t * t * t * t + 2),\n\n  easeInSine: (t: number) => -Math.cos(t * HALF_PI) + 1,\n\n  easeOutSine: (t: number) => Math.sin(t * HALF_PI),\n\n  easeInOutSine: (t: number) => -0.5 * (Math.cos(PI * t) - 1),\n\n  easeInExpo: (t: number) => (t === 0) ? 0 : Math.pow(2, 10 * (t - 1)),\n\n  easeOutExpo: (t: number) => (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1,\n\n  easeInOutExpo: (t: number) => atEdge(t) ? t : t < 0.5\n    ? 0.5 * Math.pow(2, 10 * (t * 2 - 1))\n    : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n\n  easeInCirc: (t: number) => (t >= 1) ? t : -(Math.sqrt(1 - t * t) - 1),\n\n  easeOutCirc: (t: number) => Math.sqrt(1 - (t -= 1) * t),\n\n  easeInOutCirc: (t: number) => ((t /= 0.5) < 1)\n    ? -0.5 * (Math.sqrt(1 - t * t) - 1)\n    : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n\n  easeInElastic: (t: number) => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n\n  easeOutElastic: (t: number) => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n\n  easeInOutElastic(t: number) {\n    const s = 0.1125;\n    const p = 0.45;\n    return atEdge(t) ? t :\n      t < 0.5\n        ? 0.5 * elasticIn(t * 2, s, p)\n        : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n  },\n\n  easeInBack(t: number) {\n    const s = 1.70158;\n    return t * t * ((s + 1) * t - s);\n  },\n\n  easeOutBack(t: number) {\n    const s = 1.70158;\n    return (t -= 1) * t * ((s + 1) * t + s) + 1;\n  },\n\n  easeInOutBack(t: number) {\n    let s = 1.70158;\n    if ((t /= 0.5) < 1) {\n      return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));\n    }\n    return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n  },\n\n  easeInBounce: (t: number) => 1 - effects.easeOutBounce(1 - t),\n\n  easeOutBounce(t: number) {\n    const m = 7.5625;\n    const d = 2.75;\n    if (t < (1 / d)) {\n      return m * t * t;\n    }\n    if (t < (2 / d)) {\n      return m * (t -= (1.5 / d)) * t + 0.75;\n    }\n    if (t < (2.5 / d)) {\n      return m * (t -= (2.25 / d)) * t + 0.9375;\n    }\n    return m * (t -= (2.625 / d)) * t + 0.984375;\n  },\n\n  easeInOutBounce: (t: number) => (t < 0.5)\n    ? effects.easeInBounce(t * 2) * 0.5\n    : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5,\n} as const;\n\nexport type EasingFunction = keyof typeof effects\n\nexport default effects;\n","import {Color} from '@kurkle/color';\n\nexport function isPatternOrGradient(value: unknown): value is CanvasPattern | CanvasGradient {\n  if (value && typeof value === 'object') {\n    const type = value.toString();\n    return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n  }\n\n  return false;\n}\n\nexport function color(value: CanvasGradient): CanvasGradient;\nexport function color(value: CanvasPattern): CanvasPattern;\nexport function color(\n  value:\n  | string\n  | { r: number; g: number; b: number; a: number }\n  | [number, number, number]\n  | [number, number, number, number]\n): Color;\nexport function color(value) {\n  return isPatternOrGradient(value) ? value : new Color(value);\n}\n\nexport function getHoverColor(value: CanvasGradient): CanvasGradient;\nexport function getHoverColor(value: CanvasPattern): CanvasPattern;\nexport function getHoverColor(value: string): string;\nexport function getHoverColor(value) {\n  return isPatternOrGradient(value)\n    ? value\n    : new Color(value).saturate(0.5).darken(0.1).hexString();\n}\n","const numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];\nconst colors = ['color', 'borderColor', 'backgroundColor'];\n\nexport function applyAnimationsDefaults(defaults) {\n  defaults.set('animation', {\n    delay: undefined,\n    duration: 1000,\n    easing: 'easeOutQuart',\n    fn: undefined,\n    from: undefined,\n    loop: undefined,\n    to: undefined,\n    type: undefined,\n  });\n\n  defaults.describe('animation', {\n    _fallback: false,\n    _indexable: false,\n    _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',\n  });\n\n  defaults.set('animations', {\n    colors: {\n      type: 'color',\n      properties: colors\n    },\n    numbers: {\n      type: 'number',\n      properties: numbers\n    },\n  });\n\n  defaults.describe('animations', {\n    _fallback: 'animation',\n  });\n\n  defaults.set('transitions', {\n    active: {\n      animation: {\n        duration: 400\n      }\n    },\n    resize: {\n      animation: {\n        duration: 0\n      }\n    },\n    show: {\n      animations: {\n        colors: {\n          from: 'transparent'\n        },\n        visible: {\n          type: 'boolean',\n          duration: 0 // show immediately\n        },\n      }\n    },\n    hide: {\n      animations: {\n        colors: {\n          to: 'transparent'\n        },\n        visible: {\n          type: 'boolean',\n          easing: 'linear',\n          fn: v => v | 0 // for keeping the dataset visible all the way through the animation\n        },\n      }\n    }\n  });\n}\n","export function applyLayoutsDefaults(defaults) {\n  defaults.set('layout', {\n    autoPadding: true,\n    padding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  });\n}\n","\nconst intlCache = new Map<string, Intl.NumberFormat>();\n\nfunction getNumberFormat(locale: string, options?: Intl.NumberFormatOptions) {\n  options = options || {};\n  const cacheKey = locale + JSON.stringify(options);\n  let formatter = intlCache.get(cacheKey);\n  if (!formatter) {\n    formatter = new Intl.NumberFormat(locale, options);\n    intlCache.set(cacheKey, formatter);\n  }\n  return formatter;\n}\n\nexport function formatNumber(num: number, locale: string, options?: Intl.NumberFormatOptions) {\n  return getNumberFormat(locale, options).format(num);\n}\n","import {isArray} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {log10} from '../helpers/helpers.math.js';\n\n/**\n * Namespace to hold formatters for different types of ticks\n * @namespace Chart.Ticks.formatters\n */\nconst formatters = {\n  /**\n   * Formatter for value labels\n   * @method Chart.Ticks.formatters.values\n   * @param value the value to display\n   * @return {string|string[]} the label to display\n   */\n  values(value) {\n    return isArray(value) ? /** @type {string[]} */ (value) : '' + value;\n  },\n\n  /**\n   * Formatter for numeric ticks\n   * @method Chart.Ticks.formatters.numeric\n   * @param tickValue {number} the value to be formatted\n   * @param index {number} the position of the tickValue parameter in the ticks array\n   * @param ticks {object[]} the list of ticks being converted\n   * @return {string} string representation of the tickValue parameter\n   */\n  numeric(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0'; // never show decimal places for 0\n    }\n\n    const locale = this.chart.options.locale;\n    let notation;\n    let delta = tickValue; // This is used when there are less than 2 ticks as the tick interval.\n\n    if (ticks.length > 1) {\n      // all ticks are small or there huge numbers; use scientific notation\n      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n      if (maxTick < 1e-4 || maxTick > 1e+15) {\n        notation = 'scientific';\n      }\n\n      delta = calculateDelta(tickValue, ticks);\n    }\n\n    const logDelta = log10(Math.abs(delta));\n\n    // When datasets have values approaching Number.MAX_VALUE, the tick calculations might result in\n    // infinity and eventually NaN. Passing NaN for minimumFractionDigits or maximumFractionDigits\n    // will make the number formatter throw. So instead we check for isNaN and use a fallback value.\n    //\n    // toFixed has a max of 20 decimal places\n    const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n\n    const options = {notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal};\n    Object.assign(options, this.options.ticks.format);\n\n    return formatNumber(tickValue, locale, options);\n  },\n\n\n  /**\n   * Formatter for logarithmic ticks\n   * @method Chart.Ticks.formatters.logarithmic\n   * @param tickValue {number} the value to be formatted\n   * @param index {number} the position of the tickValue parameter in the ticks array\n   * @param ticks {object[]} the list of ticks being converted\n   * @return {string} string representation of the tickValue parameter\n   */\n  logarithmic(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n    const remain = ticks[index].significand || (tickValue / (Math.pow(10, Math.floor(log10(tickValue)))));\n    if ([1, 2, 3, 5, 10, 15].includes(remain) || index > 0.8 * ticks.length) {\n      return formatters.numeric.call(this, tickValue, index, ticks);\n    }\n    return '';\n  }\n\n};\n\n\nfunction calculateDelta(tickValue, ticks) {\n  // Figure out how many digits to show\n  // The space between the first two ticks might be smaller than normal spacing\n  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n\n  // If we have a number like 2.5 as the delta, figure out how many decimal places we need\n  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n    // not an integer\n    delta = tickValue - Math.floor(tickValue);\n  }\n  return delta;\n}\n\n/**\n * Namespace to hold static tick generation functions\n * @namespace Chart.Ticks\n */\nexport default {formatters};\n","import Ticks from './core.ticks.js';\n\nexport function applyScaleDefaults(defaults) {\n  defaults.set('scale', {\n    display: true,\n    offset: false,\n    reverse: false,\n    beginAtZero: false,\n\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 3.0.0\n     */\n    bounds: 'ticks',\n\n    clip: true,\n\n    /**\n     * Addition grace added to max and reduced from min data value.\n     * @since 3.0.0\n     */\n    grace: 0,\n\n    // grid line settings\n    grid: {\n      display: true,\n      lineWidth: 1,\n      drawOnChartArea: true,\n      drawTicks: true,\n      tickLength: 8,\n      tickWidth: (_ctx, options) => options.lineWidth,\n      tickColor: (_ctx, options) => options.color,\n      offset: false,\n    },\n\n    border: {\n      display: true,\n      dash: [],\n      dashOffset: 0.0,\n      width: 1\n    },\n\n    // scale title\n    title: {\n      // display property\n      display: false,\n\n      // actual label\n      text: '',\n\n      // top/bottom padding\n      padding: {\n        top: 4,\n        bottom: 4\n      }\n    },\n\n    // label settings\n    ticks: {\n      minRotation: 0,\n      maxRotation: 50,\n      mirror: false,\n      textStrokeWidth: 0,\n      textStrokeColor: '',\n      padding: 3,\n      display: true,\n      autoSkip: true,\n      autoSkipPadding: 3,\n      labelOffset: 0,\n      // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\n      callback: Ticks.formatters.values,\n      minor: {},\n      major: {},\n      align: 'center',\n      crossAlign: 'near',\n\n      showLabelBackdrop: false,\n      backdropColor: 'rgba(255, 255, 255, 0.75)',\n      backdropPadding: 2,\n    }\n  });\n\n  defaults.route('scale.ticks', 'color', '', 'color');\n  defaults.route('scale.grid', 'color', '', 'borderColor');\n  defaults.route('scale.border', 'color', '', 'borderColor');\n  defaults.route('scale.title', 'color', '', 'color');\n\n  defaults.describe('scale', {\n    _fallback: false,\n    _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n    _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash',\n  });\n\n  defaults.describe('scales', {\n    _fallback: 'scale',\n  });\n\n  defaults.describe('scale.ticks', {\n    _scriptable: (name) => name !== 'backdropPadding' && name !== 'callback',\n    _indexable: (name) => name !== 'backdropPadding',\n  });\n}\n","import {getHoverColor} from '../helpers/helpers.color.js';\nimport {isObject, merge, valueOrDefault} from '../helpers/helpers.core.js';\nimport {applyAnimationsDefaults} from './core.animations.defaults.js';\nimport {applyLayoutsDefaults} from './core.layouts.defaults.js';\nimport {applyScaleDefaults} from './core.scale.defaults.js';\n\nexport const overrides = Object.create(null);\nexport const descriptors = Object.create(null);\n\n/**\n * @param {object} node\n * @param {string} key\n * @return {object}\n */\nfunction getScope(node, key) {\n  if (!key) {\n    return node;\n  }\n  const keys = key.split('.');\n  for (let i = 0, n = keys.length; i < n; ++i) {\n    const k = keys[i];\n    node = node[k] || (node[k] = Object.create(null));\n  }\n  return node;\n}\n\nfunction set(root, scope, values) {\n  if (typeof scope === 'string') {\n    return merge(getScope(root, scope), values);\n  }\n  return merge(getScope(root, ''), scope);\n}\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Defaults {\n  constructor(_descriptors, _appliers) {\n    this.animation = undefined;\n    this.backgroundColor = 'rgba(0,0,0,0.1)';\n    this.borderColor = 'rgba(0,0,0,0.1)';\n    this.color = '#666';\n    this.datasets = {};\n    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();\n    this.elements = {};\n    this.events = [\n      'mousemove',\n      'mouseout',\n      'click',\n      'touchstart',\n      'touchmove'\n    ];\n    this.font = {\n      family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n      size: 12,\n      style: 'normal',\n      lineHeight: 1.2,\n      weight: null\n    };\n    this.hover = {};\n    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);\n    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);\n    this.hoverColor = (ctx, options) => getHoverColor(options.color);\n    this.indexAxis = 'x';\n    this.interaction = {\n      mode: 'nearest',\n      intersect: true,\n      includeInvisible: false\n    };\n    this.maintainAspectRatio = true;\n    this.onHover = null;\n    this.onClick = null;\n    this.parsing = true;\n    this.plugins = {};\n    this.responsive = true;\n    this.scale = undefined;\n    this.scales = {};\n    this.showLine = true;\n    this.drawActiveElementsOnTop = true;\n\n    this.describe(_descriptors);\n    this.apply(_appliers);\n  }\n\n  /**\n\t * @param {string|object} scope\n\t * @param {object} [values]\n\t */\n  set(scope, values) {\n    return set(this, scope, values);\n  }\n\n  /**\n\t * @param {string} scope\n\t */\n  get(scope) {\n    return getScope(this, scope);\n  }\n\n  /**\n\t * @param {string|object} scope\n\t * @param {object} [values]\n\t */\n  describe(scope, values) {\n    return set(descriptors, scope, values);\n  }\n\n  override(scope, values) {\n    return set(overrides, scope, values);\n  }\n\n  /**\n\t * Routes the named defaults to fallback to another scope/name.\n\t * This routing is useful when those target values, like defaults.color, are changed runtime.\n\t * If the values would be copied, the runtime change would not take effect. By routing, the\n\t * fallback is evaluated at each access, so its always up to date.\n\t *\n\t * Example:\n\t *\n\t * \tdefaults.route('elements.arc', 'backgroundColor', '', 'color')\n\t *   - reads the backgroundColor from defaults.color when undefined locally\n\t *\n\t * @param {string} scope Scope this route applies to.\n\t * @param {string} name Property name that should be routed to different namespace when not defined here.\n\t * @param {string} targetScope The namespace where those properties should be routed to.\n\t * Empty string ('') is the root of defaults.\n\t * @param {string} targetName The target name in the target scope the property should be routed to.\n\t */\n  route(scope, name, targetScope, targetName) {\n    const scopeObject = getScope(this, scope);\n    const targetScopeObject = getScope(this, targetScope);\n    const privateName = '_' + name;\n\n    Object.defineProperties(scopeObject, {\n      // A private property is defined to hold the actual value, when this property is set in its scope (set in the setter)\n      [privateName]: {\n        value: scopeObject[name],\n        writable: true\n      },\n      // The actual property is defined as getter/setter so we can do the routing when value is not locally set.\n      [name]: {\n        enumerable: true,\n        get() {\n          const local = this[privateName];\n          const target = targetScopeObject[targetName];\n          if (isObject(local)) {\n            return Object.assign({}, target, local);\n          }\n          return valueOrDefault(local, target);\n        },\n        set(value) {\n          this[privateName] = value;\n        }\n      }\n    });\n  }\n\n  apply(appliers) {\n    appliers.forEach((apply) => apply(this));\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Defaults({\n  _scriptable: (name) => !name.startsWith('on'),\n  _indexable: (name) => name !== 'events',\n  hover: {\n    _fallback: 'interaction'\n  },\n  interaction: {\n    _scriptable: false,\n    _indexable: false,\n  }\n}, [applyAnimationsDefaults, applyLayoutsDefaults, applyScaleDefaults]);\n","import type {\n  Chart,\n  Point,\n  FontSpec,\n  CanvasFontSpec,\n  PointStyle,\n  RenderTextOpts,\n  BackdropOptions\n} from '../types/index.js';\nimport type {\n  TRBL,\n  SplinePoint,\n  RoundedRect,\n  TRBLCorners\n} from '../types/geometric.js';\nimport {isArray, isNullOrUndef} from './helpers.core.js';\nimport {PI, TAU, HALF_PI, QUARTER_PI, TWO_THIRDS_PI, RAD_PER_DEG} from './helpers.math.js';\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */\nexport function toFontString(font: FontSpec) {\n  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n    return null;\n  }\n\n  return (font.style ? font.style + ' ' : '')\n\t\t+ (font.weight ? font.weight + ' ' : '')\n\t\t+ font.size + 'px '\n\t\t+ font.family;\n}\n\n/**\n * @private\n */\nexport function _measureText(\n  ctx: CanvasRenderingContext2D,\n  data: Record<string, number>,\n  gc: string[],\n  longest: number,\n  string: string\n) {\n  let textWidth = data[string];\n  if (!textWidth) {\n    textWidth = data[string] = ctx.measureText(string).width;\n    gc.push(string);\n  }\n  if (textWidth > longest) {\n    longest = textWidth;\n  }\n  return longest;\n}\n\ntype Thing = string | undefined | null\ntype Things = (Thing | Thing[])[]\n\n/**\n * @private\n */\n// eslint-disable-next-line complexity\nexport function _longestText(\n  ctx: CanvasRenderingContext2D,\n  font: string,\n  arrayOfThings: Things,\n  cache?: {data?: Record<string, number>, garbageCollect?: string[], font?: string}\n) {\n  cache = cache || {};\n  let data = cache.data = cache.data || {};\n  let gc = cache.garbageCollect = cache.garbageCollect || [];\n\n  if (cache.font !== font) {\n    data = cache.data = {};\n    gc = cache.garbageCollect = [];\n    cache.font = font;\n  }\n\n  ctx.save();\n\n  ctx.font = font;\n  let longest = 0;\n  const ilen = arrayOfThings.length;\n  let i: number, j: number, jlen: number, thing: Thing | Thing[], nestedThing: Thing | Thing[];\n  for (i = 0; i < ilen; i++) {\n    thing = arrayOfThings[i];\n\n    // Undefined strings and arrays should not be measured\n    if (thing !== undefined && thing !== null && !isArray(thing)) {\n      longest = _measureText(ctx, data, gc, longest, thing);\n    } else if (isArray(thing)) {\n      // if it is an array lets measure each element\n      // to do maybe simplify this function a bit so we can do this more recursively?\n      for (j = 0, jlen = thing.length; j < jlen; j++) {\n        nestedThing = thing[j];\n        // Undefined strings and arrays should not be measured\n        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n          longest = _measureText(ctx, data, gc, longest, nestedThing);\n        }\n      }\n    }\n  }\n\n  ctx.restore();\n\n  const gcLen = gc.length / 2;\n  if (gcLen > arrayOfThings.length) {\n    for (i = 0; i < gcLen; i++) {\n      delete data[gc[i]];\n    }\n    gc.splice(0, gcLen);\n  }\n  return longest;\n}\n\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */\nexport function _alignPixel(chart: Chart, pixel: number, width: number) {\n  const devicePixelRatio = chart.currentDevicePixelRatio;\n  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n\n/**\n * Clears the entire canvas.\n */\nexport function clearCanvas(canvas: HTMLCanvasElement, ctx?: CanvasRenderingContext2D) {\n  ctx = ctx || canvas.getContext('2d');\n\n  ctx.save();\n  // canvas.width and canvas.height do not consider the canvas transform,\n  // while clearRect does\n  ctx.resetTransform();\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.restore();\n}\n\nexport interface DrawPointOptions {\n  pointStyle: PointStyle;\n  rotation?: number;\n  radius: number;\n  borderWidth: number;\n}\n\nexport function drawPoint(\n  ctx: CanvasRenderingContext2D,\n  options: DrawPointOptions,\n  x: number,\n  y: number\n) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  drawPointLegend(ctx, options, x, y, null);\n}\n\n// eslint-disable-next-line complexity\nexport function drawPointLegend(\n  ctx: CanvasRenderingContext2D,\n  options: DrawPointOptions,\n  x: number,\n  y: number,\n  w: number\n) {\n  let type: string, xOffset: number, yOffset: number, size: number, cornerRadius: number, width: number, xOffsetW: number, yOffsetW: number;\n  const style = options.pointStyle;\n  const rotation = options.rotation;\n  const radius = options.radius;\n  let rad = (rotation || 0) * RAD_PER_DEG;\n\n  if (style && typeof style === 'object') {\n    type = style.toString();\n    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.rotate(rad);\n      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n      ctx.restore();\n      return;\n    }\n  }\n\n  if (isNaN(radius) || radius <= 0) {\n    return;\n  }\n\n  ctx.beginPath();\n\n  switch (style) {\n  // Default includes circle\n    default:\n      if (w) {\n        ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n      } else {\n        ctx.arc(x, y, radius, 0, TAU);\n      }\n      ctx.closePath();\n      break;\n    case 'triangle':\n      width = w ? w / 2 : radius;\n      ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n      rad += TWO_THIRDS_PI;\n      ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n      rad += TWO_THIRDS_PI;\n      ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n      ctx.closePath();\n      break;\n    case 'rectRounded':\n    // NOTE: the rounded rect implementation changed to use `arc` instead of\n    // `quadraticCurveTo` since it generates better results when rect is\n    // almost a circle. 0.516 (instead of 0.5) produces results with visually\n    // closer proportion to the previous impl and it is inscribed in the\n    // circle with `radius`. For more details, see the following PRs:\n    // https://github.com/chartjs/Chart.js/issues/5597\n    // https://github.com/chartjs/Chart.js/issues/5858\n      cornerRadius = radius * 0.516;\n      size = radius - cornerRadius;\n      xOffset = Math.cos(rad + QUARTER_PI) * size;\n      xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n      yOffset = Math.sin(rad + QUARTER_PI) * size;\n      yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n      ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n      ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n      ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n      ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n      ctx.closePath();\n      break;\n    case 'rect':\n      if (!rotation) {\n        size = Math.SQRT1_2 * radius;\n        width = w ? w / 2 : size;\n        ctx.rect(x - width, y - size, 2 * width, 2 * size);\n        break;\n      }\n      rad += QUARTER_PI;\n    /* falls through */\n    case 'rectRot':\n      xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n      ctx.moveTo(x - xOffsetW, y - yOffset);\n      ctx.lineTo(x + yOffsetW, y - xOffset);\n      ctx.lineTo(x + xOffsetW, y + yOffset);\n      ctx.lineTo(x - yOffsetW, y + xOffset);\n      ctx.closePath();\n      break;\n    case 'crossRot':\n      rad += QUARTER_PI;\n    /* falls through */\n    case 'cross':\n      xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n      ctx.moveTo(x - xOffsetW, y - yOffset);\n      ctx.lineTo(x + xOffsetW, y + yOffset);\n      ctx.moveTo(x + yOffsetW, y - xOffset);\n      ctx.lineTo(x - yOffsetW, y + xOffset);\n      break;\n    case 'star':\n      xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n      ctx.moveTo(x - xOffsetW, y - yOffset);\n      ctx.lineTo(x + xOffsetW, y + yOffset);\n      ctx.moveTo(x + yOffsetW, y - xOffset);\n      ctx.lineTo(x - yOffsetW, y + xOffset);\n      rad += QUARTER_PI;\n      xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n      ctx.moveTo(x - xOffsetW, y - yOffset);\n      ctx.lineTo(x + xOffsetW, y + yOffset);\n      ctx.moveTo(x + yOffsetW, y - xOffset);\n      ctx.lineTo(x - yOffsetW, y + xOffset);\n      break;\n    case 'line':\n      xOffset = w ? w / 2 : Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      ctx.moveTo(x - xOffset, y - yOffset);\n      ctx.lineTo(x + xOffset, y + yOffset);\n      break;\n    case 'dash':\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n      break;\n    case false:\n      ctx.closePath();\n      break;\n  }\n\n  ctx.fill();\n  if (options.borderWidth > 0) {\n    ctx.stroke();\n  }\n}\n\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */\nexport function _isPointInArea(\n  point: Point,\n  area: TRBL,\n  margin?: number\n) {\n  margin = margin || 0.5; // margin - default is to match rounded decimals\n\n  return !area || (point && point.x > area.left - margin && point.x < area.right + margin &&\n\t\tpoint.y > area.top - margin && point.y < area.bottom + margin);\n}\n\nexport function clipArea(ctx: CanvasRenderingContext2D, area: TRBL) {\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n  ctx.clip();\n}\n\nexport function unclipArea(ctx: CanvasRenderingContext2D) {\n  ctx.restore();\n}\n\n/**\n * @private\n */\nexport function _steppedLineTo(\n  ctx: CanvasRenderingContext2D,\n  previous: Point,\n  target: Point,\n  flip?: boolean,\n  mode?: string\n) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n  if (mode === 'middle') {\n    const midpoint = (previous.x + target.x) / 2.0;\n    ctx.lineTo(midpoint, previous.y);\n    ctx.lineTo(midpoint, target.y);\n  } else if (mode === 'after' !== !!flip) {\n    ctx.lineTo(previous.x, target.y);\n  } else {\n    ctx.lineTo(target.x, previous.y);\n  }\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @private\n */\nexport function _bezierCurveTo(\n  ctx: CanvasRenderingContext2D,\n  previous: SplinePoint,\n  target: SplinePoint,\n  flip?: boolean\n) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n  ctx.bezierCurveTo(\n    flip ? previous.cp1x : previous.cp2x,\n    flip ? previous.cp1y : previous.cp2y,\n    flip ? target.cp2x : target.cp1x,\n    flip ? target.cp2y : target.cp1y,\n    target.x,\n    target.y);\n}\n\nfunction setRenderOpts(ctx: CanvasRenderingContext2D, opts: RenderTextOpts) {\n  if (opts.translation) {\n    ctx.translate(opts.translation[0], opts.translation[1]);\n  }\n\n  if (!isNullOrUndef(opts.rotation)) {\n    ctx.rotate(opts.rotation);\n  }\n\n  if (opts.color) {\n    ctx.fillStyle = opts.color;\n  }\n\n  if (opts.textAlign) {\n    ctx.textAlign = opts.textAlign;\n  }\n\n  if (opts.textBaseline) {\n    ctx.textBaseline = opts.textBaseline;\n  }\n}\n\nfunction decorateText(\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  line: string,\n  opts: RenderTextOpts\n) {\n  if (opts.strikethrough || opts.underline) {\n    /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */\n    const metrics = ctx.measureText(line);\n    const left = x - metrics.actualBoundingBoxLeft;\n    const right = x + metrics.actualBoundingBoxRight;\n    const top = y - metrics.actualBoundingBoxAscent;\n    const bottom = y + metrics.actualBoundingBoxDescent;\n    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.beginPath();\n    ctx.lineWidth = opts.decorationWidth || 2;\n    ctx.moveTo(left, yDecoration);\n    ctx.lineTo(right, yDecoration);\n    ctx.stroke();\n  }\n}\n\nfunction drawBackdrop(ctx: CanvasRenderingContext2D, opts: BackdropOptions) {\n  const oldColor = ctx.fillStyle;\n\n  ctx.fillStyle = opts.color as string;\n  ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n  ctx.fillStyle = oldColor;\n}\n\n/**\n * Render text onto the canvas\n */\nexport function renderText(\n  ctx: CanvasRenderingContext2D,\n  text: string | string[],\n  x: number,\n  y: number,\n  font: CanvasFontSpec,\n  opts: RenderTextOpts = {}\n) {\n  const lines = isArray(text) ? text : [text];\n  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n  let i: number, line: string;\n\n  ctx.save();\n  ctx.font = font.string;\n  setRenderOpts(ctx, opts);\n\n  for (i = 0; i < lines.length; ++i) {\n    line = lines[i];\n\n    if (opts.backdrop) {\n      drawBackdrop(ctx, opts.backdrop);\n    }\n\n    if (stroke) {\n      if (opts.strokeColor) {\n        ctx.strokeStyle = opts.strokeColor;\n      }\n\n      if (!isNullOrUndef(opts.strokeWidth)) {\n        ctx.lineWidth = opts.strokeWidth;\n      }\n\n      ctx.strokeText(line, x, y, opts.maxWidth);\n    }\n\n    ctx.fillText(line, x, y, opts.maxWidth);\n    decorateText(ctx, x, y, line, opts);\n\n    y += Number(font.lineHeight);\n  }\n\n  ctx.restore();\n}\n\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */\nexport function addRoundedRectPath(\n  ctx: CanvasRenderingContext2D,\n  rect: RoundedRect & { radius: TRBLCorners }\n) {\n  const {x, y, w, h, radius} = rect;\n\n  // top left arc\n  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n\n  // line from top left to bottom left\n  ctx.lineTo(x, y + h - radius.bottomLeft);\n\n  // bottom left arc\n  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n\n  // line from bottom left to bottom right\n  ctx.lineTo(x + w - radius.bottomRight, y + h);\n\n  // bottom right arc\n  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n\n  // line from bottom right to top right\n  ctx.lineTo(x + w, y + radius.topRight);\n\n  // top right arc\n  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n\n  // line from top right to top left\n  ctx.lineTo(x + radius.topLeft, y);\n}\n","import defaults from '../core/core.defaults.js';\nimport {isArray, isObject, toDimension, valueOrDefault} from './helpers.core.js';\nimport {toFontString} from './helpers.canvas.js';\nimport type {ChartArea, FontSpec, Point} from '../types/index.js';\nimport type {TRBL, TRBLCorners} from '../types/geometric.js';\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n\n/**\n * @alias Chart.helpers.options\n * @namespace\n */\n/**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */\nexport function toLineHeight(value: number | string, size: number): number {\n  const matches = ('' + value).match(LINE_HEIGHT);\n  if (!matches || matches[1] === 'normal') {\n    return size * 1.2;\n  }\n\n  value = +matches[2];\n\n  switch (matches[3]) {\n    case 'px':\n      return value;\n    case '%':\n      value /= 100;\n      break;\n    default:\n      break;\n  }\n\n  return size * value;\n}\n\nconst numberOrZero = (v: unknown) => +v || 0;\n\n/**\n * @param value\n * @param props\n */\nexport function _readValueToProps<K extends string>(value: number | Record<K, number>, props: K[]): Record<K, number>;\nexport function _readValueToProps<K extends string, T extends string>(value: number | Record<K & T, number>, props: Record<T, K>): Record<T, number>;\nexport function _readValueToProps(value: number | Record<string, number>, props: string[] | Record<string, string>) {\n  const ret = {};\n  const objProps = isObject(props);\n  const keys = objProps ? Object.keys(props) : props;\n  const read = isObject(value)\n    ? objProps\n      ? prop => valueOrDefault(value[prop], value[props[prop]])\n      : prop => value[prop]\n    : () => value;\n\n  for (const prop of keys) {\n    ret[prop] = numberOrZero(read(prop));\n  }\n  return ret;\n}\n\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */\nexport function toTRBL(value: number | TRBL | Point) {\n  return _readValueToProps(value, {top: 'y', right: 'x', bottom: 'y', left: 'x'});\n}\n\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */\nexport function toTRBLCorners(value: number | TRBLCorners) {\n  return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);\n}\n\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */\nexport function toPadding(value?: number | TRBL): ChartArea {\n  const obj = toTRBL(value) as ChartArea;\n\n  obj.width = obj.left + obj.right;\n  obj.height = obj.top + obj.bottom;\n\n  return obj;\n}\n\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */\n\nexport function toFont(options: Partial<FontSpec>, fallback?: Partial<FontSpec>) {\n  options = options || {};\n  fallback = fallback || defaults.font as FontSpec;\n\n  let size = valueOrDefault(options.size, fallback.size);\n\n  if (typeof size === 'string') {\n    size = parseInt(size, 10);\n  }\n  let style = valueOrDefault(options.style, fallback.style);\n  if (style && !('' + style).match(FONT_STYLE)) {\n    console.warn('Invalid font style specified: \"' + style + '\"');\n    style = undefined;\n  }\n\n  const font = {\n    family: valueOrDefault(options.family, fallback.family),\n    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n    size,\n    style,\n    weight: valueOrDefault(options.weight, fallback.weight),\n    string: ''\n  };\n\n  font.string = toFontString(font);\n  return font;\n}\n\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */\nexport function resolve(inputs: Array<unknown>, context?: object, index?: number, info?: { cacheable: boolean }) {\n  let cacheable = true;\n  let i: number, ilen: number, value: unknown;\n\n  for (i = 0, ilen = inputs.length; i < ilen; ++i) {\n    value = inputs[i];\n    if (value === undefined) {\n      continue;\n    }\n    if (context !== undefined && typeof value === 'function') {\n      value = value(context);\n      cacheable = false;\n    }\n    if (index !== undefined && isArray(value)) {\n      value = value[index % value.length];\n      cacheable = false;\n    }\n    if (value !== undefined) {\n      if (info && !cacheable) {\n        info.cacheable = false;\n      }\n      return value;\n    }\n  }\n}\n\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */\nexport function _addGrace(minmax: { min: number; max: number; }, grace: number | string, beginAtZero: boolean) {\n  const {min, max} = minmax;\n  const change = toDimension(grace, (max - min) / 2);\n  const keepZero = (value: number, add: number) => beginAtZero && value === 0 ? 0 : value + add;\n  return {\n    min: keepZero(min, -Math.abs(change)),\n    max: keepZero(max, change)\n  };\n}\n\n/**\n * Create a context inheriting parentContext\n * @param parentContext\n * @param context\n * @returns\n */\nexport function createContext<T extends object>(parentContext: null, context: T): T;\nexport function createContext<T extends object, P extends T>(parentContext: P, context: T): P & T;\nexport function createContext(parentContext: object, context: object) {\n  return Object.assign(Object.create(parentContext), context);\n}\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartMeta} from '../types/index.js';\nimport type {\n  ResolverObjectKey,\n  ResolverCache,\n  ResolverProxy,\n  DescriptorDefaults,\n  Descriptor,\n  ContextCache,\n  ContextProxy\n} from './helpers.config.types.js';\nimport {isArray, isFunction, isObject, resolveObjectKey, _capitalize} from './helpers.core.js';\n\nexport * from './helpers.config.types.js';\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */\nexport function _createResolver<\n  T extends AnyObject[] = AnyObject[],\n  R extends AnyObject[] = T\n>(\n  scopes: T,\n  prefixes = [''],\n  rootScopes?: R,\n  fallback?: ResolverObjectKey,\n  getTarget = () => scopes[0]\n) {\n  const finalRootScopes = rootScopes || scopes;\n  if (typeof fallback === 'undefined') {\n    fallback = _resolve('_fallback', scopes);\n  }\n  const cache: ResolverCache<T, R> = {\n    [Symbol.toStringTag]: 'Object',\n    _cacheable: true,\n    _scopes: scopes,\n    _rootScopes: finalRootScopes,\n    _fallback: fallback,\n    _getTarget: getTarget,\n    override: (scope: AnyObject) => _createResolver([scope, ...scopes], prefixes, finalRootScopes, fallback),\n  };\n  return new Proxy(cache, {\n    /**\n     * A trap for the delete operator.\n     */\n    deleteProperty(target, prop: string) {\n      delete target[prop]; // remove from cache\n      delete target._keys; // remove cached keys\n      delete scopes[0][prop]; // remove from top level scope\n      return true;\n    },\n\n    /**\n     * A trap for getting property values.\n     */\n    get(target, prop: string) {\n      return _cached(target, prop,\n        () => _resolveWithPrefixes(prop, prefixes, scopes, target));\n    },\n\n    /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */\n    getOwnPropertyDescriptor(target, prop) {\n      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n    },\n\n    /**\n     * A trap for Object.getPrototypeOf.\n     */\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(scopes[0]);\n    },\n\n    /**\n     * A trap for the in operator.\n     */\n    has(target, prop: string) {\n      return getKeysFromAllScopes(target).includes(prop);\n    },\n\n    /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */\n    ownKeys(target) {\n      return getKeysFromAllScopes(target);\n    },\n\n    /**\n     * A trap for setting property values.\n     */\n    set(target, prop: string, value) {\n      const storage = target._storage || (target._storage = getTarget());\n      target[prop] = storage[prop] = value; // set to top level scope + cache\n      delete target._keys; // remove cached keys\n      return true;\n    }\n  }) as ResolverProxy<T, R>;\n}\n\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */\nexport function _attachContext<\n  T extends AnyObject[] = AnyObject[],\n  R extends AnyObject[] = T\n>(\n  proxy: ResolverProxy<T, R>,\n  context: AnyObject,\n  subProxy?: ResolverProxy<T, R>,\n  descriptorDefaults?: DescriptorDefaults\n) {\n  const cache: ContextCache<T, R> = {\n    _cacheable: false,\n    _proxy: proxy,\n    _context: context,\n    _subProxy: subProxy,\n    _stack: new Set(),\n    _descriptors: _descriptors(proxy, descriptorDefaults),\n    setContext: (ctx: AnyObject) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),\n    override: (scope: AnyObject) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n  };\n  return new Proxy(cache, {\n    /**\n     * A trap for the delete operator.\n     */\n    deleteProperty(target, prop) {\n      delete target[prop]; // remove from cache\n      delete proxy[prop]; // remove from proxy\n      return true;\n    },\n\n    /**\n     * A trap for getting property values.\n     */\n    get(target, prop: string, receiver) {\n      return _cached(target, prop,\n        () => _resolveWithContext(target, prop, receiver));\n    },\n\n    /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */\n    getOwnPropertyDescriptor(target, prop) {\n      return target._descriptors.allKeys\n        ? Reflect.has(proxy, prop) ? {enumerable: true, configurable: true} : undefined\n        : Reflect.getOwnPropertyDescriptor(proxy, prop);\n    },\n\n    /**\n     * A trap for Object.getPrototypeOf.\n     */\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(proxy);\n    },\n\n    /**\n     * A trap for the in operator.\n     */\n    has(target, prop) {\n      return Reflect.has(proxy, prop);\n    },\n\n    /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */\n    ownKeys() {\n      return Reflect.ownKeys(proxy);\n    },\n\n    /**\n     * A trap for setting property values.\n     */\n    set(target, prop, value) {\n      proxy[prop] = value; // set to proxy\n      delete target[prop]; // remove from cache\n      return true;\n    }\n  }) as ContextProxy<T, R>;\n}\n\n/**\n * @private\n */\nexport function _descriptors(\n  proxy: ResolverCache,\n  defaults: DescriptorDefaults = {scriptable: true, indexable: true}\n): Descriptor {\n  const {_scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys} = proxy;\n  return {\n    allKeys: _allKeys,\n    scriptable: _scriptable,\n    indexable: _indexable,\n    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,\n    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable\n  };\n}\n\nconst readKey = (prefix: string, name: string) => prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop: string, value: unknown) => isObject(value) && prop !== 'adapters' &&\n  (Object.getPrototypeOf(value) === null || value.constructor === Object);\n\nfunction _cached(\n  target: AnyObject,\n  prop: string,\n  resolve: () => unknown\n) {\n  if (Object.prototype.hasOwnProperty.call(target, prop)) {\n    return target[prop];\n  }\n\n  const value = resolve();\n  // cache the resolved value\n  target[prop] = value;\n  return value;\n}\n\nfunction _resolveWithContext(\n  target: ContextCache,\n  prop: string,\n  receiver: AnyObject\n) {\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n  let value = _proxy[prop]; // resolve from proxy\n\n  // resolve with context\n  if (isFunction(value) && descriptors.isScriptable(prop)) {\n    value = _resolveScriptable(prop, value, target, receiver);\n  }\n  if (isArray(value) && value.length) {\n    value = _resolveArray(prop, value, target, descriptors.isIndexable);\n  }\n  if (needsSubResolver(prop, value)) {\n    // if the resolved value is an object, create a sub resolver for it\n    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n  }\n  return value;\n}\n\nfunction _resolveScriptable(\n  prop: string,\n  getValue: (ctx: AnyObject, sub: AnyObject) => unknown,\n  target: ContextCache,\n  receiver: AnyObject\n) {\n  const {_proxy, _context, _subProxy, _stack} = target;\n  if (_stack.has(prop)) {\n    throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n  }\n  _stack.add(prop);\n  let value = getValue(_context, _subProxy || receiver);\n  _stack.delete(prop);\n  if (needsSubResolver(prop, value)) {\n    // When scriptable option returns an object, create a resolver on that.\n    value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n  }\n  return value;\n}\n\nfunction _resolveArray(\n  prop: string,\n  value: unknown[],\n  target: ContextCache,\n  isIndexable: (key: string) => boolean\n) {\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n\n  if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n    return value[_context.index % value.length];\n  } else if (isObject(value[0])) {\n    // Array of objects, return array or resolvers\n    const arr = value;\n    const scopes = _proxy._scopes.filter(s => s !== arr);\n    value = [];\n    for (const item of arr) {\n      const resolver = createSubResolver(scopes, _proxy, prop, item);\n      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n    }\n  }\n  return value;\n}\n\nfunction resolveFallback(\n  fallback: ResolverObjectKey | ((prop: ResolverObjectKey, value: unknown) => ResolverObjectKey),\n  prop: ResolverObjectKey,\n  value: unknown\n) {\n  return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\n\nconst getScope = (key: ResolverObjectKey, parent: AnyObject) => key === true ? parent\n  : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\n\nfunction addScopes(\n  set: Set<AnyObject>,\n  parentScopes: AnyObject[],\n  key: ResolverObjectKey,\n  parentFallback: ResolverObjectKey,\n  value: unknown\n) {\n  for (const parent of parentScopes) {\n    const scope = getScope(key, parent);\n    if (scope) {\n      set.add(scope);\n      const fallback = resolveFallback(scope._fallback, key, value);\n      if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n        // When we reach the descriptor that defines a new _fallback, return that.\n        // The fallback will resume to that new scope.\n        return fallback;\n      }\n    } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n      // Fallback to `false` results to `false`, when falling back to different key.\n      // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n      return null;\n    }\n  }\n  return false;\n}\n\nfunction createSubResolver(\n  parentScopes: AnyObject[],\n  resolver: ResolverCache,\n  prop: ResolverObjectKey,\n  value: unknown\n) {\n  const rootScopes = resolver._rootScopes;\n  const fallback = resolveFallback(resolver._fallback, prop, value);\n  const allScopes = [...parentScopes, ...rootScopes];\n  const set = new Set<AnyObject>();\n  set.add(value);\n  let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n  if (key === null) {\n    return false;\n  }\n  if (typeof fallback !== 'undefined' && fallback !== prop) {\n    key = addScopesFromKey(set, allScopes, fallback, key, value);\n    if (key === null) {\n      return false;\n    }\n  }\n  return _createResolver(Array.from(set), [''], rootScopes, fallback,\n    () => subGetTarget(resolver, prop as string, value));\n}\n\nfunction addScopesFromKey(\n  set: Set<AnyObject>,\n  allScopes: AnyObject[],\n  key: ResolverObjectKey,\n  fallback: ResolverObjectKey,\n  item: unknown\n) {\n  while (key) {\n    key = addScopes(set, allScopes, key, fallback, item);\n  }\n  return key;\n}\n\nfunction subGetTarget(\n  resolver: ResolverCache,\n  prop: string,\n  value: unknown\n) {\n  const parent = resolver._getTarget();\n  if (!(prop in parent)) {\n    parent[prop] = {};\n  }\n  const target = parent[prop];\n  if (isArray(target) && isObject(value)) {\n    // For array of objects, the object is used to store updated values\n    return value;\n  }\n  return target || {};\n}\n\nfunction _resolveWithPrefixes(\n  prop: string,\n  prefixes: string[],\n  scopes: AnyObject[],\n  proxy: ResolverProxy\n) {\n  let value: unknown;\n  for (const prefix of prefixes) {\n    value = _resolve(readKey(prefix, prop), scopes);\n    if (typeof value !== 'undefined') {\n      return needsSubResolver(prop, value)\n        ? createSubResolver(scopes, proxy, prop, value)\n        : value;\n    }\n  }\n}\n\nfunction _resolve(key: string, scopes: AnyObject[]) {\n  for (const scope of scopes) {\n    if (!scope) {\n      continue;\n    }\n    const value = scope[key];\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n  }\n}\n\nfunction getKeysFromAllScopes(target: ResolverCache) {\n  let keys = target._keys;\n  if (!keys) {\n    keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n  }\n  return keys;\n}\n\nfunction resolveKeysFromAllScopes(scopes: AnyObject[]) {\n  const set = new Set<string>();\n  for (const scope of scopes) {\n    for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {\n      set.add(key);\n    }\n  }\n  return Array.from(set);\n}\n\nexport function _parseObjectDataRadialScale(\n  meta: ChartMeta<'line' | 'scatter'>,\n  data: AnyObject[],\n  start: number,\n  count: number\n) {\n  const {iScale} = meta;\n  const {key = 'r'} = this._parsing;\n  const parsed = new Array<{r: unknown}>(count);\n  let i: number, ilen: number, index: number, item: AnyObject;\n\n  for (i = 0, ilen = count; i < ilen; ++i) {\n    index = i + start;\n    item = data[index];\n    parsed[i] = {\n      r: iScale.parse(resolveObjectKey(item, key), index)\n    };\n  }\n  return parsed;\n}\n","import {almostEquals, distanceBetweenPoints, sign} from './helpers.math.js';\nimport {_isPointInArea} from './helpers.canvas.js';\nimport type {ChartArea} from '../types/index.js';\nimport type {SplinePoint} from '../types/geometric.js';\n\nconst EPSILON = Number.EPSILON || 1e-14;\n\ntype OptionalSplinePoint = SplinePoint | false\nconst getPoint = (points: SplinePoint[], i: number): OptionalSplinePoint => i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis: 'x' | 'y') => indexAxis === 'x' ? 'y' : 'x';\n\nexport function splineCurve(\n  firstPoint: SplinePoint,\n  middlePoint: SplinePoint,\n  afterPoint: SplinePoint,\n  t: number\n): {\n    previous: SplinePoint\n    next: SplinePoint\n  } {\n  // Props to Rob Spencer at scaled innovation for his post on splining between points\n  // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n\n  // This function must also respect \"skipped\" points\n\n  const previous = firstPoint.skip ? middlePoint : firstPoint;\n  const current = middlePoint;\n  const next = afterPoint.skip ? middlePoint : afterPoint;\n  const d01 = distanceBetweenPoints(current, previous);\n  const d12 = distanceBetweenPoints(next, current);\n\n  let s01 = d01 / (d01 + d12);\n  let s12 = d12 / (d01 + d12);\n\n  // If all points are the same, s01 & s02 will be inf\n  s01 = isNaN(s01) ? 0 : s01;\n  s12 = isNaN(s12) ? 0 : s12;\n\n  const fa = t * s01; // scaling factor for triangle Ta\n  const fb = t * s12;\n\n  return {\n    previous: {\n      x: current.x - fa * (next.x - previous.x),\n      y: current.y - fa * (next.y - previous.y)\n    },\n    next: {\n      x: current.x + fb * (next.x - previous.x),\n      y: current.y + fb * (next.y - previous.y)\n    }\n  };\n}\n\n/**\n * Adjust tangents to ensure monotonic properties\n */\nfunction monotoneAdjust(points: SplinePoint[], deltaK: number[], mK: number[]) {\n  const pointsLen = points.length;\n\n  let alphaK: number, betaK: number, tauK: number, squaredMagnitude: number, pointCurrent: OptionalSplinePoint;\n  let pointAfter = getPoint(points, 0);\n  for (let i = 0; i < pointsLen - 1; ++i) {\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent || !pointAfter) {\n      continue;\n    }\n\n    if (almostEquals(deltaK[i], 0, EPSILON)) {\n      mK[i] = mK[i + 1] = 0;\n      continue;\n    }\n\n    alphaK = mK[i] / deltaK[i];\n    betaK = mK[i + 1] / deltaK[i];\n    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n    if (squaredMagnitude <= 9) {\n      continue;\n    }\n\n    tauK = 3 / Math.sqrt(squaredMagnitude);\n    mK[i] = alphaK * tauK * deltaK[i];\n    mK[i + 1] = betaK * tauK * deltaK[i];\n  }\n}\n\nfunction monotoneCompute(points: SplinePoint[], mK: number[], indexAxis: 'x' | 'y' = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  let delta: number, pointBefore: OptionalSplinePoint, pointCurrent: OptionalSplinePoint;\n  let pointAfter = getPoint(points, 0);\n\n  for (let i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent) {\n      continue;\n    }\n\n    const iPixel = pointCurrent[indexAxis];\n    const vPixel = pointCurrent[valueAxis];\n    if (pointBefore) {\n      delta = (iPixel - pointBefore[indexAxis]) / 3;\n      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n    }\n    if (pointAfter) {\n      delta = (pointAfter[indexAxis] - iPixel) / 3;\n      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n    }\n  }\n}\n\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */\nexport function splineCurveMonotone(points: SplinePoint[], indexAxis: 'x' | 'y' = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  const deltaK: number[] = Array(pointsLen).fill(0);\n  const mK: number[] = Array(pointsLen);\n\n  // Calculate slopes (deltaK) and initialize tangents (mK)\n  let i, pointBefore: OptionalSplinePoint, pointCurrent: OptionalSplinePoint;\n  let pointAfter = getPoint(points, 0);\n\n  for (i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent) {\n      continue;\n    }\n\n    if (pointAfter) {\n      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n\n      // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n    }\n    mK[i] = !pointBefore ? deltaK[i]\n      : !pointAfter ? deltaK[i - 1]\n        : (sign(deltaK[i - 1]) !== sign(deltaK[i])) ? 0\n          : (deltaK[i - 1] + deltaK[i]) / 2;\n  }\n\n  monotoneAdjust(points, deltaK, mK);\n\n  monotoneCompute(points, mK, indexAxis);\n}\n\nfunction capControlPoint(pt: number, min: number, max: number) {\n  return Math.max(Math.min(pt, max), min);\n}\n\nfunction capBezierPoints(points: SplinePoint[], area: ChartArea) {\n  let i, ilen, point, inArea, inAreaPrev;\n  let inAreaNext = _isPointInArea(points[0], area);\n  for (i = 0, ilen = points.length; i < ilen; ++i) {\n    inAreaPrev = inArea;\n    inArea = inAreaNext;\n    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n    if (!inArea) {\n      continue;\n    }\n    point = points[i];\n    if (inAreaPrev) {\n      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n    }\n    if (inAreaNext) {\n      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n    }\n  }\n}\n\n/**\n * @private\n */\nexport function _updateBezierControlPoints(\n  points: SplinePoint[],\n  options,\n  area: ChartArea,\n  loop: boolean,\n  indexAxis: 'x' | 'y'\n) {\n  let i: number, ilen: number, point: SplinePoint, controlPoints: ReturnType<typeof splineCurve>;\n\n  // Only consider points that are drawn in case the spanGaps option is used\n  if (options.spanGaps) {\n    points = points.filter((pt) => !pt.skip);\n  }\n\n  if (options.cubicInterpolationMode === 'monotone') {\n    splineCurveMonotone(points, indexAxis);\n  } else {\n    let prev = loop ? points[points.length - 1] : points[0];\n    for (i = 0, ilen = points.length; i < ilen; ++i) {\n      point = points[i];\n      controlPoints = splineCurve(\n        prev,\n        point,\n        points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen],\n        options.tension\n      );\n      point.cp1x = controlPoints.previous.x;\n      point.cp1y = controlPoints.previous.y;\n      point.cp2x = controlPoints.next.x;\n      point.cp2y = controlPoints.next.y;\n      prev = point;\n    }\n  }\n\n  if (options.capBezierPoints) {\n    capBezierPoints(points, area);\n  }\n}\n","import type {ChartArea, Scale} from '../types/index.js';\nimport type Chart from '../core/core.controller.js';\nimport type {ChartEvent} from '../types.js';\nimport {INFINITY} from './helpers.math.js';\n\n/**\n * Note: typedefs are auto-exported, so use a made-up `dom` namespace where\n * necessary to avoid duplicates with `export * from './helpers`; see\n * https://github.com/microsoft/TypeScript/issues/46011\n * @typedef { import('../core/core.controller.js').default } dom.Chart\n * @typedef { import('../../types').ChartEvent } ChartEvent\n */\n\n/**\n * @private\n */\nexport function _isDomSupported(): boolean {\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n\n/**\n * @private\n */\nexport function _getParentNode(domNode: HTMLCanvasElement): HTMLCanvasElement {\n  let parent = domNode.parentNode;\n  if (parent && parent.toString() === '[object ShadowRoot]') {\n    parent = (parent as ShadowRoot).host;\n  }\n  return parent as HTMLCanvasElement;\n}\n\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */\n\nfunction parseMaxStyle(styleValue: string | number, node: HTMLElement, parentProperty: string) {\n  let valueInPixels: number;\n  if (typeof styleValue === 'string') {\n    valueInPixels = parseInt(styleValue, 10);\n\n    if (styleValue.indexOf('%') !== -1) {\n      // percentage * size in dimension\n      valueInPixels = (valueInPixels / 100) * node.parentNode[parentProperty];\n    }\n  } else {\n    valueInPixels = styleValue;\n  }\n\n  return valueInPixels;\n}\n\nconst getComputedStyle = (element: HTMLElement): CSSStyleDeclaration =>\n  element.ownerDocument.defaultView.getComputedStyle(element, null);\n\nexport function getStyle(el: HTMLElement, property: string): string {\n  return getComputedStyle(el).getPropertyValue(property);\n}\n\nconst positions = ['top', 'right', 'bottom', 'left'];\nfunction getPositionedStyle(styles: CSSStyleDeclaration, style: string, suffix?: string): ChartArea {\n  const result = {} as ChartArea;\n  suffix = suffix ? '-' + suffix : '';\n  for (let i = 0; i < 4; i++) {\n    const pos = positions[i];\n    result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n  }\n  result.width = result.left + result.right;\n  result.height = result.top + result.bottom;\n  return result;\n}\n\nconst useOffsetPos = (x: number, y: number, target: HTMLElement | EventTarget) =>\n  (x > 0 || y > 0) && (!target || !(target as HTMLElement).shadowRoot);\n\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */\nfunction getCanvasPosition(\n  e: Event | TouchEvent | MouseEvent,\n  canvas: HTMLCanvasElement\n): {\n    x: number;\n    y: number;\n    box: boolean;\n  } {\n  const touches = (e as TouchEvent).touches;\n  const source = (touches && touches.length ? touches[0] : e) as MouseEvent;\n  const {offsetX, offsetY} = source as MouseEvent;\n  let box = false;\n  let x, y;\n  if (useOffsetPos(offsetX, offsetY, e.target)) {\n    x = offsetX;\n    y = offsetY;\n  } else {\n    const rect = canvas.getBoundingClientRect();\n    x = source.clientX - rect.left;\n    y = source.clientY - rect.top;\n    box = true;\n  }\n  return {x, y, box};\n}\n\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */\n\nexport function getRelativePosition(\n  event: Event | ChartEvent | TouchEvent | MouseEvent,\n  chart: Chart\n): { x: number; y: number } {\n  if ('native' in event) {\n    return event;\n  }\n\n  const {canvas, currentDevicePixelRatio} = chart;\n  const style = getComputedStyle(canvas);\n  const borderBox = style.boxSizing === 'border-box';\n  const paddings = getPositionedStyle(style, 'padding');\n  const borders = getPositionedStyle(style, 'border', 'width');\n  const {x, y, box} = getCanvasPosition(event, canvas);\n  const xOffset = paddings.left + (box && borders.left);\n  const yOffset = paddings.top + (box && borders.top);\n\n  let {width, height} = chart;\n  if (borderBox) {\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n  return {\n    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n  };\n}\n\nfunction getContainerSize(canvas: HTMLCanvasElement, width: number, height: number): Partial<Scale> {\n  let maxWidth: number, maxHeight: number;\n\n  if (width === undefined || height === undefined) {\n    const container = _getParentNode(canvas);\n    if (!container) {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    } else {\n      const rect = container.getBoundingClientRect(); // this is the border box of the container\n      const containerStyle = getComputedStyle(container);\n      const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n      const containerPadding = getPositionedStyle(containerStyle, 'padding');\n      width = rect.width - containerPadding.width - containerBorder.width;\n      height = rect.height - containerPadding.height - containerBorder.height;\n      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n    }\n  }\n  return {\n    width,\n    height,\n    maxWidth: maxWidth || INFINITY,\n    maxHeight: maxHeight || INFINITY\n  };\n}\n\nconst round1 = (v: number) => Math.round(v * 10) / 10;\n\n// eslint-disable-next-line complexity\nexport function getMaximumSize(\n  canvas: HTMLCanvasElement,\n  bbWidth?: number,\n  bbHeight?: number,\n  aspectRatio?: number\n): { width: number; height: number } {\n  const style = getComputedStyle(canvas);\n  const margins = getPositionedStyle(style, 'margin');\n  const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n  const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n  let {width, height} = containerSize;\n\n  if (style.boxSizing === 'content-box') {\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const paddings = getPositionedStyle(style, 'padding');\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n  width = Math.max(0, width - margins.width);\n  height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n  if (width && !height) {\n    // https://github.com/chartjs/Chart.js/issues/4659\n    // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n    height = round1(width / 2);\n  }\n\n  const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n\n  if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n    height = containerSize.height;\n    width = round1(Math.floor(height * aspectRatio));\n  }\n\n  return {width, height};\n}\n\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */\nexport function retinaScale(\n  chart: Chart,\n  forceRatio: number,\n  forceStyle?: boolean\n): boolean | void {\n  const pixelRatio = forceRatio || 1;\n  const deviceHeight = Math.floor(chart.height * pixelRatio);\n  const deviceWidth = Math.floor(chart.width * pixelRatio);\n\n  chart.height = Math.floor(chart.height);\n  chart.width = Math.floor(chart.width);\n\n  const canvas = chart.canvas;\n\n  // If no style has been set on the canvas, the render size is used as display size,\n  // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n  // See https://github.com/chartjs/Chart.js/issues/3575\n  if (canvas.style && (forceStyle || (!canvas.style.height && !canvas.style.width))) {\n    canvas.style.height = `${chart.height}px`;\n    canvas.style.width = `${chart.width}px`;\n  }\n\n  if (chart.currentDevicePixelRatio !== pixelRatio\n      || canvas.height !== deviceHeight\n      || canvas.width !== deviceWidth) {\n    chart.currentDevicePixelRatio = pixelRatio;\n    canvas.height = deviceHeight;\n    canvas.width = deviceWidth;\n    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */\nexport const supportsEventListenerOptions = (function() {\n  let passiveSupported = false;\n  try {\n    const options = {\n      get passive() { // This function will be called when the browser attempts to access the passive property.\n        passiveSupported = true;\n        return false;\n      }\n    } as EventListenerOptions;\n\n    window.addEventListener('test', null, options);\n    window.removeEventListener('test', null, options);\n  } catch (e) {\n    // continue regardless of error\n  }\n  return passiveSupported;\n}());\n\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */\n\nexport function readUsedSize(\n  element: HTMLElement,\n  property: 'width' | 'height'\n): number | undefined {\n  const value = getStyle(element, property);\n  const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n  return matches ? +matches[1] : undefined;\n}\n","import type {Point, SplinePoint} from '../types/geometric.js';\n\n/**\n * @private\n */\nexport function _pointInLine(p1: Point, p2: Point, t: number, mode?) { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: p1.y + t * (p2.y - p1.y)\n  };\n}\n\n/**\n * @private\n */\nexport function _steppedInterpolation(\n  p1: Point,\n  p2: Point,\n  t: number, mode: 'middle' | 'after' | unknown\n) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y\n      : mode === 'after' ? t < 1 ? p1.y : p2.y\n        : t > 0 ? p2.y : p1.y\n  };\n}\n\n/**\n * @private\n */\nexport function _bezierInterpolation(p1: SplinePoint, p2: SplinePoint, t: number, mode?) { // eslint-disable-line @typescript-eslint/no-unused-vars\n  const cp1 = {x: p1.cp2x, y: p1.cp2y};\n  const cp2 = {x: p2.cp1x, y: p2.cp1y};\n  const a = _pointInLine(p1, cp1, t);\n  const b = _pointInLine(cp1, cp2, t);\n  const c = _pointInLine(cp2, p2, t);\n  const d = _pointInLine(a, b, t);\n  const e = _pointInLine(b, c, t);\n  return _pointInLine(d, e, t);\n}\n","export interface RTLAdapter {\n  x(x: number): number;\n  setWidth(w: number): void;\n  textAlign(align: 'center' | 'left' | 'right'): 'center' | 'left' | 'right';\n  xPlus(x: number, value: number): number;\n  leftForLtr(x: number, itemWidth: number): number;\n}\n\nconst getRightToLeftAdapter = function(rectX: number, width: number): RTLAdapter {\n  return {\n    x(x) {\n      return rectX + rectX + width - x;\n    },\n    setWidth(w) {\n      width = w;\n    },\n    textAlign(align) {\n      if (align === 'center') {\n        return align;\n      }\n      return align === 'right' ? 'left' : 'right';\n    },\n    xPlus(x, value) {\n      return x - value;\n    },\n    leftForLtr(x, itemWidth) {\n      return x - itemWidth;\n    },\n  };\n};\n\nconst getLeftToRightAdapter = function(): RTLAdapter {\n  return {\n    x(x) {\n      return x;\n    },\n    setWidth(w) { // eslint-disable-line no-unused-vars\n    },\n    textAlign(align) {\n      return align;\n    },\n    xPlus(x, value) {\n      return x + value;\n    },\n    leftForLtr(x, _itemWidth) { // eslint-disable-line @typescript-eslint/no-unused-vars\n      return x;\n    },\n  };\n};\n\nexport function getRtlAdapter(rtl: boolean, rectX: number, width: number) {\n  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\n\nexport function overrideTextDirection(ctx: CanvasRenderingContext2D, direction: 'ltr' | 'rtl') {\n  let style: CSSStyleDeclaration, original: [string, string];\n  if (direction === 'ltr' || direction === 'rtl') {\n    style = ctx.canvas.style;\n    original = [\n      style.getPropertyValue('direction'),\n      style.getPropertyPriority('direction'),\n    ];\n\n    style.setProperty('direction', direction, 'important');\n    (ctx as { prevTextDirection?: [string, string] }).prevTextDirection = original;\n  }\n}\n\nexport function restoreTextDirection(ctx: CanvasRenderingContext2D, original?: [string, string]) {\n  if (original !== undefined) {\n    delete (ctx as { prevTextDirection?: [string, string] }).prevTextDirection;\n    ctx.canvas.style.setProperty('direction', original[0], original[1]);\n  }\n}\n","import {_angleBetween, _angleDiff, _isBetween, _normalizeAngle} from './helpers.math.js';\nimport {createContext} from './helpers.options.js';\nimport {isPatternOrGradient} from './helpers.color.js';\n\n/**\n * @typedef { import('../elements/element.line.js').default } LineElement\n * @typedef { import('../elements/element.point.js').default } PointElement\n * @typedef {{start: number, end: number, loop: boolean, style?: any}} Segment\n */\n\nfunction propertyFn(property) {\n  if (property === 'angle') {\n    return {\n      between: _angleBetween,\n      compare: _angleDiff,\n      normalize: _normalizeAngle,\n    };\n  }\n  return {\n    between: _isBetween,\n    compare: (a, b) => a - b,\n    normalize: x => x\n  };\n}\n\nfunction normalizeSegment({start, end, count, loop, style}) {\n  return {\n    start: start % count,\n    end: end % count,\n    loop: loop && (end - start + 1) % count === 0,\n    style\n  };\n}\n\nfunction getSegment(segment, points, bounds) {\n  const {property, start: startBound, end: endBound} = bounds;\n  const {between, normalize} = propertyFn(property);\n  const count = points.length;\n  // eslint-disable-next-line prefer-const\n  let {start, end, loop} = segment;\n  let i, ilen;\n\n  if (loop) {\n    start += count;\n    end += count;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n        break;\n      }\n      start--;\n      end--;\n    }\n    start %= count;\n    end %= count;\n  }\n\n  if (end < start) {\n    end += count;\n  }\n  return {start, end, loop, style: segment.style};\n}\n\n/**\n * Returns the sub-segment(s) of a line segment that fall in the given bounds\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} [segment.style] - segment style\n * @param {PointElement[]} points - the points that this segment refers to\n * @param {object} [bounds]\n * @param {string} bounds.property - the property of a `PointElement` we are bounding. `x`, `y` or `angle`.\n * @param {number} bounds.start - start value of the property\n * @param {number} bounds.end - end value of the property\n * @private\n **/\nexport function _boundSegment(segment, points, bounds) {\n  if (!bounds) {\n    return [segment];\n  }\n\n  const {property, start: startBound, end: endBound} = bounds;\n  const count = points.length;\n  const {compare, between, normalize} = propertyFn(property);\n  const {start, end, loop, style} = getSegment(segment, points, bounds);\n\n  const result = [];\n  let inside = false;\n  let subStart = null;\n  let value, point, prevValue;\n\n  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);\n  const shouldStart = () => inside || startIsBefore();\n  const shouldStop = () => !inside || endIsBefore();\n\n  for (let i = start, prev = start; i <= end; ++i) {\n    point = points[i % count];\n\n    if (point.skip) {\n      continue;\n    }\n\n    value = normalize(point[property]);\n\n    if (value === prevValue) {\n      continue;\n    }\n\n    inside = between(value, startBound, endBound);\n\n    if (subStart === null && shouldStart()) {\n      subStart = compare(value, startBound) === 0 ? i : prev;\n    }\n\n    if (subStart !== null && shouldStop()) {\n      result.push(normalizeSegment({start: subStart, end: i, loop, count, style}));\n      subStart = null;\n    }\n    prev = i;\n    prevValue = value;\n  }\n\n  if (subStart !== null) {\n    result.push(normalizeSegment({start: subStart, end, loop, count, style}));\n  }\n\n  return result;\n}\n\n\n/**\n * Returns the segments of the line that are inside given bounds\n * @param {LineElement} line\n * @param {object} [bounds]\n * @param {string} bounds.property - the property we are bounding with. `x`, `y` or `angle`.\n * @param {number} bounds.start - start value of the `property`\n * @param {number} bounds.end - end value of the `property`\n * @private\n */\nexport function _boundSegments(line, bounds) {\n  const result = [];\n  const segments = line.segments;\n\n  for (let i = 0; i < segments.length; i++) {\n    const sub = _boundSegment(segments[i], line.points, bounds);\n    if (sub.length) {\n      result.push(...sub);\n    }\n  }\n  return result;\n}\n\n/**\n * Find start and end index of a line.\n */\nfunction findStartAndEnd(points, count, loop, spanGaps) {\n  let start = 0;\n  let end = count - 1;\n\n  if (loop && !spanGaps) {\n    // loop and not spanning gaps, first find a gap to start from\n    while (start < count && !points[start].skip) {\n      start++;\n    }\n  }\n\n  // find first non skipped point (after the first gap possibly)\n  while (start < count && points[start].skip) {\n    start++;\n  }\n\n  // if we looped to count, start needs to be 0\n  start %= count;\n\n  if (loop) {\n    // loop will go past count, if start > 0\n    end += start;\n  }\n\n  while (end > start && points[end % count].skip) {\n    end--;\n  }\n\n  // end could be more than count, normalize\n  end %= count;\n\n  return {start, end};\n}\n\n/**\n * Compute solid segments from Points, when spanGaps === false\n * @param {PointElement[]} points - the points\n * @param {number} start - start index\n * @param {number} max - max index (can go past count on a loop)\n * @param {boolean} loop - boolean indicating that this would be a loop if no gaps are found\n */\nfunction solidSegments(points, start, max, loop) {\n  const count = points.length;\n  const result = [];\n  let last = start;\n  let prev = points[start];\n  let end;\n\n  for (end = start + 1; end <= max; ++end) {\n    const cur = points[end % count];\n    if (cur.skip || cur.stop) {\n      if (!prev.skip) {\n        loop = false;\n        result.push({start: start % count, end: (end - 1) % count, loop});\n        // @ts-ignore\n        start = last = cur.stop ? end : null;\n      }\n    } else {\n      last = end;\n      if (prev.skip) {\n        start = end;\n      }\n    }\n    prev = cur;\n  }\n\n  if (last !== null) {\n    result.push({start: start % count, end: last % count, loop});\n  }\n\n  return result;\n}\n\n/**\n * Compute the continuous segments that define the whole line\n * There can be skipped points within a segment, if spanGaps is true.\n * @param {LineElement} line\n * @param {object} [segmentOptions]\n * @return {Segment[]}\n * @private\n */\nexport function _computeSegments(line, segmentOptions) {\n  const points = line.points;\n  const spanGaps = line.options.spanGaps;\n  const count = points.length;\n\n  if (!count) {\n    return [];\n  }\n\n  const loop = !!line._loop;\n  const {start, end} = findStartAndEnd(points, count, loop, spanGaps);\n\n  if (spanGaps === true) {\n    return splitByStyles(line, [{start, end, loop}], points, segmentOptions);\n  }\n\n  const max = end < start ? end + count : end;\n  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n\n/**\n * @param {Segment[]} segments\n * @param {PointElement[]} points\n * @param {object} [segmentOptions]\n * @return {Segment[]}\n */\nfunction splitByStyles(line, segments, points, segmentOptions) {\n  if (!segmentOptions || !segmentOptions.setContext || !points) {\n    return segments;\n  }\n  return doSplitByStyles(line, segments, points, segmentOptions);\n}\n\n/**\n * @param {LineElement} line\n * @param {Segment[]} segments\n * @param {PointElement[]} points\n * @param {object} [segmentOptions]\n * @return {Segment[]}\n */\nfunction doSplitByStyles(line, segments, points, segmentOptions) {\n  const chartContext = line._chart.getContext();\n  const baseStyle = readStyle(line.options);\n  const {_datasetIndex: datasetIndex, options: {spanGaps}} = line;\n  const count = points.length;\n  const result = [];\n  let prevStyle = baseStyle;\n  let start = segments[0].start;\n  let i = start;\n\n  function addStyle(s, e, l, st) {\n    const dir = spanGaps ? -1 : 1;\n    if (s === e) {\n      return;\n    }\n    // Style can not start/end on a skipped point, adjust indices accordingly\n    s += count;\n    while (points[s % count].skip) {\n      s -= dir;\n    }\n    while (points[e % count].skip) {\n      e += dir;\n    }\n    if (s % count !== e % count) {\n      result.push({start: s % count, end: e % count, loop: l, style: st});\n      prevStyle = st;\n      start = e % count;\n    }\n  }\n\n  for (const segment of segments) {\n    start = spanGaps ? start : segment.start;\n    let prev = points[start % count];\n    let style;\n    for (i = start + 1; i <= segment.end; i++) {\n      const pt = points[i % count];\n      style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n        type: 'segment',\n        p0: prev,\n        p1: pt,\n        p0DataIndex: (i - 1) % count,\n        p1DataIndex: i % count,\n        datasetIndex\n      })));\n      if (styleChanged(style, prevStyle)) {\n        addStyle(start, i - 1, segment.loop, prevStyle);\n      }\n      prev = pt;\n      prevStyle = style;\n    }\n    if (start < i - 1) {\n      addStyle(start, i - 1, segment.loop, prevStyle);\n    }\n  }\n\n  return result;\n}\n\nfunction readStyle(options) {\n  return {\n    backgroundColor: options.backgroundColor,\n    borderCapStyle: options.borderCapStyle,\n    borderDash: options.borderDash,\n    borderDashOffset: options.borderDashOffset,\n    borderJoinStyle: options.borderJoinStyle,\n    borderWidth: options.borderWidth,\n    borderColor: options.borderColor\n  };\n}\n\nfunction styleChanged(style, prevStyle) {\n  if (!prevStyle) {\n    return false;\n  }\n  const cache = [];\n  const replacer = function(key, value) {\n    if (!isPatternOrGradient(value)) {\n      return value;\n    }\n    if (!cache.includes(value)) {\n      cache.push(value);\n    }\n    return cache.indexOf(value);\n  };\n  return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n","/*!\n * @kurkle/color v0.3.2\n * https://github.com/kurkle/color#readme\n * (c) 2023 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n  x: 'dark',\n  Z: 'light',\n  Y: 're',\n  X: 'blu',\n  W: 'gr',\n  V: 'medium',\n  U: 'slate',\n  A: 'ee',\n  T: 'ol',\n  S: 'or',\n  B: 'ra',\n  C: 'lateg',\n  D: 'ights',\n  R: 'in',\n  Q: 'turquois',\n  E: 'hi',\n  P: 'ro',\n  O: 'al',\n  N: 'le',\n  M: 'de',\n  L: 'yello',\n  F: 'en',\n  K: 'ch',\n  G: 'arks',\n  H: 'ea',\n  I: 'ightg',\n  J: 'wh'\n};\nconst names$1 = {\n  OiceXe: 'f0f8ff',\n  antiquewEte: 'faebd7',\n  aqua: 'ffff',\n  aquamarRe: '7fffd4',\n  azuY: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '0',\n  blanKedOmond: 'ffebcd',\n  Xe: 'ff',\n  XeviTet: '8a2be2',\n  bPwn: 'a52a2a',\n  burlywood: 'deb887',\n  caMtXe: '5f9ea0',\n  KartYuse: '7fff00',\n  KocTate: 'd2691e',\n  cSO: 'ff7f50',\n  cSnflowerXe: '6495ed',\n  cSnsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: 'ffff',\n  xXe: '8b',\n  xcyan: '8b8b',\n  xgTMnPd: 'b8860b',\n  xWay: 'a9a9a9',\n  xgYF: '6400',\n  xgYy: 'a9a9a9',\n  xkhaki: 'bdb76b',\n  xmagFta: '8b008b',\n  xTivegYF: '556b2f',\n  xSange: 'ff8c00',\n  xScEd: '9932cc',\n  xYd: '8b0000',\n  xsOmon: 'e9967a',\n  xsHgYF: '8fbc8f',\n  xUXe: '483d8b',\n  xUWay: '2f4f4f',\n  xUgYy: '2f4f4f',\n  xQe: 'ced1',\n  xviTet: '9400d3',\n  dAppRk: 'ff1493',\n  dApskyXe: 'bfff',\n  dimWay: '696969',\n  dimgYy: '696969',\n  dodgerXe: '1e90ff',\n  fiYbrick: 'b22222',\n  flSOwEte: 'fffaf0',\n  foYstWAn: '228b22',\n  fuKsia: 'ff00ff',\n  gaRsbSo: 'dcdcdc',\n  ghostwEte: 'f8f8ff',\n  gTd: 'ffd700',\n  gTMnPd: 'daa520',\n  Way: '808080',\n  gYF: '8000',\n  gYFLw: 'adff2f',\n  gYy: '808080',\n  honeyMw: 'f0fff0',\n  hotpRk: 'ff69b4',\n  RdianYd: 'cd5c5c',\n  Rdigo: '4b0082',\n  ivSy: 'fffff0',\n  khaki: 'f0e68c',\n  lavFMr: 'e6e6fa',\n  lavFMrXsh: 'fff0f5',\n  lawngYF: '7cfc00',\n  NmoncEffon: 'fffacd',\n  ZXe: 'add8e6',\n  ZcSO: 'f08080',\n  Zcyan: 'e0ffff',\n  ZgTMnPdLw: 'fafad2',\n  ZWay: 'd3d3d3',\n  ZgYF: '90ee90',\n  ZgYy: 'd3d3d3',\n  ZpRk: 'ffb6c1',\n  ZsOmon: 'ffa07a',\n  ZsHgYF: '20b2aa',\n  ZskyXe: '87cefa',\n  ZUWay: '778899',\n  ZUgYy: '778899',\n  ZstAlXe: 'b0c4de',\n  ZLw: 'ffffe0',\n  lime: 'ff00',\n  limegYF: '32cd32',\n  lRF: 'faf0e6',\n  magFta: 'ff00ff',\n  maPon: '800000',\n  VaquamarRe: '66cdaa',\n  VXe: 'cd',\n  VScEd: 'ba55d3',\n  VpurpN: '9370db',\n  VsHgYF: '3cb371',\n  VUXe: '7b68ee',\n  VsprRggYF: 'fa9a',\n  VQe: '48d1cc',\n  VviTetYd: 'c71585',\n  midnightXe: '191970',\n  mRtcYam: 'f5fffa',\n  mistyPse: 'ffe4e1',\n  moccasR: 'ffe4b5',\n  navajowEte: 'ffdead',\n  navy: '80',\n  Tdlace: 'fdf5e6',\n  Tive: '808000',\n  TivedBb: '6b8e23',\n  Sange: 'ffa500',\n  SangeYd: 'ff4500',\n  ScEd: 'da70d6',\n  pOegTMnPd: 'eee8aa',\n  pOegYF: '98fb98',\n  pOeQe: 'afeeee',\n  pOeviTetYd: 'db7093',\n  papayawEp: 'ffefd5',\n  pHKpuff: 'ffdab9',\n  peru: 'cd853f',\n  pRk: 'ffc0cb',\n  plum: 'dda0dd',\n  powMrXe: 'b0e0e6',\n  purpN: '800080',\n  YbeccapurpN: '663399',\n  Yd: 'ff0000',\n  Psybrown: 'bc8f8f',\n  PyOXe: '4169e1',\n  saddNbPwn: '8b4513',\n  sOmon: 'fa8072',\n  sandybPwn: 'f4a460',\n  sHgYF: '2e8b57',\n  sHshell: 'fff5ee',\n  siFna: 'a0522d',\n  silver: 'c0c0c0',\n  skyXe: '87ceeb',\n  UXe: '6a5acd',\n  UWay: '708090',\n  UgYy: '708090',\n  snow: 'fffafa',\n  sprRggYF: 'ff7f',\n  stAlXe: '4682b4',\n  tan: 'd2b48c',\n  teO: '8080',\n  tEstN: 'd8bfd8',\n  tomato: 'ff6347',\n  Qe: '40e0d0',\n  viTet: 'ee82ee',\n  JHt: 'f5deb3',\n  wEte: 'ffffff',\n  wEtesmoke: 'f5f5f5',\n  Lw: 'ffff00',\n  LwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\n","const colorString = require('color-string');\nconst convert = require('color-convert');\n\nconst skippedModels = [\n\t// To be honest, I don't really feel like keyword belongs in color convert, but eh.\n\t'keyword',\n\n\t// Gray conflicts with some method names, and has its own method defined.\n\t'gray',\n\n\t// Shouldn't really be in color-convert either...\n\t'hex',\n];\n\nconst hashedModelKeys = {};\nfor (const model of Object.keys(convert)) {\n\thashedModelKeys[[...convert[model].labels].sort().join('')] = model;\n}\n\nconst limiters = {};\n\nfunction Color(object, model) {\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(object, model);\n\t}\n\n\tif (model && model in skippedModels) {\n\t\tmodel = null;\n\t}\n\n\tif (model && !(model in convert)) {\n\t\tthrow new Error('Unknown model: ' + model);\n\t}\n\n\tlet i;\n\tlet channels;\n\n\tif (object == null) { // eslint-disable-line no-eq-null,eqeqeq\n\t\tthis.model = 'rgb';\n\t\tthis.color = [0, 0, 0];\n\t\tthis.valpha = 1;\n\t} else if (object instanceof Color) {\n\t\tthis.model = object.model;\n\t\tthis.color = [...object.color];\n\t\tthis.valpha = object.valpha;\n\t} else if (typeof object === 'string') {\n\t\tconst result = colorString.get(object);\n\t\tif (result === null) {\n\t\t\tthrow new Error('Unable to parse color from string: ' + object);\n\t\t}\n\n\t\tthis.model = result.model;\n\t\tchannels = convert[this.model].channels;\n\t\tthis.color = result.value.slice(0, channels);\n\t\tthis.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n\t} else if (object.length > 0) {\n\t\tthis.model = model || 'rgb';\n\t\tchannels = convert[this.model].channels;\n\t\tconst newArray = Array.prototype.slice.call(object, 0, channels);\n\t\tthis.color = zeroArray(newArray, channels);\n\t\tthis.valpha = typeof object[channels] === 'number' ? object[channels] : 1;\n\t} else if (typeof object === 'number') {\n\t\t// This is always RGB - can be converted later on.\n\t\tthis.model = 'rgb';\n\t\tthis.color = [\n\t\t\t(object >> 16) & 0xFF,\n\t\t\t(object >> 8) & 0xFF,\n\t\t\tobject & 0xFF,\n\t\t];\n\t\tthis.valpha = 1;\n\t} else {\n\t\tthis.valpha = 1;\n\n\t\tconst keys = Object.keys(object);\n\t\tif ('alpha' in object) {\n\t\t\tkeys.splice(keys.indexOf('alpha'), 1);\n\t\t\tthis.valpha = typeof object.alpha === 'number' ? object.alpha : 0;\n\t\t}\n\n\t\tconst hashedKeys = keys.sort().join('');\n\t\tif (!(hashedKeys in hashedModelKeys)) {\n\t\t\tthrow new Error('Unable to parse color from object: ' + JSON.stringify(object));\n\t\t}\n\n\t\tthis.model = hashedModelKeys[hashedKeys];\n\n\t\tconst {labels} = convert[this.model];\n\t\tconst color = [];\n\t\tfor (i = 0; i < labels.length; i++) {\n\t\t\tcolor.push(object[labels[i]]);\n\t\t}\n\n\t\tthis.color = zeroArray(color);\n\t}\n\n\t// Perform limitations (clamping, etc.)\n\tif (limiters[this.model]) {\n\t\tchannels = convert[this.model].channels;\n\t\tfor (i = 0; i < channels; i++) {\n\t\t\tconst limit = limiters[this.model][i];\n\t\t\tif (limit) {\n\t\t\t\tthis.color[i] = limit(this.color[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.valpha = Math.max(0, Math.min(1, this.valpha));\n\n\tif (Object.freeze) {\n\t\tObject.freeze(this);\n\t}\n}\n\nColor.prototype = {\n\ttoString() {\n\t\treturn this.string();\n\t},\n\n\ttoJSON() {\n\t\treturn this[this.model]();\n\t},\n\n\tstring(places) {\n\t\tlet self = this.model in colorString.to ? this : this.rgb();\n\t\tself = self.round(typeof places === 'number' ? places : 1);\n\t\tconst args = self.valpha === 1 ? self.color : [...self.color, this.valpha];\n\t\treturn colorString.to[self.model](args);\n\t},\n\n\tpercentString(places) {\n\t\tconst self = this.rgb().round(typeof places === 'number' ? places : 1);\n\t\tconst args = self.valpha === 1 ? self.color : [...self.color, this.valpha];\n\t\treturn colorString.to.rgb.percent(args);\n\t},\n\n\tarray() {\n\t\treturn this.valpha === 1 ? [...this.color] : [...this.color, this.valpha];\n\t},\n\n\tobject() {\n\t\tconst result = {};\n\t\tconst {channels} = convert[this.model];\n\t\tconst {labels} = convert[this.model];\n\n\t\tfor (let i = 0; i < channels; i++) {\n\t\t\tresult[labels[i]] = this.color[i];\n\t\t}\n\n\t\tif (this.valpha !== 1) {\n\t\t\tresult.alpha = this.valpha;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tunitArray() {\n\t\tconst rgb = this.rgb().color;\n\t\trgb[0] /= 255;\n\t\trgb[1] /= 255;\n\t\trgb[2] /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.push(this.valpha);\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tunitObject() {\n\t\tconst rgb = this.rgb().object();\n\t\trgb.r /= 255;\n\t\trgb.g /= 255;\n\t\trgb.b /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.alpha = this.valpha;\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tround(places) {\n\t\tplaces = Math.max(places || 0, 0);\n\t\treturn new Color([...this.color.map(roundToPlace(places)), this.valpha], this.model);\n\t},\n\n\talpha(value) {\n\t\tif (value !== undefined) {\n\t\t\treturn new Color([...this.color, Math.max(0, Math.min(1, value))], this.model);\n\t\t}\n\n\t\treturn this.valpha;\n\t},\n\n\t// Rgb\n\tred: getset('rgb', 0, maxfn(255)),\n\tgreen: getset('rgb', 1, maxfn(255)),\n\tblue: getset('rgb', 2, maxfn(255)),\n\n\thue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, value => ((value % 360) + 360) % 360),\n\n\tsaturationl: getset('hsl', 1, maxfn(100)),\n\tlightness: getset('hsl', 2, maxfn(100)),\n\n\tsaturationv: getset('hsv', 1, maxfn(100)),\n\tvalue: getset('hsv', 2, maxfn(100)),\n\n\tchroma: getset('hcg', 1, maxfn(100)),\n\tgray: getset('hcg', 2, maxfn(100)),\n\n\twhite: getset('hwb', 1, maxfn(100)),\n\twblack: getset('hwb', 2, maxfn(100)),\n\n\tcyan: getset('cmyk', 0, maxfn(100)),\n\tmagenta: getset('cmyk', 1, maxfn(100)),\n\tyellow: getset('cmyk', 2, maxfn(100)),\n\tblack: getset('cmyk', 3, maxfn(100)),\n\n\tx: getset('xyz', 0, maxfn(95.047)),\n\ty: getset('xyz', 1, maxfn(100)),\n\tz: getset('xyz', 2, maxfn(108.833)),\n\n\tl: getset('lab', 0, maxfn(100)),\n\ta: getset('lab', 1),\n\tb: getset('lab', 2),\n\n\tkeyword(value) {\n\t\tif (value !== undefined) {\n\t\t\treturn new Color(value);\n\t\t}\n\n\t\treturn convert[this.model].keyword(this.color);\n\t},\n\n\thex(value) {\n\t\tif (value !== undefined) {\n\t\t\treturn new Color(value);\n\t\t}\n\n\t\treturn colorString.to.hex(this.rgb().round().color);\n\t},\n\n\thexa(value) {\n\t\tif (value !== undefined) {\n\t\t\treturn new Color(value);\n\t\t}\n\n\t\tconst rgbArray = this.rgb().round().color;\n\n\t\tlet alphaHex = Math.round(this.valpha * 255).toString(16).toUpperCase();\n\t\tif (alphaHex.length === 1) {\n\t\t\talphaHex = '0' + alphaHex;\n\t\t}\n\n\t\treturn colorString.to.hex(rgbArray) + alphaHex;\n\t},\n\n\trgbNumber() {\n\t\tconst rgb = this.rgb().color;\n\t\treturn ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);\n\t},\n\n\tluminosity() {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tconst rgb = this.rgb().color;\n\n\t\tconst lum = [];\n\t\tfor (const [i, element] of rgb.entries()) {\n\t\t\tconst chan = element / 255;\n\t\t\tlum[i] = (chan <= 0.04045) ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;\n\t\t}\n\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast(color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tconst lum1 = this.luminosity();\n\t\tconst lum2 = color2.luminosity();\n\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel(color2) {\n\t\t// https://www.w3.org/TR/WCAG/#contrast-enhanced\n\t\tconst contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tisDark() {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tconst rgb = this.rgb().color;\n\t\tconst yiq = (rgb[0] * 2126 + rgb[1] * 7152 + rgb[2] * 722) / 10000;\n\t\treturn yiq < 128;\n\t},\n\n\tisLight() {\n\t\treturn !this.isDark();\n\t},\n\n\tnegate() {\n\t\tconst rgb = this.rgb();\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\trgb.color[i] = 255 - rgb.color[i];\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tlighten(ratio) {\n\t\tconst hsl = this.hsl();\n\t\thsl.color[2] += hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdarken(ratio) {\n\t\tconst hsl = this.hsl();\n\t\thsl.color[2] -= hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tsaturate(ratio) {\n\t\tconst hsl = this.hsl();\n\t\thsl.color[1] += hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdesaturate(ratio) {\n\t\tconst hsl = this.hsl();\n\t\thsl.color[1] -= hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\twhiten(ratio) {\n\t\tconst hwb = this.hwb();\n\t\thwb.color[1] += hwb.color[1] * ratio;\n\t\treturn hwb;\n\t},\n\n\tblacken(ratio) {\n\t\tconst hwb = this.hwb();\n\t\thwb.color[2] += hwb.color[2] * ratio;\n\t\treturn hwb;\n\t},\n\n\tgrayscale() {\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tconst rgb = this.rgb().color;\n\t\tconst value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\treturn Color.rgb(value, value, value);\n\t},\n\n\tfade(ratio) {\n\t\treturn this.alpha(this.valpha - (this.valpha * ratio));\n\t},\n\n\topaquer(ratio) {\n\t\treturn this.alpha(this.valpha + (this.valpha * ratio));\n\t},\n\n\trotate(degrees) {\n\t\tconst hsl = this.hsl();\n\t\tlet hue = hsl.color[0];\n\t\thue = (hue + degrees) % 360;\n\t\thue = hue < 0 ? 360 + hue : hue;\n\t\thsl.color[0] = hue;\n\t\treturn hsl;\n\t},\n\n\tmix(mixinColor, weight) {\n\t\t// Ported from sass implementation in C\n\t\t// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t\tif (!mixinColor || !mixinColor.rgb) {\n\t\t\tthrow new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\n\t\t}\n\n\t\tconst color1 = mixinColor.rgb();\n\t\tconst color2 = this.rgb();\n\t\tconst p = weight === undefined ? 0.5 : weight;\n\n\t\tconst w = 2 * p - 1;\n\t\tconst a = color1.alpha() - color2.alpha();\n\n\t\tconst w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2;\n\t\tconst w2 = 1 - w1;\n\n\t\treturn Color.rgb(\n\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\tw1 * color1.blue() + w2 * color2.blue(),\n\t\t\tcolor1.alpha() * p + color2.alpha() * (1 - p));\n\t},\n};\n\n// Model conversion methods and static constructors\nfor (const model of Object.keys(convert)) {\n\tif (skippedModels.includes(model)) {\n\t\tcontinue;\n\t}\n\n\tconst {channels} = convert[model];\n\n\t// Conversion methods\n\tColor.prototype[model] = function (...args) {\n\t\tif (this.model === model) {\n\t\t\treturn new Color(this);\n\t\t}\n\n\t\tif (args.length > 0) {\n\t\t\treturn new Color(args, model);\n\t\t}\n\n\t\treturn new Color([...assertArray(convert[this.model][model].raw(this.color)), this.valpha], model);\n\t};\n\n\t// 'static' construction methods\n\tColor[model] = function (...args) {\n\t\tlet color = args[0];\n\t\tif (typeof color === 'number') {\n\t\t\tcolor = zeroArray(args, channels);\n\t\t}\n\n\t\treturn new Color(color, model);\n\t};\n}\n\nfunction roundTo(number, places) {\n\treturn Number(number.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n\treturn function (number) {\n\t\treturn roundTo(number, places);\n\t};\n}\n\nfunction getset(model, channel, modifier) {\n\tmodel = Array.isArray(model) ? model : [model];\n\n\tfor (const m of model) {\n\t\t(limiters[m] || (limiters[m] = []))[channel] = modifier;\n\t}\n\n\tmodel = model[0];\n\n\treturn function (value) {\n\t\tlet result;\n\n\t\tif (value !== undefined) {\n\t\t\tif (modifier) {\n\t\t\t\tvalue = modifier(value);\n\t\t\t}\n\n\t\t\tresult = this[model]();\n\t\t\tresult.color[channel] = value;\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = this[model]().color[channel];\n\t\tif (modifier) {\n\t\t\tresult = modifier(result);\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\nfunction maxfn(max) {\n\treturn function (v) {\n\t\treturn Math.max(0, Math.min(max, v));\n\t};\n}\n\nfunction assertArray(value) {\n\treturn Array.isArray(value) ? value : [value];\n}\n\nfunction zeroArray(array, length) {\n\tfor (let i = 0; i < length; i++) {\n\t\tif (typeof array[i] !== 'number') {\n\t\t\tarray[i] = 0;\n\t\t}\n\t}\n\n\treturn array;\n}\n\nmodule.exports = Color;\n","/* MIT license */\nvar colorNames = require('color-name');\nvar swizzle = require('simple-swizzle');\nvar hasOwnProperty = Object.hasOwnProperty;\n\nvar reverseNames = Object.create(null);\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (hasOwnProperty.call(colorNames, name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)(?=[\\s,])\\s*(?:,\\s*)?([+-]?\\d+)(?=[\\s,])\\s*(?:,\\s*)?([+-]?\\d+)\\s*(?:[,|\\/]\\s*([+-]?[\\d\\.]+)(%?)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,?\\s*([+-]?[\\d\\.]+)\\%\\s*,?\\s*([+-]?[\\d\\.]+)\\%\\s*(?:[,|\\/]\\s*([+-]?[\\d\\.]+)(%?)\\s*)?\\)$/;\n\tvar keyword = /^(\\w+)$/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = parseInt(hexAlpha, 16) / 255;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\tif (match[5]) {\n\t\t\t\trgb[3] = parseFloat(match[4]) * 0.01;\n\t\t\t} else {\n\t\t\t\trgb[3] = parseFloat(match[4]);\n\t\t\t}\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\tif (match[5]) {\n\t\t\t\trgb[3] = parseFloat(match[4]) * 0.01;\n\t\t\t} else {\n\t\t\t\trgb[3] = parseFloat(match[4]);\n\t\t\t}\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\tif (!hasOwnProperty.call(colorNames, match[1])) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d{0,3}\\.)?\\d+)(?:deg)?\\s*,?\\s*([+-]?[\\d\\.]+)%\\s*,?\\s*([+-]?[\\d\\.]+)%\\s*(?:[,|\\/]\\s*([+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = Math.round(num).toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","'use strict';\n\nvar isArrayish = require('is-arrayish');\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n","module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n","const conversions = require('./conversions');\nconst route = require('./route');\n\nconst convert = {};\n\nconst models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tconst wrappedFn = function (...args) {\n\t\tconst arg0 = args[0];\n\t\tif (arg0 === undefined || arg0 === null) {\n\t\t\treturn arg0;\n\t\t}\n\n\t\tif (arg0.length > 1) {\n\t\t\targs = arg0;\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// Preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tconst wrappedFn = function (...args) {\n\t\tconst arg0 = args[0];\n\n\t\tif (arg0 === undefined || arg0 === null) {\n\t\t\treturn arg0;\n\t\t}\n\n\t\tif (arg0.length > 1) {\n\t\t\targs = arg0;\n\t\t}\n\n\t\tconst result = fn(args);\n\n\t\t// We're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (let len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// Preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(fromModel => {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tconst routes = route(fromModel);\n\tconst routeModels = Object.keys(routes);\n\n\trouteModels.forEach(toModel => {\n\t\tconst fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n","/* MIT license */\n/* eslint-disable no-mixed-operators */\nconst cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nconst reverseKeywords = {};\nfor (const key of Object.keys(cssKeywords)) {\n\treverseKeywords[cssKeywords[key]] = key;\n}\n\nconst convert = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\nmodule.exports = convert;\n\n// Hide .channels and .labels properties\nfor (const model of Object.keys(convert)) {\n\tif (!('channels' in convert[model])) {\n\t\tthrow new Error('missing channels property: ' + model);\n\t}\n\n\tif (!('labels' in convert[model])) {\n\t\tthrow new Error('missing channel labels property: ' + model);\n\t}\n\n\tif (convert[model].labels.length !== convert[model].channels) {\n\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t}\n\n\tconst {channels, labels} = convert[model];\n\tdelete convert[model].channels;\n\tdelete convert[model].labels;\n\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\tObject.defineProperty(convert[model], 'labels', {value: labels});\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst min = Math.min(r, g, b);\n\tconst max = Math.max(r, g, b);\n\tconst delta = max - min;\n\tlet h;\n\tlet s;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tconst l = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tlet rdif;\n\tlet gdif;\n\tlet bdif;\n\tlet h;\n\tlet s;\n\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst v = Math.max(r, g, b);\n\tconst diff = v - Math.min(r, g, b);\n\tconst diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = 0;\n\t\ts = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tconst r = rgb[0];\n\tconst g = rgb[1];\n\tlet b = rgb[2];\n\tconst h = convert.rgb.hsl(rgb)[0];\n\tconst w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\n\tconst k = Math.min(1 - r, 1 - g, 1 - b);\n\tconst c = (1 - r - k) / (1 - k) || 0;\n\tconst m = (1 - g - k) / (1 - k) || 0;\n\tconst y = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\nfunction comparativeDistance(x, y) {\n\t/*\n\t\tSee https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n\t*/\n\treturn (\n\t\t((x[0] - y[0]) ** 2) +\n\t\t((x[1] - y[1]) ** 2) +\n\t\t((x[2] - y[2]) ** 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tconst reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tlet currentClosestDistance = Infinity;\n\tlet currentClosestKeyword;\n\n\tfor (const keyword of Object.keys(cssKeywords)) {\n\t\tconst value = cssKeywords[keyword];\n\n\t\t// Compute comparative distance\n\t\tconst distance = comparativeDistance(rgb, value);\n\n\t\t// Check if its less, if so set as closest\n\t\tif (distance < currentClosestDistance) {\n\t\t\tcurrentClosestDistance = distance;\n\t\t\tcurrentClosestKeyword = keyword;\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tlet r = rgb[0] / 255;\n\tlet g = rgb[1] / 255;\n\tlet b = rgb[2] / 255;\n\n\t// Assume sRGB\n\tr = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);\n\n\tconst x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tconst y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tconst z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tconst xyz = convert.rgb.xyz(rgb);\n\tlet x = xyz[0];\n\tlet y = xyz[1];\n\tlet z = xyz[2];\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);\n\n\tconst l = (116 * y) - 16;\n\tconst a = 500 * (x - y);\n\tconst b = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tconst h = hsl[0] / 360;\n\tconst s = hsl[1] / 100;\n\tconst l = hsl[2] / 100;\n\tlet t2;\n\tlet t3;\n\tlet val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tconst t1 = 2 * l - t2;\n\n\tconst rgb = [0, 0, 0];\n\tfor (let i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tconst h = hsl[0];\n\tlet s = hsl[1] / 100;\n\tlet l = hsl[2] / 100;\n\tlet smin = s;\n\tconst lmin = Math.max(l, 0.01);\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tconst v = (l + s) / 2;\n\tconst sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tconst h = hsv[0] / 60;\n\tconst s = hsv[1] / 100;\n\tlet v = hsv[2] / 100;\n\tconst hi = Math.floor(h) % 6;\n\n\tconst f = h - Math.floor(h);\n\tconst p = 255 * v * (1 - s);\n\tconst q = 255 * v * (1 - (s * f));\n\tconst t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tconst h = hsv[0];\n\tconst s = hsv[1] / 100;\n\tconst v = hsv[2] / 100;\n\tconst vmin = Math.max(v, 0.01);\n\tlet sl;\n\tlet l;\n\n\tl = (2 - s) * v;\n\tconst lmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tconst h = hwb[0] / 360;\n\tlet wh = hwb[1] / 100;\n\tlet bl = hwb[2] / 100;\n\tconst ratio = wh + bl;\n\tlet f;\n\n\t// Wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\tconst i = Math.floor(6 * h);\n\tconst v = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tconst n = wh + f * (v - wh); // Linear interpolation\n\n\tlet r;\n\tlet g;\n\tlet b;\n\t/* eslint-disable max-statements-per-line,no-multi-spaces */\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v;  g = n;  b = wh; break;\n\t\tcase 1: r = n;  g = v;  b = wh; break;\n\t\tcase 2: r = wh; g = v;  b = n; break;\n\t\tcase 3: r = wh; g = n;  b = v; break;\n\t\tcase 4: r = n;  g = wh; b = v; break;\n\t\tcase 5: r = v;  g = wh; b = n; break;\n\t}\n\t/* eslint-enable max-statements-per-line,no-multi-spaces */\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tconst c = cmyk[0] / 100;\n\tconst m = cmyk[1] / 100;\n\tconst y = cmyk[2] / 100;\n\tconst k = cmyk[3] / 100;\n\n\tconst r = 1 - Math.min(1, c * (1 - k) + k);\n\tconst g = 1 - Math.min(1, m * (1 - k) + k);\n\tconst b = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tconst x = xyz[0] / 100;\n\tconst y = xyz[1] / 100;\n\tconst z = xyz[2] / 100;\n\tlet r;\n\tlet g;\n\tlet b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// Assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tlet x = xyz[0];\n\tlet y = xyz[1];\n\tlet z = xyz[2];\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);\n\n\tconst l = (116 * y) - 16;\n\tconst a = 500 * (x - y);\n\tconst b = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tconst l = lab[0];\n\tconst a = lab[1];\n\tconst b = lab[2];\n\tlet x;\n\tlet y;\n\tlet z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tconst y2 = y ** 3;\n\tconst x2 = x ** 3;\n\tconst z2 = z ** 3;\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tconst l = lab[0];\n\tconst a = lab[1];\n\tconst b = lab[2];\n\tlet h;\n\n\tconst hr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tconst c = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tconst l = lch[0];\n\tconst c = lch[1];\n\tconst h = lch[2];\n\n\tconst hr = h / 360 * 2 * Math.PI;\n\tconst a = c * Math.cos(hr);\n\tconst b = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args, saturation = null) {\n\tconst [r, g, b] = args;\n\tlet value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tlet ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// Optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tconst r = args[0];\n\tconst g = args[1];\n\tconst b = args[2];\n\n\t// We use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tconst ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tlet color = args % 10;\n\n\t// Handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tconst mult = (~~(args > 50) + 1) * 0.5;\n\tconst r = ((color & 1) * mult) * 255;\n\tconst g = (((color >> 1) & 1) * mult) * 255;\n\tconst b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// Handle greyscale\n\tif (args >= 232) {\n\t\tconst c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tlet rem;\n\tconst r = Math.floor(args / 36) / 5 * 255;\n\tconst g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tconst b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tconst integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tconst string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tconst match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tlet colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(char => {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tconst integer = parseInt(colorString, 16);\n\tconst r = (integer >> 16) & 0xFF;\n\tconst g = (integer >> 8) & 0xFF;\n\tconst b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst max = Math.max(Math.max(r, g), b);\n\tconst min = Math.min(Math.min(r, g), b);\n\tconst chroma = (max - min);\n\tlet grayscale;\n\tlet hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tconst s = hsl[1] / 100;\n\tconst l = hsl[2] / 100;\n\n\tconst c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));\n\n\tlet f = 0;\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tconst s = hsv[1] / 100;\n\tconst v = hsv[2] / 100;\n\n\tconst c = s * v;\n\tlet f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tconst h = hcg[0] / 360;\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tconst pure = [0, 0, 0];\n\tconst hi = (h % 1) * 6;\n\tconst v = hi % 1;\n\tconst w = 1 - v;\n\tlet mg = 0;\n\n\t/* eslint-disable max-statements-per-line */\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\t/* eslint-enable max-statements-per-line */\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tconst v = c + g * (1.0 - c);\n\tlet f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tconst l = g * (1.0 - c) + 0.5 * c;\n\tlet s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\tconst v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tconst w = hwb[1] / 100;\n\tconst b = hwb[2] / 100;\n\tconst v = 1 - b;\n\tconst c = v - w;\n\tlet g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hsv = convert.gray.hsl;\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tconst val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tconst integer = (val << 16) + (val << 8) + val;\n\n\tconst string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tconst val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n","const conversions = require('./conversions');\n\n/*\n\tThis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tconst graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tconst models = Object.keys(conversions);\n\n\tfor (let len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tconst graph = buildGraph();\n\tconst queue = [fromModel]; // Unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tconst current = queue.pop();\n\t\tconst adjacents = Object.keys(conversions[current]);\n\n\t\tfor (let len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tconst adjacent = adjacents[i];\n\t\t\tconst node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tconst path = [graph[toModel].parent, toModel];\n\tlet fn = conversions[graph[toModel].parent][toModel];\n\n\tlet cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tconst graph = deriveBFS(fromModel);\n\tconst conversion = {};\n\n\tconst models = Object.keys(graph);\n\tfor (let len = models.length, i = 0; i < len; i++) {\n\t\tconst toModel = models[i];\n\t\tconst node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// No possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$d0bdfc9e83895ac0$export$802aa3ab0f758505","$d0bdfc9e83895ac0$export$f97acfc33e365d7","$d0bdfc9e83895ac0$export$76701ce0616caa92","$d0bdfc9e83895ac0$export$9aace05d0b7af991","$d0bdfc9e83895ac0$export$8d735048c0d75c97","$d0bdfc9e83895ac0$export$df58dec3b5376b15","$d0bdfc9e83895ac0$export$1697adf3f88eb3ce","$3i35a","PIS","LEWICA","KONF","TD","KO","BIAŁY","IBRiS_20231010","ewybory_20231010","IPSOS_20231010","Pollster_CAWI_20231007","IBRiS_20231007","Estymator_20231006","Opinia24_20231004","IBRiS_20231004","Kantar_20231004","UnitedSurveys_20231002","UnitedSurveys_20231001","Estymator_20230930","IBRiS_20230927","IPSOS_20230925","UnitedSurveys_20230924","Estymator_20230923","Pollster_20230922","IBRiS_20230920","entries","forEach","sondaz","wynik","partia","procent","$d0bdfc9e83895ac0$var$sumaProcentow","values","reduce","acc","curr","length","nr","miasto","mandaty","glosy2019","wynik2019","PSL","$d0bdfc9e83895ac0$var$glosy2019Procent","map","arr","dzielnik","SLD","$d0bdfc9e83895ac0$export$e64acc17a7f4c842","$d0bdfc9e83895ac0$var$i","PodzialMandatowWOkregu","log","$9bc43309e06c2764$export$c7f05eb85d8ce4ff","$9bc43309e06c2764$export$249f49cfde10ec4a","$9bc43309e06c2764$export$78b00e1dcefd3798","$9bc43309e06c2764$export$ba59b43972503164","$9bc43309e06c2764$export$d6b31143b10bb361","$9bc43309e06c2764$export$51a1424039638d72","$9bc43309e06c2764$export$cf1782a3046d6a77","$geIQo","$cWeek","$iXaHu","$9HmlY","$8OXs6","NIEDEMO","DEMO","okreg","wynikWOkregu","odchylenieWOkregu","ROZKLAD","$9bc43309e06c2764$export$f43f50db268314fa","bladProporcji","Math","sqrt","sondazeDoSredniej","bladOdchyleniaWRegionie","mandatyWKraju","okregi","mandatyWOkregu","options","dhont","i","push","iloraz","nrMandatu","posortowanyDhont","sort","b","ostatniWzietyMandat","glosyWOkregu2019","accumulator","currentValue","podzial","slice","x","cur","d","cenaMandatu","round","filter","value","glosy","resztaUlamek","console","$9bc43309e06c2764$var$czestoscNaProcentSymulacji","ILE_SYMULACJI","toString","suma","mnożnik","procentyWOkreguSrednia","rozklad","rozkladDemo","histogram","minimumMandatow","zagrozoneMandaty","potencjalneMandaty","ostatnieMandaty","dawcyGlosow","bucketFn","num","bucket","glosyWOkreguLosoweUncapped","wynikLosowyUncapped","max","normal","glosyWOkreguLosoweCapped","procentOczekiwany","stddev","wynikLosowyCapped","min","str","sortedStringify","strDemo","String","KO_zagrozenie","TD_zagrozenie","LEWICA_zagrozenie","KO_szansa","TD_szansa","LEWICA_szansa","KO_dawca","TD_dawca","LEWICA_dawca","KO_ostatnie","TD_ostatnie","LEWICA_ostatnie","wykresRozkladu","sortObjectByValues","key","JSON","parse","wykresRozkladuDemo","$565b4f3f01e0b40a$export$f88c97427ae2a295","$dcc60992372e5fa5$export$2e2bcd8739ae039","$ftPHE","$dcc60992372e5fa5$var$_defineProperties","target","props","descriptor","writable","$dcc60992372e5fa5$var$_toPropertyKey","arg","$dcc60992372e5fa5$var$_toPrimitive","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","$dcc60992372e5fa5$var$_createClass","Constructor","protoProps","staticProps","prototype","$dcc60992372e5fa5$var$_inheritsLoose","subClass","superClass","create","constructor","$dcc60992372e5fa5$var$_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","$dcc60992372e5fa5$export$7492a095b4ff4e68","RNG","_seed","seed","_opts","strSeed","k","charCodeAt","$dcc60992372e5fa5$var$RNGFunction","_RNG","RNGFunction","thunk","opts","_this","_rng","_proto","next","clone","_","$dcc60992372e5fa5$export$e6cb7150fd4ac6e7","args","arguments","_args$","_args","arg0","apply","$dcc60992372e5fa5$var$uniform","random","$dcc60992372e5fa5$var$numberValidator","$dcc60992372e5fa5$var$NumberValidator","isInt","isInteger","isPositive","lessThan","greaterThanOrEqual","greaterThan","$dcc60992372e5fa5$var$uniformInt","floor","$dcc60992372e5fa5$var$uniformBoolean","$dcc60992372e5fa5$var$logNormal","mu","sigma","exp","$dcc60992372e5fa5$var$geometric","invLogP","$dcc60992372e5fa5$var$logFactorialTable","$dcc60992372e5fa5$var$poisson","lambda","expMean","u","smu","invAlpha","vR","abs","us","_logFactorial","f","$dcc60992372e5fa5$var$bates","irwinHall","$dcc60992372e5fa5$var$pareto","alpha","pow","$dcc60992372e5fa5$var$RNGMathRandom","RNGMathRandom","Random","rng","_patch","_cache","uniform","uniformInt","integer","bool","uniformBoolean","_memoize","y","r","logNormal","bernoulli","binomial","geometric","poisson","exponential","sum","bates","pareto","use","patch","unpatch","choice","array","Array","isArray","label","getter","join","distribution","concat","$1NWL6","$8FlDu","$1rFi6","$iDdZD","$bDA0X","$oBon1","$layLz","alea","xor128","xorwow","xorshift7","xor4096","tychei","module1","define1","Alea","me","mash","data","h","t","s0","c","s1","s2","copy","impl","xg","state","prng","int32","double","quick","amd","define","XorGen","strseed","z","w","top","bot","result","X","j","Date","limit","pool","math","nodecrypto","rngname","startdenom","significance","overflow","seedrandom","callback","shortseed","mixkey","flatten","obj","depth","prop","typ","entropy","tostring","autoseed","out","randomBytes","Uint8Array","crypto","msCrypto","getRandomValues","browser","navigator","plugins","screen","arc4","ARC4","g","S","pass","is_math_call","keylen","mask","width","count","smear","stringseed","fromCharCode","ex","$b21b317d60618aca$export$637321ccaed74326","sortedObj","keys","stringify","$b21b317d60618aca$export$8ac25fd097dcfc2","keyValueArray","$dd9e9330ab7ef6b5$export$3ef61f55ef8769bb","LEWICA_BLAD","KO_BLAD","TD_BLAD","PIS_BLAD","KONF_BLAD","$75354d900d52c58f$export$a36ee161a0d45cdf","$75354d900d52c58f$export$2c8fd381c328f0c2","$75354d900d52c58f$export$7a22f047cf18a648","$a4zWM","$h5k33","wynikWyborow","targetElement","canvas","document","createElement","getElementById","appendChild","type","labels","datasets","laczOpozycje","backgroundColor","KOLOR_PARTII","poziomo","indexAxis","scales","stacked","calySejm","afterBuildTicks","axis","ticks","includes","procentZSondazy","odchylenie","color","procenty","parseFloat","darken","fade","legend","title","display","text","font","size","tooltip","callbacks","footer","tooltipItems","tooltipItem","split","tekst","Chart","registerables","$7556296cd6b61dcf$export$2e2bcd8739ae039","$1JI8o","$143c3a913eb38704$export$acaa6426d77a227e","$143c3a913eb38704$export$e8959e79e3af550f","$iUM1U","$143c3a913eb38704$export$a424a0aa8f687495","_request","_charts","Map","_running","_lastDate","_notify","chart","anims","date","listeners","numSteps","duration","fn","initial","currentStep","start","_refresh","_update","now","remaining","item","running","items","draw","_active","_total","tick","pop","_getAnims","charts","complete","progress","listen","event","cb","add","has","_duration","stop","cancel","remove","delete","$143c3a913eb38704$var$transparent","$143c3a913eb38704$var$interpolators","boolean","from","to","factor","c0","c1","valid","mix","hexString","number","$143c3a913eb38704$export$c35d437ae5945fcd","cfg","_fn","_easing","easing","linear","_start","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","rej","resolved","method","$143c3a913eb38704$export$8ab227dac26677d","config","_chart","_properties","configure","animationOptions","animation","animatedProps","getOwnPropertyNames","option","properties","_animateOptions","newOptions","$143c3a913eb38704$var$resolveTargetOptions","$shared","assign","$animations","animations","_createAnimations","$143c3a913eb38704$var$awaitAll","anim","all","then","charAt","$143c3a913eb38704$var$scaleClip","scale","allowedOverflow","reverse","end","$143c3a913eb38704$var$getSortedDatasetIndices","filterVisible","ilen","metasets","_getSortedDatasetMetas","index","$143c3a913eb38704$var$applyStack","stack","dsIndex","datasetIndex","otherValue","singleMode","mode","$143c3a913eb38704$var$isStacked","meta","$143c3a913eb38704$var$getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","$143c3a913eb38704$var$updateStacks","controller","parsed","_cachedMeta","stacks","_stacks","iScale","iAxis","vAxis","indexScale","valueScale","itemStacks","$143c3a913eb38704$var$getOrCreateStack","stackKey","indexValue","subStack","_top","_bottom","visualValues","_visualValues","$143c3a913eb38704$var$getFirstScaleId","shift","$143c3a913eb38704$var$clearStacks","_parsed","$143c3a913eb38704$var$isDirectUpdateMode","$143c3a913eb38704$var$cloneIfNotShared","cached","shared","$143c3a913eb38704$var$createStack","canStack","hidden","_stacked","$143c3a913eb38704$export$75572ec5c55b4048","defaults","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","initialize","linkScales","addElements","fill","isPluginEnabled","warn","updateIndex","dataset","getDataset","chooseId","xid","xAxisID","yid","yAxisID","rid","rAxisID","iid","iAxisID","vid","vAxisID","xScale","getScaleForId","yScale","rScale","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","$143c3a913eb38704$var$convertObjectDataToArray","adata","isExtensible","l","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","applyStack","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","POSITIVE_INFINITY","NEGATIVE_INFINITY","otherMin","otherMax","$143c3a913eb38704$var$getUserBounds","minDefined","maxDefined","getUserBounds","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","getLabelForValue","_clip","clip","$143c3a913eb38704$var$defaultClip","right","bottom","left","disabled","elements","area","chartArea","drawActiveElementsOnTop","element","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","parent","context","dataIndex","raw","_resolveElementOptions","elementType","cache","cacheKey","sharing","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","updateElements","removed","splice","_sync","_dataChanges","_onDataPush","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","$143c3a913eb38704$var$parseValue","entry","$143c3a913eb38704$var$parseFloatBar","startValue","endValue","barStart","barEnd","_custom","$143c3a913eb38704$var$parseArrayOrPrimitive","$143c3a913eb38704$var$isFloatBar","custom","$143c3a913eb38704$var$parseEdge","edge","orig","$143c3a913eb38704$var$startEnd","$143c3a913eb38704$export$e04603e7d8b77172","animateRotate","animateScale","numbers","cutout","rotation","circumference","radius","spacing","descriptors","_scriptable","name","_indexable","startsWith","overrides","aspectRatio","generateLabels","pointStyle","style","fillStyle","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","getDataVisibility","onClick","legendItem","toggleDataVisibility","innerRadius","outerRadius","offsetX","offsetY","_getRotation","_getCircumference","_getRotationExtents","T","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","height","m","chartWeight","_getRingWeight","ratioX","ratioY","$143c3a913eb38704$var$getRatioAndOffset","endAngle","startAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","calcMin","maxX","maxY","H","minX","P","minY","maxWidth","maxHeight","maxRadius","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","isNaN","locale","borderAlign","hoverBorderWidth","offset","hoverOffset","ringWeightOffset","weight","$143c3a913eb38704$export$2a270b3a0d973c85","angleLines","beginAtZero","grid","circular","pointLabels","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","$143c3a913eb38704$export$a6506504f799c5d5","BarController","categoryPercentage","barPercentage","grouped","_index_","_value_","iAxisKey","vAxisKey","bars","base","getBasePixel","horizontal","isHorizontal","ruler","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","enableBorderRadius","center","$143c3a913eb38704$var$setBorderSkipped","borderSkipped","$143c3a913eb38704$var$setInflateAmount","inflateAmount","ratio","_getStacks","last","skipNull","val","indexOf","_getStackCount","_getStackIndex","pixels","getPixelForValue","barThickness","$143c3a913eb38704$var$computeMinSampleSize","$143c3a913eb38704$var$getAllScaleValues","$bar","visibleMetas","_length","updateMinAndPrev","getPixelForTick","_startPixel","_endPixel","stackCount","baseValue","minBarLength","actualBase","floating","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","$143c3a913eb38704$var$computeFlexCategoryTraits","percent","chunk","$143c3a913eb38704$var$computeFitCategoryTraits","thickness","stackIndex","rects","BubbleController","points","point","iPixel","vPixel","skip","DoughnutController","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","q","_datasetIndex","_decimated","segment","animated","maxGapLength","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PieController","PolarAreaController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","$143c3a913eb38704$var$abstract","$143c3a913eb38704$var$DateAdapterBase","override","members","formats","format","diff","startOf","endOf","$143c3a913eb38704$export$f32766ea09ec8bc4","_date","$143c3a913eb38704$var$evaluateInteractionItems","position","handler","intersect","getSortedVisibleDatasetMetas","lo","hi","$143c3a913eb38704$var$binarySearch","metaset","lookupMethod","_reversePixels","A","B","el","getRange","$143c3a913eb38704$var$getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","C","inRange","$143c3a913eb38704$var$getNearestItems","$143c3a913eb38704$var$getNearestCartesianItems","distanceMetric","$143c3a913eb38704$var$getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","minDistance","getCenterPoint","pointInArea","distance","getProps","D","$143c3a913eb38704$var$getAxisItems","rangeMethod","intersectsItem","$143c3a913eb38704$export$a13296960cae0384","modes","nearest","$143c3a913eb38704$var$STATIC_POSITIONS","$143c3a913eb38704$var$filterByPosition","pos","$143c3a913eb38704$var$filterDynamicPositionByAxis","box","$143c3a913eb38704$var$sortByWeight","v0","v1","$143c3a913eb38704$var$getCombinedMax","maxPadding","$143c3a913eb38704$var$updateMaxPadding","boxPadding","$143c3a913eb38704$var$fitBoxes","boxes","params","layout","refit","changed","refitBoxes","$143c3a913eb38704$var$getMargins","positions","margin","same","other","$143c3a913eb38704$var$updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","fullSize","$143c3a913eb38704$var$setBoxDims","$143c3a913eb38704$var$placeBoxes","userPadding","padding","placed","stackWeight","$143c3a913eb38704$export$1ecca0613f5e56d2","addBox","_layers","removeBox","layoutItem","minPadding","E","availableWidth","availableHeight","$143c3a913eb38704$var$buildLayoutBoxes","layoutBoxes","$143c3a913eb38704$var$wrapBoxes","wrap","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","verticalBoxes","horizontalBoxes","F","beforeLayout","visibleVerticalBoxCount","vBoxMaxWidth","hBoxMaxHeight","$143c3a913eb38704$var$setLayoutDims","layouts","$143c3a913eb38704$var$buildStacks","_stack","$143c3a913eb38704$var$handleMaxPadding","updatePos","change","$143c3a913eb38704$export$7b1aeb87f31f7da8","acquireContext","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","$143c3a913eb38704$export$a40a96b24b46cf35","$143c3a913eb38704$var$EXPANDO_KEY","$143c3a913eb38704$var$EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","$143c3a913eb38704$var$isNullOrEmpty","$143c3a913eb38704$var$eventListenerOptions","K","passive","$143c3a913eb38704$var$removeListener","$143c3a913eb38704$var$nodeListContains","nodeList","node","contains","$143c3a913eb38704$var$createAttachObserver","observer","MutationObserver","trigger","addedNodes","removedNodes","observe","childList","subtree","$143c3a913eb38704$var$createDetachObserver","$143c3a913eb38704$var$drpListeningCharts","$143c3a913eb38704$var$oldDevicePixelRatio","$143c3a913eb38704$var$onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","$143c3a913eb38704$var$createResizeObserver","container","I","L","clientWidth","ResizeObserver","contentRect","$143c3a913eb38704$var$releaseObserver","disconnect","$143c3a913eb38704$var$createProxyAndListen","proxy","$143c3a913eb38704$var$fromNativeEvent","native","$143c3a913eb38704$var$addListener","$143c3a913eb38704$export$f02da7f882cf6b2e","$143c3a913eb38704$var$initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","J","displayHeight","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","G","isConnected","$143c3a913eb38704$export$db77ccec0bb4ccac","defaultRoutes","tooltipPosition","hasValue","final","ret","$143c3a913eb38704$var$skip","newTicks","majorStart","majorEnd","ceil","$143c3a913eb38704$var$reverseAlign","align","$143c3a913eb38704$var$offsetFromEdge","$143c3a913eb38704$var$getTicksLimit","ticksLength","maxTicksLimit","$143c3a913eb38704$var$sample","numItems","increment","len","$143c3a913eb38704$var$getTickMarkLength","drawTicks","tickLength","$143c3a913eb38704$var$getTitleHeight","fallback","a0","lines","lineHeight","$143c3a913eb38704$export$d60cfc58d3c358b6","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_maxLength","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","O","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","Q","margins","grace","tickOpts","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","R","beforeBuildTicks","buildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","autoSkip","source","$143c3a913eb38704$var$autoSkip","determinedMaxTicks","$143c3a913eb38704$var$determineMaxTicks","_tickSize","maxScale","maxChart","ticksLimit","majorIndices","major","enabled","$143c3a913eb38704$var$getMajorIndices","numMajorIndices","first","$143c3a913eb38704$var$skipMajors","$143c3a913eb38704$var$calculateSpacing","evenMajorSpacing","$143c3a913eb38704$var$getEvenSpacing","factors","N","avgMajorSpacing","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","tickWidth","maxLabelDiagonal","numTicks","minRotation","maxRotation","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","U","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","jlen","tickFont","fontString","nestedLabel","caches","widths","heights","widestLabelSize","highestLabelSize","_resolveTickFontOptions","string","gc","V","gcLen","valueAt","idx","pixel","decimal","W","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","borderValue","lineValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","positionAxisID","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","$143c3a913eb38704$var$getPixelForGridLine","offsetGridLines","validIndex","textAlign","lineCount","textOffset","crossAlign","tickAndPadding","hTickAndPadding","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","backdrop","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","Y","renderTextOptions","Z","$","drawTitle","titleX","titleY","$143c3a913eb38704$var$titleArgs","a2","a1","tz","gz","bz","axisID","_maxDigits","fontSize","$143c3a913eb38704$var$TypedRegistry","scope","isForType","isPrototypeOf","parentScope","proto","getPrototypeOf","$143c3a913eb38704$var$registerDefaults","itemDefaults","a4","$143c3a913eb38704$var$routeDefaults","routes","property","propertyParts","sourceName","sourceScope","parts","targetName","targetScope","route","describe","unregister","a3","$143c3a913eb38704$export$4bb7493d241fd8a5","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","a5","$143c3a913eb38704$var$PluginService","_init","notify","hook","_createDescriptors","_descriptors","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","$143c3a913eb38704$var$allPlugins","localIds","local","$143c3a913eb38704$var$createDescriptors","$143c3a913eb38704$var$pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","previousDescriptors","some","$143c3a913eb38704$var$getIndexAxis","datasetDefaults","datasetOptions","$143c3a913eb38704$var$idMatchesAxis","$143c3a913eb38704$var$determineAxis","scaleOptions","toLowerCase","$143c3a913eb38704$var$getAxisFromDataset","$143c3a913eb38704$var$initOptions","$143c3a913eb38704$var$mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","$143c3a913eb38704$var$retrieveAxisFromDatasets","boundDs","defaultId","defaultScaleOptions","ab","defaultID","$143c3a913eb38704$var$initData","$143c3a913eb38704$var$keyCache","$143c3a913eb38704$var$keysCached","Set","$143c3a913eb38704$var$cachedKeys","generate","$143c3a913eb38704$var$addIfFound","$143c3a913eb38704$var$Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","a6","chartOptionScopes","resolver","subPrefixes","$143c3a913eb38704$var$getResolver","$143c3a913eb38704$var$needContext","isScriptable","isIndexable","aa","a7","$143c3a913eb38704$var$hasFunction","subResolver","a8","descriptorDefaults","resolverCache","a9","$143c3a913eb38704$var$KNOWN_POSITIONS","$143c3a913eb38704$var$positionIsHorizontal","$143c3a913eb38704$var$compare2Level","l1","l2","$143c3a913eb38704$var$onAnimationsComplete","onComplete","$143c3a913eb38704$var$onAnimationProgress","onProgress","$143c3a913eb38704$var$getCanvas","M","$143c3a913eb38704$var$instances","$143c3a913eb38704$var$getChart","$143c3a913eb38704$var$getSizeForArea","field","instances","version","getChart","$143c3a913eb38704$var$invalidatePlugins","userConfig","initialCanvas","existingChart","OffscreenCanvas","ac","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","ad","resizeDelay","_initialize","maintainAspectRatio","responsive","ae","bindEvents","af","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","ag","unbindEvents","changes","_getUniformDataChanges","$143c3a913eb38704$var$moveNumericKeys","intKey","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","$143c3a913eb38704$var$getDatasetArea","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","detached","_remove","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","ah","pluginId","replay","hoverOptions","hover","deactivated","activated","inChartArea","eventFilter","_handleEvent","lastEvent","_getActiveElements","isClick","ai","onHover","$143c3a913eb38704$var$rThetaToXY","theta","$143c3a913eb38704$var$pathArc","pixelMargin","innerR","spacingOffset","noSpacingOuterRadius","avNogSpacingRadius","noSpacingInnerRadius","beta","angleOffset","outerStart","outerEnd","innerStart","innerEnd","$143c3a913eb38704$var$parseBorderRadius$1","angleDelta","borderRadius","ak","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","PI","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","closePath","$143c3a913eb38704$var$setStyle","lineCap","borderCapStyle","lineJoin","borderJoinStyle","$143c3a913eb38704$var$lineTo","previous","$143c3a913eb38704$var$pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","$143c3a913eb38704$var$pathSegment","lineMethod","stepped","ar","tension","cubicInterpolationMode","as","$143c3a913eb38704$var$fastPathSegment","prevX","lastY","avgX","countX","pointIndex","drawX","truncX","$143c3a913eb38704$var$_getSegmentMethod","useFastPath","$143c3a913eb38704$var$usePath2D","Path2D","$143c3a913eb38704$export$55e463fa7bcd3469","capBezierPoints","_path","_points","_segments","_pointsUpdated","al","segments","am","interpolate","an","_interpolate","ao","ap","aq","interpolated","pathSegment","segmentMethod","path","$143c3a913eb38704$var$draw","$143c3a913eb38704$var$strokePathWithCache","$143c3a913eb38704$var$strokePathDirect","$143c3a913eb38704$var$inRange$1","hitRadius","$143c3a913eb38704$var$getBarBounds","bar","half","$143c3a913eb38704$var$skipOrLimit","$143c3a913eb38704$var$inRange","skipX","skipY","bounds","aj","$143c3a913eb38704$var$addNormalRectPath","rect","$143c3a913eb38704$var$inflateRect","amount","refRect","$143c3a913eb38704$export$7a5d735b2ab6389d","ArcElement","fullCircles","chartX","chartY","rAdjust","betweenAngles","withinRadius","halfAngle","halfRadius","translate","fix","radiusOffset","$143c3a913eb38704$var$drawArc","$143c3a913eb38704$var$drawBorder","inner","$143c3a913eb38704$var$clipArc","angleMargin","BarElement","outer","$143c3a913eb38704$var$boundingRects","$143c3a913eb38704$var$parseBorderWidth","maxW","maxH","av","$143c3a913eb38704$var$parseBorderRadius","aw","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","addRectPath","$143c3a913eb38704$var$hasRadius","au","mouseX","mouseY","inXRange","inYRange","LineElement","PointElement","hoverRadius","at","$143c3a913eb38704$var$BORDER_COLORS","$143c3a913eb38704$var$BACKGROUND_COLORS","replace","$143c3a913eb38704$var$getBorderColor","$143c3a913eb38704$var$getBackgroundColor","$143c3a913eb38704$var$containsColorsDefinitions","$143c3a913eb38704$var$cleanDecimatedDataset","$143c3a913eb38704$var$cleanDecimatedData","$143c3a913eb38704$var$_getBounds","ay","$143c3a913eb38704$var$_findSegmentEnd","$143c3a913eb38704$var$_getEdge","$143c3a913eb38704$var$_createBoundaryLine","boundary","$143c3a913eb38704$var$_pointsFromSegments","linePoints","$143c3a913eb38704$var$_shouldApplyFill","$143c3a913eb38704$var$simpleArc","$143c3a913eb38704$var$_drawfill","$143c3a913eb38704$var$_getTarget","$143c3a913eb38704$var$getLineByIndex","$143c3a913eb38704$var$_buildStackLine","sourcePoints","linesBelow","$143c3a913eb38704$var$getLinesBelow","below","unshift","$143c3a913eb38704$var$addPointsBelow","sourcePoint","postponed","$143c3a913eb38704$var$findPoint","pointValue","firstValue","lastValue","$143c3a913eb38704$var$computeBoundary","$143c3a913eb38704$var$computeCircularBoundary","$143c3a913eb38704$var$computeLinearBoundary","lineOpts","fillOption","above","$143c3a913eb38704$var$doFill","$143c3a913eb38704$var$clipVertical","$143c3a913eb38704$var$fill","clipY","lineLoop","$143c3a913eb38704$var$_segments","tpoints","targetSegments","tgt","subBounds","fillSources","ax","fillSource","src","notShape","$143c3a913eb38704$var$clipBounds","$143c3a913eb38704$var$interpolatedLineTo","targetLoop","interpolatedPoint","$143c3a913eb38704$var$getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","$143c3a913eb38704$var$itemsEqual","$143c3a913eb38704$var$Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","$143c3a913eb38704$var$calculateItemSize","fontLineHeight","legendItemText","$143c3a913eb38704$var$calculateLegendItemHeight","adjustHitBoxes","rtl","rtlHelper","az","hitbox","leftForLtr","_draw","cursor","defaultColor","halfFontSize","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","aD","yBoxTop","xBoxLeft","fillText","strikethrough","aA","textDirection","textWidth","setWidth","realX","aB","aC","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","onLeave","hoveredItem","sameItem","$143c3a913eb38704$var$Title","_padding","textSize","_drawArgs","fontOpts","$143c3a913eb38704$var$map","WeakMap","$143c3a913eb38704$var$positioners","average","eventPosition","nearestElement","aE","tp","$143c3a913eb38704$var$pushOrConcat","toPush","$143c3a913eb38704$var$splitNewlines","$143c3a913eb38704$var$getTooltipSize","body","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","$143c3a913eb38704$var$determineAlignment","yAlign","$143c3a913eb38704$var$determineYAlign","xAlign","$143c3a913eb38704$var$determineXAlign","chartWidth","$143c3a913eb38704$var$doesNotFitWithAlign","caret","caretSize","caretPadding","$143c3a913eb38704$var$getBackgroundPoint","alignment","cornerRadius","paddingAndSize","$143c3a913eb38704$var$alignX","$143c3a913eb38704$var$alignY","$143c3a913eb38704$var$getAlignedX","$143c3a913eb38704$var$overrideCallbacks","$143c3a913eb38704$var$defaultCallbacks","beforeTitle","aF","labelCount","afterTitle","beforeLabel","formattedValue","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","$143c3a913eb38704$var$invokeCallbackWithFallback","$143c3a913eb38704$var$Tooltip","positioners","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","$143c3a913eb38704$var$createTooltipItem","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleAlign","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","textColor","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","$143c3a913eb38704$export$8b3ca321c77fdea6","Colors","forceOverride","chartOptions","colorizer","Decimation","algorithm","beforeElementsUpdate","decimated","xAxis","$143c3a913eb38704$var$getStartAndCountOfVisiblePointsSimplified","pointCount","threshold","$143c3a913eb38704$var$lttbDecimation","maxAreaPoint","maxArea","nextA","samples","bucketWidth","sampledIndex","endIndex","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","$143c3a913eb38704$var$minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","Filler","afterDatasetsUpdate","sources","$143c3a913eb38704$var$_decodeFill","firstCh","$143c3a913eb38704$var$parseFillOption","$filler","$143c3a913eb38704$var$_resolveTarget","propagate","visited","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","Legend","_element","afterEvent","ci","useBorderRadius","SubTitle","Title","$143c3a913eb38704$var$createTitle","titleBlock","Tooltip","afterInit","afterDraw","_fallback","$143c3a913eb38704$var$addIfString","addedLabels","$143c3a913eb38704$var$validIndex","$143c3a913eb38704$var$_getLabelForValue","$143c3a913eb38704$var$relativeLabelSize","minSpacing","rad","$143c3a913eb38704$var$LinearScaleBase","_startValue","_endValue","_valueRange","isFinite","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","maxTicks","stepSize","computeTickLimit","numericGeneratorOptions","precision","maxDigits","includeBounds","dataRange","$143c3a913eb38704$var$generateTicks$1","generationOptions","niceMin","niceMax","numSpaces","unit","maxSpaces","rmin","rmax","countDefined","aH","aI","aJ","decimalPlaces","aK","tickValue","aG","$143c3a913eb38704$export$e7f4e5e8656f0b93","aL","formatters","numeric","$143c3a913eb38704$var$log10Floor","aM","$143c3a913eb38704$var$changeExponent","$143c3a913eb38704$var$isMajor","tickVal","$143c3a913eb38704$var$steps","rangeExp","rangeStep","$143c3a913eb38704$export$85295eaf7cb3ac3e","logarithmic","_zero","$143c3a913eb38704$var$generateTicks","minExp","$143c3a913eb38704$var$startExp","significand","lastTick","$143c3a913eb38704$var$getTickBackdropHeight","$143c3a913eb38704$var$determineLimits","$143c3a913eb38704$var$pathRadiusLine","getPointPosition","$143c3a913eb38704$export$cfafc36d95386d38","animate","centerPointLabels","drawingArea","_pointLabels","_pointLabelItems","$143c3a913eb38704$var$fitWithPointLabels","limits","valueCount","pointLabelOpts","additionalAngle","getPointLabelContext","plFont","aN","hLimits","vLimits","$143c3a913eb38704$var$updateLimits","setCenterPoint","$143c3a913eb38704$var$buildPointLabelItems","itemOpts","extra","$143c3a913eb38704$var$createPointLabelItem","outerDistance","pointLabelPosition","$143c3a913eb38704$var$isNotOverlapped","apexesInArea","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","$143c3a913eb38704$var$drawPointLabels","$143c3a913eb38704$var$drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","$143c3a913eb38704$var$drawRadiusLine","gridLineOpts","rotate","$143c3a913eb38704$var$INTERVALS","millisecond","common","steps","second","minute","hour","day","week","month","quarter","year","$143c3a913eb38704$var$UNITS","$143c3a913eb38704$var$sorter","$143c3a913eb38704$var$parse","adapter","_adapter","parser","isoWeekday","_parseOpts","$143c3a913eb38704$var$determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","$143c3a913eb38704$var$addTick","time","timestamps","aP","timestamp","$143c3a913eb38704$var$ticksFromTimestamps","majorUnit","$143c3a913eb38704$var$setMajorTicks","$143c3a913eb38704$export$a894c72689ff3ec","adapters","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","aO","_getLabelCapacity","$143c3a913eb38704$var$determineUnitForFormatting","$143c3a913eb38704$var$determineMajorUnit","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","$143c3a913eb38704$var$interpolate","table","prevSource","nextSource","prevTarget","nextTarget","span","$143c3a913eb38704$export$85df64a8eb6dc986","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","$143c3a913eb38704$export$bcac1c16f1530ec2","CategoryScale","_addedLabels","added","$143c3a913eb38704$var$findOrAddLabel","lastIndexOf","LinearScale","LogarithmicScale","RadialLinearScale","TimeScale","TimeSeriesScale","$dc52b6b1090eba81$export$cf2f7c5792f80b46","$dc52b6b1090eba81$export$2219238a014317b0","$dc52b6b1090eba81$export$342063e11d6c3cad","$dc52b6b1090eba81$export$8b22cf2602fb60ce","$dc52b6b1090eba81$export$23f2a1d2818174ef","$dc52b6b1090eba81$export$39b482c5e57630a8","$dc52b6b1090eba81$export$c4ce752e73470fba","$dc52b6b1090eba81$export$90a7f3efeed30595","$dc52b6b1090eba81$export$953cecd6e717a553","$dc52b6b1090eba81$export$7ccc53e8f1e7dfc5","$dc52b6b1090eba81$export$3722cfe417b6ed86","$dc52b6b1090eba81$export$d66501df72047452","$dc52b6b1090eba81$export$995eb9fca571757","$dc52b6b1090eba81$export$efca4cbe5dd06740","$dc52b6b1090eba81$export$555508cbc6add439","$dc52b6b1090eba81$export$2d1720544b23b823","$dc52b6b1090eba81$export$a8550f7dbe79f93a","$dc52b6b1090eba81$export$dda1d9f60106f0e9","$dc52b6b1090eba81$export$a93c5207d687da10","$dc52b6b1090eba81$export$ee7c8ad385a60b7b","$dc52b6b1090eba81$export$f38c853ae54ed474","$dc52b6b1090eba81$export$56c0d5a1e737357d","$dc52b6b1090eba81$export$971d5caa766a69d7","$dc52b6b1090eba81$export$7f8ddf7c7c20b3cd","$dc52b6b1090eba81$export$9f4f30ee63539e24","$dc52b6b1090eba81$export$2408f22a0fab9ae5","$dc52b6b1090eba81$export$a05254e7c3aeba6e","$dc52b6b1090eba81$export$a33b77bbdbb8366c","$dc52b6b1090eba81$export$a07804094c3ecf2d","$dc52b6b1090eba81$export$d141bba7fdc215a3","$dc52b6b1090eba81$export$b9a6b53f9be3734","$dc52b6b1090eba81$export$53a70dd1ebbae346","$dc52b6b1090eba81$export$625550452a3fa3ec","$dc52b6b1090eba81$export$3a6d5c9ae78a2c08","$dc52b6b1090eba81$export$23ebac1979863676","$dc52b6b1090eba81$export$96f57966bedc81b4","$dc52b6b1090eba81$export$158acd800e1ef08b","$dc52b6b1090eba81$export$28f7fcd39efa255","$dc52b6b1090eba81$export$ffb5f4729a158638","$dc52b6b1090eba81$export$25ce5a424b770e84","$dc52b6b1090eba81$export$71cec2538cb2c617","$dc52b6b1090eba81$export$3b513254972cfc9c","$dc52b6b1090eba81$export$2ed0fc6709e59212","$dc52b6b1090eba81$export$ef35774e6d314e91","$dc52b6b1090eba81$export$ebd11618f299a286","$dc52b6b1090eba81$export$c03999cb2f36933f","$dc52b6b1090eba81$export$882b5998b3b9117c","$dc52b6b1090eba81$export$3b14a55fb2447963","$dc52b6b1090eba81$export$71511d61b312f219","$dc52b6b1090eba81$export$43caf9889c228507","$dc52b6b1090eba81$export$61196ced6d74a310","$dc52b6b1090eba81$export$4c3d22f3d993c33f","$dc52b6b1090eba81$export$3c2fa207a37baaea","$dc52b6b1090eba81$export$ce26c07117d59d6a","$dc52b6b1090eba81$export$9d398bebfec1c039","$dc52b6b1090eba81$export$9e5f44173e64f162","$dc52b6b1090eba81$export$efccba1c4a2ef57b","$dc52b6b1090eba81$export$f1e1789686576879","$dc52b6b1090eba81$export$db3b6bfb95261072","$dc52b6b1090eba81$export$ae1af26003f05816","$dc52b6b1090eba81$export$91477dc880baac21","$dc52b6b1090eba81$export$6559d589eb85fbb6","$dc52b6b1090eba81$export$2e2af4578d910ddf","$dc52b6b1090eba81$export$4368d992c4eafac0","$dc52b6b1090eba81$export$e7c866399fa523f5","$dc52b6b1090eba81$export$faec65b429be379","$dc52b6b1090eba81$export$78acf4525d8a74c4","$dc52b6b1090eba81$export$c9170ad7d4cd7e57","$dc52b6b1090eba81$export$493d36ec626b6698","$dc52b6b1090eba81$export$24baa2b76016ce0e","$dc52b6b1090eba81$export$e7094788287c5e9b","$dc52b6b1090eba81$export$8743009a87fcb00f","$dc52b6b1090eba81$export$3d8c2f653ac9d0b9","$dc52b6b1090eba81$export$d24c54395ce0c509","$dc52b6b1090eba81$export$6554612db691658e","$dc52b6b1090eba81$export$dc98b0b04f4c7758","$dc52b6b1090eba81$export$1fbe638ecf81657e","$dc52b6b1090eba81$export$21579262ef46735b","$dc52b6b1090eba81$export$d66dc83d8cfc8dd","$dc52b6b1090eba81$export$92108d983e8ee699","$dc52b6b1090eba81$export$a9c23c6ac3fc3eca","$dc52b6b1090eba81$export$34aec0b863436764","$dc52b6b1090eba81$export$407448d2b89b1813","$dc52b6b1090eba81$export$db202ddc8be9136","$dc52b6b1090eba81$export$35e795649ee09318","$dc52b6b1090eba81$export$a9c996f45e5784d0","$dc52b6b1090eba81$export$c3950d9923825c02","subProxy","_context","_subProxy","$dc52b6b1090eba81$export$7910e0436ed8d1de","Proxy","deleteProperty","receiver","$dc52b6b1090eba81$var$_cached","$dc52b6b1090eba81$var$_resolveWithContext","$dc52b6b1090eba81$var$_resolveScriptable","getValue","$dc52b6b1090eba81$var$needsSubResolver","$dc52b6b1090eba81$var$createSubResolver","_scopes","$dc52b6b1090eba81$var$_resolveArray","getOwnPropertyDescriptor","Reflect","ownKeys","$dc52b6b1090eba81$export$4a5767248b18ef41","$dc52b6b1090eba81$export$ab83b03e4111b1d0","$dc52b6b1090eba81$export$3a1a48c8f6ef640e","$dc52b6b1090eba81$export$9bb611d729802a56","$dc52b6b1090eba81$export$df995fae86a55f06","$dc52b6b1090eba81$export$2329c99376c9d0a4","$dc52b6b1090eba81$export$f787f51d84a910ad","$dc52b6b1090eba81$export$3466f893ebf79586","$dc52b6b1090eba81$export$b4171a6734a65d42","$dc52b6b1090eba81$export$8a5498727ef6be21","$dc52b6b1090eba81$export$7a38258bbe170828","$dc52b6b1090eba81$export$2f6ca3d3b1f80bf5","$dc52b6b1090eba81$export$3d12bd131bb975d1","$dc52b6b1090eba81$export$91c6e00c14e7e6fd","$dc52b6b1090eba81$export$890c4ad488842ce7","$dc52b6b1090eba81$export$9fa96a7d116ea3ce","$dc52b6b1090eba81$export$306ddfe3a8403e2","$dc52b6b1090eba81$export$1a82df3d29112e01","$fLie1","defaultValue","dimension","endsWith","thisArg","loopable","$dc52b6b1090eba81$export$d377dcb2b61d6c4e","klen","$dc52b6b1090eba81$var$isValidKey","$dc52b6b1090eba81$export$667d3bf0c5f83305","tval","sval","current","merger","$dc52b6b1090eba81$export$317a3d46287192d8","hasOwnProperty","$dc52b6b1090eba81$var$keyResolvers","$dc52b6b1090eba81$var$_getKeyResolver","$dc52b6b1090eba81$export$9d0e2d13d04f7070","tmp","part","toUpperCase","$dc52b6b1090eba81$export$d29e374196577086","$dc52b6b1090eba81$export$2ec5befb9e6c97d4","$dc52b6b1090eba81$export$53c86fa97d611818","$dc52b6b1090eba81$export$39c1cc7c062529d4","$dc52b6b1090eba81$export$7a0bdf7d4a91ea88","log10","sign","epsilon","roundedRange","niceRange","fraction","niceFraction","rounded","degrees","radians","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","atan2","$dc52b6b1090eba81$export$c18d01048907ea92","sameAngleIsFullCircle","angleToStart","angleToEnd","startToAngle","endToAngle","cmp","mid","ti","$dc52b6b1090eba81$var$arrayEvents","_chartjs","object","stub","requestAnimationFrame","argsToUse","ticking","timeout","clearTimeout","setTimeout","_scaleRanges","newRanges","xmin","xmax","ymin","ymax","$dc52b6b1090eba81$var$atEdge","$dc52b6b1090eba81$var$elasticIn","$dc52b6b1090eba81$var$elasticOut","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","$dc52b6b1090eba81$export$f96d196f7728bb5","Color","$dc52b6b1090eba81$export$738ab4df8bf92ae9","saturate","$dc52b6b1090eba81$var$numbers","$dc52b6b1090eba81$var$colors","$dc52b6b1090eba81$var$intlCache","$dc52b6b1090eba81$var$getNumberFormat","Intl","NumberFormat","$dc52b6b1090eba81$var$formatters","notation","delta","maxTick","logDelta","numDecimal","minimumFractionDigits","maximumFractionDigits","$dc52b6b1090eba81$var$getScope$1","$dc52b6b1090eba81$var$set","root","_appliers","family","hoverBackgroundColor","hoverBorderColor","hoverColor","scopeObject","targetScopeObject","privateName","defineProperties","appliers","colors","longest","arrayOfThings","thing","nestedThing","garbageCollect","halfWidth","resetTransform","clearRect","xOffset","yOffset","xOffsetW","yOffsetW","drawImage","ellipse","SQRT1_2","flip","midpoint","bezierCurveTo","cp1x","cp2x","cp1y","cp2y","$dc52b6b1090eba81$var$drawBackdrop","oldColor","strokeText","$dc52b6b1090eba81$var$decorateText","underline","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","yDecoration","decorationWidth","$dc52b6b1090eba81$var$LINE_HEIGHT","$dc52b6b1090eba81$var$FONT_STYLE","$dc52b6b1090eba81$var$numberOrZero","objProps","read","parseInt","match","$dc52b6b1090eba81$export$8c78c7c36408ea29","matches","inputs","info","cacheable","minmax","keepZero","parentContext","rootScopes","getTarget","finalRootScopes","$dc52b6b1090eba81$var$_resolve","toStringTag","_rootScopes","_getTarget","_keys","$dc52b6b1090eba81$var$_resolveWithPrefixes","$dc52b6b1090eba81$var$readKey","$dc52b6b1090eba81$var$getKeysFromAllScopes","storage","_storage","_allKeys","resolve","$dc52b6b1090eba81$var$getScope","parentScopes","allScopes","$dc52b6b1090eba81$var$addScopesFromKey","$dc52b6b1090eba81$var$subGetTarget","$dc52b6b1090eba81$var$addScopes","parentFallback","$dc52b6b1090eba81$var$resolveKeysFromAllScopes","$dc52b6b1090eba81$var$EPSILON","EPSILON","$dc52b6b1090eba81$var$getPoint","$dc52b6b1090eba81$var$getValueAxis","$dc52b6b1090eba81$var$capControlPoint","controlPoints","$dc52b6b1090eba81$export$527e9aa3390079e9","pointBefore","pointCurrent","valueAxis","pointsLen","deltaK","mK","pointAfter","slopeDelta","$dc52b6b1090eba81$var$monotoneAdjust","alphaK","betaK","tauK","squaredMagnitude","$dc52b6b1090eba81$var$monotoneCompute","$dc52b6b1090eba81$export$e171bab687b50e0","middlePoint","afterPoint","d01","d12","s01","s12","fa","fb","$dc52b6b1090eba81$var$capBezierPoints","inArea","inAreaPrev","inAreaNext","domNode","parentNode","host","$dc52b6b1090eba81$var$parseMaxStyle","styleValue","parentProperty","valueInPixels","$dc52b6b1090eba81$var$getComputedStyle","ownerDocument","defaultView","getComputedStyle","$dc52b6b1090eba81$var$positions","$dc52b6b1090eba81$var$getPositionedStyle","styles","suffix","$dc52b6b1090eba81$var$useOffsetPos","shadowRoot","borderBox","paddings","borders","$dc52b6b1090eba81$var$getCanvasPosition","touches","getBoundingClientRect","clientX","clientY","$dc52b6b1090eba81$var$round1","bbWidth","bbHeight","containerSize","$dc52b6b1090eba81$var$getContainerSize","containerStyle","containerBorder","containerPadding","clientHeight","maintainHeight","forceRatio","forceStyle","pixelRatio","deviceHeight","deviceWidth","setTransform","passiveSupported","getPropertyValue","cp1","cp2","rectX","_itemWidth","direction","original","getPropertyPriority","setProperty","prevTextDirection","$dc52b6b1090eba81$var$propertyFn","between","compare","$dc52b6b1090eba81$var$normalizeSegment","prevValue","startBound","endBound","$dc52b6b1090eba81$var$getSegment","inside","subStart","startIsBefore","endIsBefore","shouldStart","shouldStop","sub","segmentOptions","$dc52b6b1090eba81$var$findStartAndEnd","$dc52b6b1090eba81$var$splitByStyles","completeLoop","$dc52b6b1090eba81$var$solidSegments","$dc52b6b1090eba81$var$doSplitByStyles","chartContext","baseStyle","$dc52b6b1090eba81$var$readStyle","prevStyle","addStyle","st","dir","$dc52b6b1090eba81$var$styleChanged","replacer","p0","p0DataIndex","p1DataIndex","$b79961ef84658051$var$names","$b79961ef84658051$export$2077e0241d6afd3c","$b79961ef84658051$export$892596cec99bc70e","$b79961ef84658051$export$837ba5c449269406","$b79961ef84658051$export$bcc6e673dfa14d36","$b79961ef84658051$export$ed9bd8dcaeba14f6","$b79961ef84658051$export$dbf961a8d278dbef","$b79961ef84658051$export$aa35ef1f24408ab9","$b79961ef84658051$var$map$1","$b79961ef84658051$var$hex","$b79961ef84658051$var$h1","$b79961ef84658051$var$h2","$b79961ef84658051$var$eq","$b79961ef84658051$var$isShort","$b79961ef84658051$var$alpha","$b79961ef84658051$var$HUE_RE","$b79961ef84658051$var$hsl2rgbn","$b79961ef84658051$var$hsv2rgbn","$b79961ef84658051$var$hwb2rgbn","rgb","$b79961ef84658051$export$b5ba70b240f8f7f","$b79961ef84658051$var$calln","$b79961ef84658051$var$hue","$b79961ef84658051$var$map","$b79961ef84658051$var$names$1","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","Xe","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Yd","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","Qe","viTet","JHt","wEte","wEtesmoke","Lw","LwgYF","$b79961ef84658051$var$RGB_RE","$b79961ef84658051$var$to","$b79961ef84658051$var$from","$b79961ef84658051$var$modHSL","$b79961ef84658051$var$clone","$b79961ef84658051$var$fromObject","$b79961ef84658051$export$625a38b961e8b5e9","$b79961ef84658051$export$b2f06b640faad956","$b79961ef84658051$var$unpack","ok","nk","unpacked","tkeys","transparent","$b79961ef84658051$export$91aedb20f296e541","exec","$b79961ef84658051$export$5e91288c399be4f9","_rgb","_valid","rgbString","hslString","$b79961ef84658051$export$a197af1c58e6260c","w2","c2","w1","$b79961ef84658051$var$interpolate","rgb1","rgb2","clearer","greyscale","opaquer","negate","lighten","desaturate","deg","$b5NLL","$3JNfW","$c7027472f2342e55$var$skippedModels","$c7027472f2342e55$var$hashedModelKeys","model","$c7027472f2342e55$var$limiters","$c7027472f2342e55$var$Color","channels","valpha","newArray","$c7027472f2342e55$var$zeroArray","hashedKeys","toJSON","places","percentString","unitArray","unitObject","toFixed","red","$c7027472f2342e55$var$getset","$c7027472f2342e55$var$maxfn","green","blue","hue","saturationl","lightness","saturationv","chroma","gray","white","wblack","magenta","yellow","keyword","hex","hexa","rgbArray","alphaHex","rgbNumber","luminosity","lum","chan","contrast","color2","lum1","lum2","level","contrastRatio","isDark","yiq","isLight","hsl","whiten","hwb","blacken","grayscale","mixinColor","color1","channel","modifier","$iXgRS","$fiNA2","$8136c47c546fcb63$var$hasOwnProperty","$8136c47c546fcb63$var$reverseNames","$8136c47c546fcb63$var$name","$8136c47c546fcb63$var$cs","$8136c47c546fcb63$var$clamp","$8136c47c546fcb63$var$hexDouble","substring","hexAlpha","i2","rgba","hsla","hwba","$eRiD0","$b23eff0c3c350e64$var$concat","$b23eff0c3c350e64$var$slice","$b23eff0c3c350e64$var$swizzle","results","Function","$34eeA","$lIrBP","$2b8bc8511c5c8bbe$var$convert","$2b8bc8511c5c8bbe$var$models","fromModel","routeModels","toModel","$2b8bc8511c5c8bbe$var$wrapRounded","wrappedFn","conversion","$2b8bc8511c5c8bbe$var$wrapRaw","$23bcc96f08b27157$var$reverseKeywords","$23bcc96f08b27157$var$convert","hsv","cmyk","xyz","lab","lch","ansi16","ansi256","hcg","apple","rdif","gdif","bdif","diffc","currentClosestKeyword","reversed","currentClosestDistance","t2","t3","t1","smin","lmin","sv","sl","vmin","wh","bl","z2","hr","saturation","ansi","mult","rem","colorString","char","pure","mg","graph","$fcf31fa4f4290ffc$var$deriveBFS","$fcf31fa4f4290ffc$var$buildGraph","models","queue","adjacents","adjacent","$fcf31fa4f4290ffc$var$wrapConversion","$fcf31fa4f4290ffc$var$link","numberValidator","NumberValidator","logFactorialTable","logFactorial","logSqrt2PI","RNGFactory","Animator","requestAnimFrame","interpolators","helpersColor","Animation","effects","Animations","isObject","resolveTargetOptions","awaitAll","animator","scaleClip","defaultClip","toClip","getSortedDatasetIndices","convertObjectDataToArray","isStacked","getStackKey","getOrCreateStack","getLastIndexInStack","updateStacks","getFirstScaleId","createDatasetContext","createContext","createDataContext","clearStacks","isDirectUpdateMode","cloneIfNotShared","createStack","DatasetController","valueOrDefault","unlistenArrayEvents","listenArrayEvents","resolveObjectKey","defined","getAllScaleValues","_arrayUnique","computeMinSampleSize","computeFitCategoryTraits","isNullOrUndef","computeFlexCategoryTraits","parseFloatBar","parseValue","parseArrayOrPrimitive","isFloatBar","barSign","borderProps","setBorderSkipped","parseEdge","swap","startEnd","v2","setInflateAmount","getRatioAndOffset","TAU","_angleBetween","HALF_PI","toRadians","toPercentage","toDimension","formatNumber","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","isNumber","_parseObjectDataRadialScale","abstract","DateAdapterBase","binarySearch","_rlookupByKey","_lookupByKey","evaluateInteractionItems","getDistanceMetricForAxis","getIntersectItems","evaluationFunc","_isPointInArea","getNearestRadialItems","getAngleFromPoint","getNearestCartesianItems","getNearestItems","getAxisItems","getRelativePosition","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","sortByWeight","wrapBoxes","buildStacks","setLayoutDims","buildLayoutBoxes","getCombinedMax","updateMaxPadding","updateDims","handleMaxPadding","getMargins","marginForPositions","fitBoxes","setBoxDims","placeBoxes","toPadding","each","BasePlatform","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","isNullOrEmpty","initCanvas","readUsedSize","eventListenerOptions","supportsEventListenerOptions","addListener","removeListener","fromNativeEvent","nodeListContains","createAttachObserver","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","_getParentNode","throttled","releaseObserver","createProxyAndListen","DomPlatform","_detectPlatform","_isDomSupported","Element","determineMaxTicks","getMajorIndices","skipMajors","calculateSpacing","getEvenSpacing","_factorize","reverseAlign","offsetFromEdge","getTicksLimit","sample","getPixelForGridLine","getTickMarkLength","getTitleHeight","toFont","createScaleContext","createTickContext","_toLeftRightCenter","titleArgs","_alignStartEnd","Scale","finiteOrDefault","_addGrace","_limitValue","toDegrees","_measureText","_int16Range","_alignPixel","clipArea","renderText","unclipArea","TypedRegistry","isIChartComponent","registerDefaults","merge","routeDefaults","Registry","_capitalize","PluginService","callCallback","allPlugins","createDescriptors","getOpts","pluginOpts","getIndexAxis","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","getAxisFromDataset","retrieveAxisFromDatasets","mergeScaleConfig","mergeIf","initOptions","initData","initConfig","keyCache","keysCached","cachedKeys","addIfFound","Config","getResolver","needContext","isFunction","_attachContext","_createResolver","hasFunction","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","onAnimationsComplete","onAnimationProgress","getCanvas","moveNumericKeys","determineLastEvent","getSizeForArea","getDatasetArea","invalidatePlugins","uid","debounce","retinaScale","clearCanvas","setsEqual","Interaction","_elementsEqual","_isClickEvent","clipArc","toRadiusCorners","_readValueToProps","parseBorderRadius","rThetaToXY","pathArc","adjustedAngle","drawArc","_isBetween","setStyle","getLineMethod","_steppedLineTo","_bezierCurveTo","pathVars","outside","fastPathSegment","_getSegmentMethod","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","strokePathDirect","usePath2D","_updateBezierControlPoints","_computeSegments","_boundSegments","drawPoint","getBarBounds","skipOrLimit","parseBorderWidth","toTRBL","toTRBLCorners","boundingRects","skipBoth","hasRadius","addNormalRectPath","inflateRect","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","containsColorsDefinition","lttbDecimation","minMaxDecimation","cleanDecimatedDataset","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","_findSegmentEnd","_getBounds","_boundSegment","_getEdge","_normalizeAngle","_pointsFromSegments","_createBoundaryLine","_shouldApplyFill","_resolveTarget","_decodeFill","parseFillOption","decodeTargetIndex","_getTargetPixel","_getTargetValue","_buildStackLine","getLinesBelow","addPointsBelow","findPoint","simpleArc","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","doFill","clipVertical","clipBounds","interpolatedLineTo","getBoxSize","itemsEqual","calculateItemSize","getRtlAdapter","drawPointLegend","overrideTextDirection","_textX","calculateLegendItemHeight","restoreTextDirection","isListened","calculateItemWidth","calculateItemHeight","createTitle","distanceBetweenPoints","pushOrConcat","splitNewlines","createTooltipItem","getTooltipSize","determineYAlign","doesNotFitWithAlign","determineXAlign","determineAlignment","alignX","alignY","getBackgroundPoint","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","overrideCallbacks","defaultCallbacks","noop","invokeCallbackWithFallback","addIfString","findOrAddLabel","_getLabelForValue","generateTicks","MIN_SPACING","niceNum","almostWhole","almostEquals","_decimalPlaces","relativeLabelSize","LinearScaleBase","_setMinAndMaxByKey","Ticks","log10Floor","changeExponent","isMajor","startExp","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","updateLimits","buildPointLabelItems","createPointLabelItem","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","drawPointLabelBox","drawPointLabels","pathRadiusLine","drawRadiusLine","createPointLabelContext","INTERVALS","UNITS","sorter","determineUnitForAutoTicks","determineUnitForFormatting","determineMajorUnit","addTick","_lookup","setMajorTicks","ticksFromTimestamps","_filterBetween","isNumberFinite","isValidKey","_merger","_mergerIf","_deprecated","keyResolvers","_splitKey","_getKeyResolver","PITAU","INFINITY","RAD_PER_DEG","QUARTER_PI","TWO_THIRDS_PI","isFiniteNumber","_angleDiff","arrayEvents","pixelSize","fontStyle","fontFamily","check","atEdge","elasticIn","elasticOut","isPatternOrGradient","getHoverColor","applyAnimationsDefaults","applyLayoutsDefaults","intlCache","getNumberFormat","calculateDelta","applyScaleDefaults","getScope","Defaults","toFontString","setRenderOpts","decorateText","drawBackdrop","LINE_HEIGHT","FONT_STYLE","toLineHeight","numberOrZero","_resolve","_cached","_resolveWithPrefixes","getKeysFromAllScopes","_resolveWithContext","readKey","needsSubResolver","_resolveScriptable","_resolveArray","createSubResolver","resolveFallback","addScopes","addScopesFromKey","subGetTarget","resolveKeysFromAllScopes","getPoint","getValueAxis","splineCurve","monotoneAdjust","monotoneCompute","splineCurveMonotone","capControlPoint","parseMaxStyle","getPositionedStyle","useOffsetPos","getCanvasPosition","getContainerSize","round1","getRightToLeftAdapter","getLeftToRightAdapter","propertyFn","normalizeSegment","getSegment","findStartAndEnd","solidSegments","splitByStyles","doSplitByStyles","readStyle","styleChanged"],"version":3,"file":"index.e8a11578.js.map"}